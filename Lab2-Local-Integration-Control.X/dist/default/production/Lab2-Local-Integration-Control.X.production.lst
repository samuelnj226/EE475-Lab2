

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb  5 10:52:11 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,inline
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,inline
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,inline
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,inline
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	text105,global,reloc=2,class=CODE,delta=1
   123                           	psect	text106,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text107,global,reloc=2,class=CODE,delta=1,inline
   125                           	psect	text108,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	text109,global,reloc=2,class=CODE,delta=1
   127                           	psect	text110,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	text111,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   134                           	psect	text116,global,reloc=2,class=CODE,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   136                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   137  0000                     
   138                           ; Version 1.45
   139                           ; Generated 16/11/2017 GMT
   140                           ; 
   141                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   142                           ; All rights reserved.
   143                           ; 
   144                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   145                           ; 
   146                           ; Redistribution and use in source and binary forms, with or without modification, are
   147                           ; permitted provided that the following conditions are met:
   148                           ; 
   149                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   150                           ;        conditions and the following disclaimer.
   151                           ; 
   152                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   153                           ;        of conditions and the following disclaimer in the documentation and/or other
   154                           ;        materials provided with the distribution.
   155                           ; 
   156                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   157                           ;        software without specific prior written permission.
   158                           ; 
   159                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   160                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   161                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   162                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   163                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   164                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   165                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   166                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   167                           ; 
   168                           ; 
   169                           ; Code-generator required, PIC18F25K22 Definitions
   170                           ; 
   171                           ; SFR Addresses
   172  0000                     
   173                           	psect	idataBANK1
   174  002ABC                     __pidataBANK1:
   175                           	opt stack 0
   176                           
   177                           ;initializer for printString@F7188
   178  002ABC  0A                 	db	10
   179  002ABD  0D                 	db	13
   180  002ABE  48                 	db	72
   181  002ABF  65                 	db	101
   182  002AC0  6C                 	db	108
   183  002AC1  6C                 	db	108
   184  002AC2  6F                 	db	111
   185  002AC3  2E                 	db	46
   186  002AC4  20                 	db	32
   187  002AC5  57                 	db	87
   188  002AC6  65                 	db	101
   189  002AC7  6C                 	db	108
   190  002AC8  63                 	db	99
   191  002AC9  6F                 	db	111
   192  002ACA  6D                 	db	109
   193  002ACB  65                 	db	101
   194  002ACC  20                 	db	32
   195  002ACD  74                 	db	116
   196  002ACE  6F                 	db	111
   197  002ACF  20                 	db	32
   198  002AD0  45                 	db	69
   199  002AD1  45                 	db	69
   200  002AD2  20                 	db	32
   201  002AD3  48                 	db	72
   202  002AD4  6F                 	db	111
   203  002AD5  73                 	db	115
   204  002AD6  70                 	db	112
   205  002AD7  69                 	db	105
   206  002AD8  74                 	db	116
   207  002AD9  61                 	db	97
   208  002ADA  6C                 	db	108
   209  002ADB  20                 	db	32
   210  002ADC  0A                 	db	10
   211  002ADD  0D                 	db	13
   212  002ADE  00                 	db	0
   213  002ADF  00                 	db	0
   214  002AE0  00                 	db	0
   215  002AE1  00                 	db	0
   216  002AE2  00                 	db	0
   217  002AE3  00                 	db	0
   218  002AE4  00                 	db	0
   219  002AE5  00                 	db	0
   220  002AE6  00                 	db	0
   221  002AE7  00                 	db	0
   222  002AE8  00                 	db	0
   223  002AE9  00                 	db	0
   224  002AEA  00                 	db	0
   225  002AEB  00                 	db	0
   226  002AEC  00                 	db	0
   227  002AED  00                 	db	0
   228                           
   229                           ;initializer for _fsmStateTable
   230  002AEE  90                 	db	low _do_I2C_IDLE
   231  002AEF  30                 	db	high _do_I2C_IDLE
   232  002AF0  E8                 	db	low _do_I2C_SEND_ADR_READ
   233  002AF1  2F                 	db	high _do_I2C_SEND_ADR_READ
   234  002AF2  D2                 	db	low _do_I2C_SEND_ADR_WRITE
   235  002AF3  2F                 	db	high _do_I2C_SEND_ADR_WRITE
   236  002AF4  04                 	db	low _do_I2C_TX
   237  002AF5  24                 	db	high _do_I2C_TX
   238  002AF6  C2                 	db	low _do_I2C_RX
   239  002AF7  26                 	db	high _do_I2C_RX
   240  002AF8  7E                 	db	low _do_I2C_RCEN
   241  002AF9  30                 	db	high _do_I2C_RCEN
   242  002AFA  4E                 	db	low _do_I2C_TX_EMPTY
   243  002AFB  29                 	db	high _do_I2C_TX_EMPTY
   244  002AFC  36                 	db	low _do_I2C_SEND_RESTART_READ
   245  002AFD  31                 	db	high _do_I2C_SEND_RESTART_READ
   246  002AFE  28                 	db	low _do_I2C_SEND_RESTART_WRITE
   247  002AFF  31                 	db	high _do_I2C_SEND_RESTART_WRITE
   248  002B00  1A                 	db	low _do_I2C_SEND_RESTART
   249  002B01  31                 	db	high _do_I2C_SEND_RESTART
   250  002B02  0C                 	db	low _do_I2C_SEND_STOP
   251  002B03  31                 	db	high _do_I2C_SEND_STOP
   252  002B04  FE                 	db	low _do_I2C_DO_ACK
   253  002B05  30                 	db	high _do_I2C_DO_ACK
   254  002B06  F0                 	db	low _do_I2C_DO_NACK_STOP
   255  002B07  30                 	db	high _do_I2C_DO_NACK_STOP
   256  002B08  E2                 	db	low _do_I2C_DO_NACK_RESTART
   257  002B09  30                 	db	high _do_I2C_DO_NACK_RESTART
   258  002B0A  FE                 	db	low _do_I2C_RESET
   259  002B0B  2F                 	db	high _do_I2C_RESET
   260  002B0C  00                 	db	low _do_I2C_DO_ADDRESS_NACK
   261  002B0D  2C                 	db	high _do_I2C_DO_ADDRESS_NACK
   262                           
   263                           	psect	mediumconst
   264  007CF4                     __pmediumconst:
   265                           	opt stack 0
   266  007CF4  00                 	db	0
   267  007CF5                     _dpowers:
   268                           	opt stack 0
   269  007CF5  0001               	dw	1
   270  007CF7  0000               	dw	0
   271  007CF9  000A               	dw	10
   272  007CFB  0000               	dw	0
   273  007CFD  0064               	dw	100
   274  007CFF  0000               	dw	0
   275  007D01  03E8               	dw	1000
   276  007D03  0000               	dw	0
   277  007D05  2710               	dw	10000
   278  007D07  0000               	dw	0
   279  007D09  86A0               	dw	34464
   280  007D0B  0001               	dw	1
   281  007D0D  4240               	dw	16960
   282  007D0F  000F               	dw	15
   283  007D11  9680               	dw	38528
   284  007D13  0098               	dw	152
   285  007D15  E100               	dw	57600
   286  007D17  05F5               	dw	1525
   287  007D19  CA00               	dw	51712
   288  007D1B  3B9A               	dw	15258
   289  007D1D                     __end_of_dpowers:
   290                           	opt stack 0
   291  007D1D                     __powers_:
   292                           	opt stack 0
   293  007D1D  00                 	db	0
   294  007D1E  80                 	db	128
   295  007D1F  3F                 	db	63
   296  007D20  00                 	db	0
   297  007D21  20                 	db	32
   298  007D22  41                 	db	65
   299  007D23  00                 	db	0
   300  007D24  C8                 	db	200
   301  007D25  42                 	db	66
   302  007D26  00                 	db	0
   303  007D27  7A                 	db	122
   304  007D28  44                 	db	68
   305  007D29  40                 	db	64
   306  007D2A  1C                 	db	28
   307  007D2B  46                 	db	70
   308  007D2C  50                 	db	80
   309  007D2D  C3                 	db	195
   310  007D2E  47                 	db	71
   311  007D2F  24                 	db	36
   312  007D30  74                 	db	116
   313  007D31  49                 	db	73
   314  007D32  97                 	db	151
   315  007D33  18                 	db	24
   316  007D34  4B                 	db	75
   317  007D35  BC                 	db	188
   318  007D36  BE                 	db	190
   319  007D37  4C                 	db	76
   320  007D38  6B                 	db	107
   321  007D39  6E                 	db	110
   322  007D3A  4E                 	db	78
   323  007D3B  03                 	db	3
   324  007D3C  15                 	db	21
   325  007D3D  50                 	db	80
   326  007D3E  79                 	db	121
   327  007D3F  AD                 	db	173
   328  007D40  60                 	db	96
   329  007D41  F3                 	db	243
   330  007D42  49                 	db	73
   331  007D43  71                 	db	113
   332  007D44                     __end_of__powers_:
   333                           	opt stack 0
   334  007D44                     __npowers_:
   335                           	opt stack 0
   336  007D44  00                 	db	0
   337  007D45  80                 	db	128
   338  007D46  3F                 	db	63
   339  007D47  CD                 	db	205
   340  007D48  CC                 	db	204
   341  007D49  3D                 	db	61
   342  007D4A  D7                 	db	215
   343  007D4B  23                 	db	35
   344  007D4C  3C                 	db	60
   345  007D4D  12                 	db	18
   346  007D4E  83                 	db	131
   347  007D4F  3A                 	db	58
   348  007D50  B7                 	db	183
   349  007D51  D1                 	db	209
   350  007D52  38                 	db	56
   351  007D53  C6                 	db	198
   352  007D54  27                 	db	39
   353  007D55  37                 	db	55
   354  007D56  38                 	db	56
   355  007D57  86                 	db	134
   356  007D58  35                 	db	53
   357  007D59  C0                 	db	192
   358  007D5A  D6                 	db	214
   359  007D5B  33                 	db	51
   360  007D5C  CC                 	db	204
   361  007D5D  2B                 	db	43
   362  007D5E  32                 	db	50
   363  007D5F  70                 	db	112
   364  007D60  89                 	db	137
   365  007D61  30                 	db	48
   366  007D62  E7                 	db	231
   367  007D63  DB                 	db	219
   368  007D64  2E                 	db	46
   369  007D65  E5                 	db	229
   370  007D66  3C                 	db	60
   371  007D67  1E                 	db	30
   372  007D68  42                 	db	66
   373  007D69  A2                 	db	162
   374  007D6A  0D                 	db	13
   375  007D6B                     __end_of__npowers_:
   376                           	opt stack 0
   377  007D6B                     STR_1:
   378  007D6B  0A                 	db	10
   379  007D6C  0D                 	db	13
   380  007D6D  45                 	db	69	;'E'
   381  007D6E  6E                 	db	110	;'n'
   382  007D6F  74                 	db	116	;'t'
   383  007D70  65                 	db	101	;'e'
   384  007D71  72                 	db	114	;'r'
   385  007D72  20                 	db	32
   386  007D73  61                 	db	97	;'a'
   387  007D74  20                 	db	32
   388  007D75  63                 	db	99	;'c'
   389  007D76  6F                 	db	111	;'o'
   390  007D77  6D                 	db	109	;'m'
   391  007D78  6D                 	db	109	;'m'
   392  007D79  61                 	db	97	;'a'
   393  007D7A  6E                 	db	110	;'n'
   394  007D7B  64                 	db	100	;'d'
   395  007D7C  20                 	db	32
   396  007D7D  28                 	db	40
   397  007D7E  49                 	db	73	;'I'
   398  007D7F  3A                 	db	58	;':'
   399  007D80  20                 	db	32
   400  007D81  69                 	db	105	;'i'
   401  007D82  6E                 	db	110	;'n'
   402  007D83  63                 	db	99	;'c'
   403  007D84  72                 	db	114	;'r'
   404  007D85  65                 	db	101	;'e'
   405  007D86  6D                 	db	109	;'m'
   406  007D87  65                 	db	101	;'e'
   407  007D88  6E                 	db	110	;'n'
   408  007D89  74                 	db	116	;'t'
   409  007D8A  2C                 	db	44
   410  007D8B  20                 	db	32
   411  007D8C  44                 	db	68	;'D'
   412  007D8D  3A                 	db	58	;':'
   413  007D8E  20                 	db	32
   414  007D8F  64                 	db	100	;'d'
   415  007D90  65                 	db	101	;'e'
   416  007D91  63                 	db	99	;'c'
   417  007D92  72                 	db	114	;'r'
   418  007D93  65                 	db	101	;'e'
   419  007D94  6D                 	db	109	;'m'
   420  007D95  65                 	db	101	;'e'
   421  007D96  6E                 	db	110	;'n'
   422  007D97  74                 	db	116	;'t'
   423  007D98  2C                 	db	44
   424  007D99  20                 	db	32
   425  007D9A  53                 	db	83	;'S'
   426  007D9B  3A                 	db	58	;':'
   427  007D9C  20                 	db	32
   428  007D9D  73                 	db	115	;'s'
   429  007D9E  65                 	db	101	;'e'
   430  007D9F  74                 	db	116	;'t'
   431  007DA0  20                 	db	32
   432  007DA1  70                 	db	112	;'p'
   433  007DA2  6F                 	db	111	;'o'
   434  007DA3  69                 	db	105	;'i'
   435  007DA4  6E                 	db	110	;'n'
   436  007DA5  74                 	db	116	;'t'
   437  007DA6  2C                 	db	44
   438  007DA7  20                 	db	32
   439  007DA8  54                 	db	84	;'T'
   440  007DA9  3A                 	db	58	;':'
   441  007DAA  20                 	db	32
   442  007DAB  73                 	db	115	;'s'
   443  007DAC  74                 	db	116	;'t'
   444  007DAD  61                 	db	97	;'a'
   445  007DAE  74                 	db	116	;'t'
   446  007DAF  75                 	db	117	;'u'
   447  007DB0  73                 	db	115	;'s'
   448  007DB1  2C                 	db	44
   449  007DB2  20                 	db	32
   450  007DB3  48                 	db	72	;'H'
   451  007DB4  3A                 	db	58	;':'
   452  007DB5  20                 	db	32
   453  007DB6  68                 	db	104	;'h'
   454  007DB7  65                 	db	101	;'e'
   455  007DB8  6C                 	db	108	;'l'
   456  007DB9  70                 	db	112	;'p'
   457  007DBA  2C                 	db	44
   458  007DBB  20                 	db	32
   459  007DBC  50                 	db	80	;'P'
   460  007DBD  3A                 	db	58	;':'
   461  007DBE  20                 	db	32
   462  007DBF  65                 	db	101	;'e'
   463  007DC0  72                 	db	114	;'r'
   464  007DC1  72                 	db	114	;'r'
   465  007DC2  6F                 	db	111	;'o'
   466  007DC3  72                 	db	114	;'r'
   467  007DC4  20                 	db	32
   468  007DC5  73                 	db	115	;'s'
   469  007DC6  74                 	db	116	;'t'
   470  007DC7  61                 	db	97	;'a'
   471  007DC8  74                 	db	116	;'t'
   472  007DC9  75                 	db	117	;'u'
   473  007DCA  73                 	db	115	;'s'
   474  007DCB  29                 	db	41
   475  007DCC  20                 	db	32
   476  007DCD  3A                 	db	58	;':'
   477  007DCE  20                 	db	32
   478  007DCF  00                 	db	0
   479  007DD0                     STR_8:
   480  007DD0  0A                 	db	10
   481  007DD1  28                 	db	40
   482  007DD2  49                 	db	73	;'I'
   483  007DD3  3A                 	db	58	;':'
   484  007DD4  20                 	db	32
   485  007DD5  69                 	db	105	;'i'
   486  007DD6  6E                 	db	110	;'n'
   487  007DD7  63                 	db	99	;'c'
   488  007DD8  72                 	db	114	;'r'
   489  007DD9  65                 	db	101	;'e'
   490  007DDA  6D                 	db	109	;'m'
   491  007DDB  65                 	db	101	;'e'
   492  007DDC  6E                 	db	110	;'n'
   493  007DDD  74                 	db	116	;'t'
   494  007DDE  2C                 	db	44
   495  007DDF  20                 	db	32
   496  007DE0  44                 	db	68	;'D'
   497  007DE1  3A                 	db	58	;':'
   498  007DE2  20                 	db	32
   499  007DE3  64                 	db	100	;'d'
   500  007DE4  65                 	db	101	;'e'
   501  007DE5  63                 	db	99	;'c'
   502  007DE6  72                 	db	114	;'r'
   503  007DE7  65                 	db	101	;'e'
   504  007DE8  6D                 	db	109	;'m'
   505  007DE9  65                 	db	101	;'e'
   506  007DEA  6E                 	db	110	;'n'
   507  007DEB  74                 	db	116	;'t'
   508  007DEC  2C                 	db	44
   509  007DED  20                 	db	32
   510  007DEE  53                 	db	83	;'S'
   511  007DEF  3A                 	db	58	;':'
   512  007DF0  20                 	db	32
   513  007DF1  73                 	db	115	;'s'
   514  007DF2  65                 	db	101	;'e'
   515  007DF3  74                 	db	116	;'t'
   516  007DF4  20                 	db	32
   517  007DF5  70                 	db	112	;'p'
   518  007DF6  6F                 	db	111	;'o'
   519  007DF7  69                 	db	105	;'i'
   520  007DF8  6E                 	db	110	;'n'
   521  007DF9  74                 	db	116	;'t'
   522  007DFA  2C                 	db	44
   523  007DFB  20                 	db	32
   524  007DFC  54                 	db	84	;'T'
   525  007DFD  3A                 	db	58	;':'
   526  007DFE  20                 	db	32
   527  007DFF  73                 	db	115	;'s'
   528  007E00  74                 	db	116	;'t'
   529  007E01  61                 	db	97	;'a'
   530  007E02  74                 	db	116	;'t'
   531  007E03  75                 	db	117	;'u'
   532  007E04  73                 	db	115	;'s'
   533  007E05  2C                 	db	44
   534  007E06  20                 	db	32
   535  007E07  48                 	db	72	;'H'
   536  007E08  3A                 	db	58	;':'
   537  007E09  20                 	db	32
   538  007E0A  68                 	db	104	;'h'
   539  007E0B  65                 	db	101	;'e'
   540  007E0C  6C                 	db	108	;'l'
   541  007E0D  70                 	db	112	;'p'
   542  007E0E  2C                 	db	44
   543  007E0F  20                 	db	32
   544  007E10  50                 	db	80	;'P'
   545  007E11  3A                 	db	58	;':'
   546  007E12  20                 	db	32
   547  007E13  65                 	db	101	;'e'
   548  007E14  72                 	db	114	;'r'
   549  007E15  72                 	db	114	;'r'
   550  007E16  6F                 	db	111	;'o'
   551  007E17  72                 	db	114	;'r'
   552  007E18  20                 	db	32
   553  007E19  73                 	db	115	;'s'
   554  007E1A  74                 	db	116	;'t'
   555  007E1B  61                 	db	97	;'a'
   556  007E1C  74                 	db	116	;'t'
   557  007E1D  75                 	db	117	;'u'
   558  007E1E  73                 	db	115	;'s'
   559  007E1F  29                 	db	41
   560  007E20  00                 	db	0
   561  007E21                     STR_13:
   562  007E21  0A                 	db	10
   563  007E22  0D                 	db	13
   564  007E23  45                 	db	69	;'E'
   565  007E24  72                 	db	114	;'r'
   566  007E25  72                 	db	114	;'r'
   567  007E26  6F                 	db	111	;'o'
   568  007E27  72                 	db	114	;'r'
   569  007E28  20                 	db	32
   570  007E29  6C                 	db	108	;'l'
   571  007E2A  65                 	db	101	;'e'
   572  007E2B  76                 	db	118	;'v'
   573  007E2C  65                 	db	101	;'e'
   574  007E2D  6C                 	db	108	;'l'
   575  007E2E  20                 	db	32
   576  007E2F  69                 	db	105	;'i'
   577  007E30  73                 	db	115	;'s'
   578  007E31  20                 	db	32
   579  007E32  30                 	db	48	;'0'
   580  007E33  20                 	db	32
   581  007E34  61                 	db	97	;'a'
   582  007E35  6E                 	db	110	;'n'
   583  007E36  64                 	db	100	;'d'
   584  007E37  20                 	db	32
   585  007E38  69                 	db	105	;'i'
   586  007E39  73                 	db	115	;'s'
   587  007E3A  20                 	db	32
   588  007E3B  73                 	db	115	;'s'
   589  007E3C  65                 	db	101	;'e'
   590  007E3D  76                 	db	118	;'v'
   591  007E3E  65                 	db	101	;'e'
   592  007E3F  72                 	db	114	;'r'
   593  007E40  65                 	db	101	;'e'
   594  007E41  2E                 	db	46
   595  007E42  20                 	db	32
   596  007E43  41                 	db	65	;'A'
   597  007E44  64                 	db	100	;'d'
   598  007E45  6A                 	db	106	;'j'
   599  007E46  75                 	db	117	;'u'
   600  007E47  73                 	db	115	;'s'
   601  007E48  74                 	db	116	;'t'
   602  007E49  69                 	db	105	;'i'
   603  007E4A  6E                 	db	110	;'n'
   604  007E4B  67                 	db	103	;'g'
   605  007E4C  20                 	db	32
   606  007E4D  6D                 	db	109	;'m'
   607  007E4E  6F                 	db	111	;'o'
   608  007E4F  74                 	db	116	;'t'
   609  007E50  6F                 	db	111	;'o'
   610  007E51  72                 	db	114	;'r'
   611  007E52  20                 	db	32
   612  007E53  73                 	db	115	;'s'
   613  007E54  70                 	db	112	;'p'
   614  007E55  65                 	db	101	;'e'
   615  007E56  65                 	db	101	;'e'
   616  007E57  64                 	db	100	;'d'
   617  007E58  2E                 	db	46
   618  007E59  00                 	db	0
   619  007E5A                     STR_6:
   620  007E5A  0A                 	db	10
   621  007E5B  54                 	db	84	;'T'
   622  007E5C  68                 	db	104	;'h'
   623  007E5D  65                 	db	101	;'e'
   624  007E5E  20                 	db	32
   625  007E5F  76                 	db	118	;'v'
   626  007E60  61                 	db	97	;'a'
   627  007E61  6C                 	db	108	;'l'
   628  007E62  75                 	db	117	;'u'
   629  007E63  65                 	db	101	;'e'
   630  007E64  20                 	db	32
   631  007E65  65                 	db	101	;'e'
   632  007E66  6E                 	db	110	;'n'
   633  007E67  74                 	db	116	;'t'
   634  007E68  65                 	db	101	;'e'
   635  007E69  72                 	db	114	;'r'
   636  007E6A  65                 	db	101	;'e'
   637  007E6B  64                 	db	100	;'d'
   638  007E6C  20                 	db	32
   639  007E6D  69                 	db	105	;'i'
   640  007E6E  73                 	db	115	;'s'
   641  007E6F  20                 	db	32
   642  007E70  74                 	db	116	;'t'
   643  007E71  6F                 	db	111	;'o'
   644  007E72  6F                 	db	111	;'o'
   645  007E73  20                 	db	32
   646  007E74  6C                 	db	108	;'l'
   647  007E75  61                 	db	97	;'a'
   648  007E76  72                 	db	114	;'r'
   649  007E77  67                 	db	103	;'g'
   650  007E78  65                 	db	101	;'e'
   651  007E79  2C                 	db	44
   652  007E7A  20                 	db	32
   653  007E7B  72                 	db	114	;'r'
   654  007E7C  65                 	db	101	;'e'
   655  007E7D  65                 	db	101	;'e'
   656  007E7E  6E                 	db	110	;'n'
   657  007E7F  74                 	db	116	;'t'
   658  007E80  65                 	db	101	;'e'
   659  007E81  72                 	db	114	;'r'
   660  007E82  20                 	db	32
   661  007E83  63                 	db	99	;'c'
   662  007E84  6F                 	db	111	;'o'
   663  007E85  6D                 	db	109	;'m'
   664  007E86  6D                 	db	109	;'m'
   665  007E87  61                 	db	97	;'a'
   666  007E88  6E                 	db	110	;'n'
   667  007E89  64                 	db	100	;'d'
   668  007E8A  00                 	db	0
   669  007E8B                     STR_18:
   670  007E8B  0A                 	db	10
   671  007E8C  0D                 	db	13
   672  007E8D  45                 	db	69	;'E'
   673  007E8E  72                 	db	114	;'r'
   674  007E8F  72                 	db	114	;'r'
   675  007E90  6F                 	db	111	;'o'
   676  007E91  72                 	db	114	;'r'
   677  007E92  20                 	db	32
   678  007E93  6C                 	db	108	;'l'
   679  007E94  65                 	db	101	;'e'
   680  007E95  76                 	db	118	;'v'
   681  007E96  65                 	db	101	;'e'
   682  007E97  6C                 	db	108	;'l'
   683  007E98  20                 	db	32
   684  007E99  69                 	db	105	;'i'
   685  007E9A  73                 	db	115	;'s'
   686  007E9B  20                 	db	32
   687  007E9C  32                 	db	50	;'2'
   688  007E9D  20                 	db	32
   689  007E9E  61                 	db	97	;'a'
   690  007E9F  6E                 	db	110	;'n'
   691  007EA0  64                 	db	100	;'d'
   692  007EA1  20                 	db	32
   693  007EA2  69                 	db	105	;'i'
   694  007EA3  73                 	db	115	;'s'
   695  007EA4  20                 	db	32
   696  007EA5  6F                 	db	111	;'o'
   697  007EA6  66                 	db	102	;'f'
   698  007EA7  20                 	db	32
   699  007EA8  63                 	db	99	;'c'
   700  007EA9  6F                 	db	111	;'o'
   701  007EAA  6E                 	db	110	;'n'
   702  007EAB  63                 	db	99	;'c'
   703  007EAC  65                 	db	101	;'e'
   704  007EAD  72                 	db	114	;'r'
   705  007EAE  6E                 	db	110	;'n'
   706  007EAF  20                 	db	32
   707  007EB0  00                 	db	0
   708  007EB1                     STR_16:
   709  007EB1  0A                 	db	10
   710  007EB2  0D                 	db	13
   711  007EB3  45                 	db	69	;'E'
   712  007EB4  72                 	db	114	;'r'
   713  007EB5  72                 	db	114	;'r'
   714  007EB6  6F                 	db	111	;'o'
   715  007EB7  72                 	db	114	;'r'
   716  007EB8  20                 	db	32
   717  007EB9  6C                 	db	108	;'l'
   718  007EBA  65                 	db	101	;'e'
   719  007EBB  76                 	db	118	;'v'
   720  007EBC  65                 	db	101	;'e'
   721  007EBD  6C                 	db	108	;'l'
   722  007EBE  20                 	db	32
   723  007EBF  69                 	db	105	;'i'
   724  007EC0  73                 	db	115	;'s'
   725  007EC1  20                 	db	32
   726  007EC2  31                 	db	49	;'1'
   727  007EC3  20                 	db	32
   728  007EC4  61                 	db	97	;'a'
   729  007EC5  6E                 	db	110	;'n'
   730  007EC6  64                 	db	100	;'d'
   731  007EC7  20                 	db	32
   732  007EC8  69                 	db	105	;'i'
   733  007EC9  73                 	db	115	;'s'
   734  007ECA  20                 	db	32
   735  007ECB  6D                 	db	109	;'m'
   736  007ECC  6F                 	db	111	;'o'
   737  007ECD  64                 	db	100	;'d'
   738  007ECE  65                 	db	101	;'e'
   739  007ECF  72                 	db	114	;'r'
   740  007ED0  61                 	db	97	;'a'
   741  007ED1  74                 	db	116	;'t'
   742  007ED2  65                 	db	101	;'e'
   743  007ED3  2E                 	db	46
   744  007ED4  00                 	db	0
   745  007ED5                     STR_11:
   746  007ED5  55                 	db	85	;'U'
   747  007ED6  6E                 	db	110	;'n'
   748  007ED7  72                 	db	114	;'r'
   749  007ED8  65                 	db	101	;'e'
   750  007ED9  63                 	db	99	;'c'
   751  007EDA  6F                 	db	111	;'o'
   752  007EDB  67                 	db	103	;'g'
   753  007EDC  6E                 	db	110	;'n'
   754  007EDD  69                 	db	105	;'i'
   755  007EDE  7A                 	db	122	;'z'
   756  007EDF  65                 	db	101	;'e'
   757  007EE0  64                 	db	100	;'d'
   758  007EE1  20                 	db	32
   759  007EE2  63                 	db	99	;'c'
   760  007EE3  6F                 	db	111	;'o'
   761  007EE4  6D                 	db	109	;'m'
   762  007EE5  6D                 	db	109	;'m'
   763  007EE6  61                 	db	97	;'a'
   764  007EE7  6E                 	db	110	;'n'
   765  007EE8  64                 	db	100	;'d'
   766  007EE9  2E                 	db	46
   767  007EEA  20                 	db	32
   768  007EEB  54                 	db	84	;'T'
   769  007EEC  72                 	db	114	;'r'
   770  007EED  79                 	db	121	;'y'
   771  007EEE  20                 	db	32
   772  007EEF  61                 	db	97	;'a'
   773  007EF0  67                 	db	103	;'g'
   774  007EF1  61                 	db	97	;'a'
   775  007EF2  69                 	db	105	;'i'
   776  007EF3  6E                 	db	110	;'n'
   777  007EF4  2E                 	db	46
   778  007EF5  20                 	db	32
   779  007EF6  0A                 	db	10
   780  007EF7  00                 	db	0
   781  007EF8                     STR_3:
   782  007EF8  44                 	db	68	;'D'
   783  007EF9  65                 	db	101	;'e'
   784  007EFA  63                 	db	99	;'c'
   785  007EFB  72                 	db	114	;'r'
   786  007EFC  65                 	db	101	;'e'
   787  007EFD  6D                 	db	109	;'m'
   788  007EFE  65                 	db	101	;'e'
   789  007EFF  6E                 	db	110	;'n'
   790  007F00  74                 	db	116	;'t'
   791  007F01  20                 	db	32
   792  007F02  73                 	db	115	;'s'
   793  007F03  70                 	db	112	;'p'
   794  007F04  65                 	db	101	;'e'
   795  007F05  65                 	db	101	;'e'
   796  007F06  64                 	db	100	;'d'
   797  007F07  20                 	db	32
   798  007F08  6F                 	db	111	;'o'
   799  007F09  66                 	db	102	;'f'
   800  007F0A  20                 	db	32
   801  007F0B  6D                 	db	109	;'m'
   802  007F0C  6F                 	db	111	;'o'
   803  007F0D  74                 	db	116	;'t'
   804  007F0E  6F                 	db	111	;'o'
   805  007F0F  72                 	db	114	;'r'
   806  007F10  2E                 	db	46
   807  007F11  20                 	db	32
   808  007F12  0A                 	db	10
   809  007F13  0D                 	db	13
   810  007F14  00                 	db	0
   811  007F15                     STR_7:
   812  007F15  0A                 	db	10
   813  007F16  54                 	db	84	;'T'
   814  007F17  68                 	db	104	;'h'
   815  007F18  65                 	db	101	;'e'
   816  007F19  20                 	db	32
   817  007F1A  6D                 	db	109	;'m'
   818  007F1B  6F                 	db	111	;'o'
   819  007F1C  74                 	db	116	;'t'
   820  007F1D  6F                 	db	111	;'o'
   821  007F1E  72                 	db	114	;'r'
   822  007F1F  20                 	db	32
   823  007F20  69                 	db	105	;'i'
   824  007F21  73                 	db	115	;'s'
   825  007F22  20                 	db	32
   826  007F23  73                 	db	115	;'s'
   827  007F24  65                 	db	101	;'e'
   828  007F25  74                 	db	116	;'t'
   829  007F26  20                 	db	32
   830  007F27  74                 	db	116	;'t'
   831  007F28  6F                 	db	111	;'o'
   832  007F29  20                 	db	32
   833  007F2A  25                 	db	37
   834  007F2B  2E                 	db	46
   835  007F2C  31                 	db	49	;'1'
   836  007F2D  66                 	db	102	;'f'
   837  007F2E  25                 	db	37
   838  007F2F  25                 	db	37
   839  007F30  00                 	db	0
   840  007F31                     STR_2:
   841  007F31  49                 	db	73	;'I'
   842  007F32  6E                 	db	110	;'n'
   843  007F33  63                 	db	99	;'c'
   844  007F34  72                 	db	114	;'r'
   845  007F35  65                 	db	101	;'e'
   846  007F36  6D                 	db	109	;'m'
   847  007F37  65                 	db	101	;'e'
   848  007F38  6E                 	db	110	;'n'
   849  007F39  74                 	db	116	;'t'
   850  007F3A  20                 	db	32
   851  007F3B  73                 	db	115	;'s'
   852  007F3C  70                 	db	112	;'p'
   853  007F3D  65                 	db	101	;'e'
   854  007F3E  65                 	db	101	;'e'
   855  007F3F  64                 	db	100	;'d'
   856  007F40  20                 	db	32
   857  007F41  6F                 	db	111	;'o'
   858  007F42  66                 	db	102	;'f'
   859  007F43  20                 	db	32
   860  007F44  6D                 	db	109	;'m'
   861  007F45  6F                 	db	111	;'o'
   862  007F46  74                 	db	116	;'t'
   863  007F47  6F                 	db	111	;'o'
   864  007F48  72                 	db	114	;'r'
   865  007F49  2E                 	db	46
   866  007F4A  20                 	db	32
   867  007F4B  00                 	db	0
   868  007F4C                     STR_5:
   869  007F4C  0A                 	db	10
   870  007F4D  54                 	db	84	;'T'
   871  007F4E  68                 	db	104	;'h'
   872  007F4F  65                 	db	101	;'e'
   873  007F50  20                 	db	32
   874  007F51  6D                 	db	109	;'m'
   875  007F52  6F                 	db	111	;'o'
   876  007F53  74                 	db	116	;'t'
   877  007F54  6F                 	db	111	;'o'
   878  007F55  72                 	db	114	;'r'
   879  007F56  20                 	db	32
   880  007F57  69                 	db	105	;'i'
   881  007F58  73                 	db	115	;'s'
   882  007F59  20                 	db	32
   883  007F5A  73                 	db	115	;'s'
   884  007F5B  65                 	db	101	;'e'
   885  007F5C  74                 	db	116	;'t'
   886  007F5D  20                 	db	32
   887  007F5E  74                 	db	116	;'t'
   888  007F5F  6F                 	db	111	;'o'
   889  007F60  20                 	db	32
   890  007F61  25                 	db	37
   891  007F62  64                 	db	100	;'d'
   892  007F63  25                 	db	37
   893  007F64  25                 	db	37
   894  007F65  00                 	db	0
   895  007F66                     STR_10:
   896  007F66  44                 	db	68	;'D'
   897  007F67  69                 	db	105	;'i'
   898  007F68  73                 	db	115	;'s'
   899  007F69  61                 	db	97	;'a'
   900  007F6A  62                 	db	98	;'b'
   901  007F6B  6C                 	db	108	;'l'
   902  007F6C  65                 	db	101	;'e'
   903  007F6D  20                 	db	32
   904  007F6E  45                 	db	69	;'E'
   905  007F6F  72                 	db	114	;'r'
   906  007F70  72                 	db	114	;'r'
   907  007F71  6F                 	db	111	;'o'
   908  007F72  72                 	db	114	;'r'
   909  007F73  20                 	db	32
   910  007F74  50                 	db	80	;'P'
   911  007F75  72                 	db	114	;'r'
   912  007F76  69                 	db	105	;'i'
   913  007F77  6E                 	db	110	;'n'
   914  007F78  74                 	db	116	;'t'
   915  007F79  69                 	db	105	;'i'
   916  007F7A  6E                 	db	110	;'n'
   917  007F7B  67                 	db	103	;'g'
   918  007F7C  20                 	db	32
   919  007F7D  0A                 	db	10
   920  007F7E  00                 	db	0
   921  007F7F                     STR_9:
   922  007F7F  45                 	db	69	;'E'
   923  007F80  6E                 	db	110	;'n'
   924  007F81  61                 	db	97	;'a'
   925  007F82  62                 	db	98	;'b'
   926  007F83  6C                 	db	108	;'l'
   927  007F84  65                 	db	101	;'e'
   928  007F85  20                 	db	32
   929  007F86  45                 	db	69	;'E'
   930  007F87  72                 	db	114	;'r'
   931  007F88  72                 	db	114	;'r'
   932  007F89  6F                 	db	111	;'o'
   933  007F8A  72                 	db	114	;'r'
   934  007F8B  20                 	db	32
   935  007F8C  50                 	db	80	;'P'
   936  007F8D  72                 	db	114	;'r'
   937  007F8E  69                 	db	105	;'i'
   938  007F8F  6E                 	db	110	;'n'
   939  007F90  74                 	db	116	;'t'
   940  007F91  69                 	db	105	;'i'
   941  007F92  6E                 	db	110	;'n'
   942  007F93  67                 	db	103	;'g'
   943  007F94  20                 	db	32
   944  007F95  0A                 	db	10
   945  007F96  00                 	db	0
   946  007F97                     STR_4:
   947  007F97  53                 	db	83	;'S'
   948  007F98  70                 	db	112	;'p'
   949  007F99  65                 	db	101	;'e'
   950  007F9A  63                 	db	99	;'c'
   951  007F9B  69                 	db	105	;'i'
   952  007F9C  66                 	db	102	;'f'
   953  007F9D  79                 	db	121	;'y'
   954  007F9E  20                 	db	32
   955  007F9F  73                 	db	115	;'s'
   956  007FA0  65                 	db	101	;'e'
   957  007FA1  74                 	db	116	;'t'
   958  007FA2  20                 	db	32
   959  007FA3  70                 	db	112	;'p'
   960  007FA4  6F                 	db	111	;'o'
   961  007FA5  69                 	db	105	;'i'
   962  007FA6  6E                 	db	110	;'n'
   963  007FA7  74                 	db	116	;'t'
   964  007FA8  2E                 	db	46
   965  007FA9  20                 	db	32
   966  007FAA  0A                 	db	10
   967  007FAB  0D                 	db	13
   968  007FAC  00                 	db	0
   969  007FAD                     STR_20:
   970  007FAD  0A                 	db	10
   971  007FAE  0D                 	db	13
   972  007FAF  45                 	db	69	;'E'
   973  007FB0  72                 	db	114	;'r'
   974  007FB1  72                 	db	114	;'r'
   975  007FB2  6F                 	db	111	;'o'
   976  007FB3  72                 	db	114	;'r'
   977  007FB4  20                 	db	32
   978  007FB5  6C                 	db	108	;'l'
   979  007FB6  65                 	db	101	;'e'
   980  007FB7  76                 	db	118	;'v'
   981  007FB8  65                 	db	101	;'e'
   982  007FB9  6C                 	db	108	;'l'
   983  007FBA  20                 	db	32
   984  007FBB  69                 	db	105	;'i'
   985  007FBC  73                 	db	115	;'s'
   986  007FBD  20                 	db	32
   987  007FBE  66                 	db	102	;'f'
   988  007FBF  69                 	db	105	;'i'
   989  007FC0  6E                 	db	110	;'n'
   990  007FC1  65                 	db	101	;'e'
   991  007FC2  00                 	db	0
   992  007FC3                     STR_14:
   993  007FC3  0A                 	db	10
   994  007FC4  0D                 	db	13
   995  007FC5  45                 	db	69	;'E'
   996  007FC6  72                 	db	114	;'r'
   997  007FC7  72                 	db	114	;'r'
   998  007FC8  6F                 	db	111	;'o'
   999  007FC9  72                 	db	114	;'r'
  1000  007FCA  20                 	db	32
  1001  007FCB  69                 	db	105	;'i'
  1002  007FCC  73                 	db	115	;'s'
  1003  007FCD  3A                 	db	58	;':'
  1004  007FCE  20                 	db	32
  1005  007FCF  25                 	db	37
  1006  007FD0  30                 	db	48	;'0'
  1007  007FD1  2E                 	db	46
  1008  007FD2  31                 	db	49	;'1'
  1009  007FD3  66                 	db	102	;'f'
  1010  007FD4  25                 	db	37
  1011  007FD5  25                 	db	37
  1012  007FD6  20                 	db	32
  1013  007FD7  00                 	db	0
  1014  007FD8                     STR_12:
  1015  007FD8  0A                 	db	10
  1016  007FD9  0D                 	db	13
  1017  007FDA  45                 	db	69	;'E'
  1018  007FDB  6E                 	db	110	;'n'
  1019  007FDC  74                 	db	116	;'t'
  1020  007FDD  65                 	db	101	;'e'
  1021  007FDE  72                 	db	114	;'r'
  1022  007FDF  20                 	db	32
  1023  007FE0  61                 	db	97	;'a'
  1024  007FE1  20                 	db	32
  1025  007FE2  63                 	db	99	;'c'
  1026  007FE3  6F                 	db	111	;'o'
  1027  007FE4  6D                 	db	109	;'m'
  1028  007FE5  6D                 	db	109	;'m'
  1029  007FE6  61                 	db	97	;'a'
  1030  007FE7  6E                 	db	110	;'n'
  1031  007FE8  64                 	db	100	;'d'
  1032  007FE9  3A                 	db	58	;':'
  1033  007FEA  20                 	db	32
  1034  007FEB  00                 	db	0
  1035  007FEC                     STR_15:
  1036  007FEC  0A                 	db	10
  1037  007FED  0D                 	db	13
  1038  007FEE  4E                 	db	78	;'N'
  1039  007FEF  65                 	db	101	;'e'
  1040  007FF0  77                 	db	119	;'w'
  1041  007FF1  20                 	db	32
  1042  007FF2  73                 	db	115	;'s'
  1043  007FF3  70                 	db	112	;'p'
  1044  007FF4  65                 	db	101	;'e'
  1045  007FF5  65                 	db	101	;'e'
  1046  007FF6  64                 	db	100	;'d'
  1047  007FF7  20                 	db	32
  1048  007FF8  69                 	db	105	;'i'
  1049  007FF9  73                 	db	115	;'s'
  1050  007FFA  20                 	db	32
  1051  007FFB  25                 	db	37
  1052  007FFC  64                 	db	100	;'d'
  1053  007FFD  00                 	db	0
  1054  0000                     
  1055                           ; #config settings
  1056  007FFE  00                 	db	0	; dummy byte at the end
  1057  0000                     
  1058                           	psect	nvCOMRAM
  1059  000043                     __pnvCOMRAM:
  1060                           	opt stack 0
  1061  000043                     _EUSART2_TxDefaultInterruptHandler:
  1062                           	opt stack 0
  1063  000043                     	ds	2
  1064  000045                     _eusart1TxBufferRemaining:
  1065                           	opt stack 0
  1066  000045                     	ds	1
  1067  000046                     _eusart2TxBufferRemaining:
  1068                           	opt stack 0
  1069  000046                     	ds	1
  1070                           
  1071                           	psect	nvBANK0
  1072  0000F8                     __pnvBANK0:
  1073                           	opt stack 0
  1074  0000F8                     _EUSART2_RxDefaultInterruptHandler:
  1075                           	opt stack 0
  1076  0000F8                     	ds	2
  1077  0000                     _ANSELA	set	3896
  1078  0000                     _ANSELB	set	3897
  1079  0000                     _ANSELC	set	3898
  1080  0000                     _PORTA	set	3968
  1081  0000                     _PORTB	set	3969
  1082  0000                     _PORTBbits	set	3969
  1083  0000                     _RCREG1	set	4014
  1084  0000                     _RCSTA1bits	set	4011
  1085  0000                     _TXREG1	set	4013
  1086  0000                     _SPBRGH1	set	4016
  1087  0000                     _SPBRG1	set	4015
  1088  0000                     _TXSTA1	set	4012
  1089  0000                     _RCSTA1	set	4011
  1090  0000                     _BAUDCON1	set	4024
  1091  0000                     _RCREG2	set	3956
  1092  0000                     _RCSTA2bits	set	3953
  1093  0000                     _TXREG2	set	3955
  1094  0000                     _TXSTA2bits	set	3954
  1095  0000                     _SPBRGH2	set	3958
  1096  0000                     _SPBRG2	set	3957
  1097  0000                     _TXSTA2	set	3954
  1098  0000                     _RCSTA2	set	3953
  1099  0000                     _BAUDCON2	set	3952
  1100  0000                     _SSP1STATbits	set	4039
  1101  0000                     _SSP1MSK	set	4042
  1102  0000                     _SSP1BUF	set	4041
  1103  0000                     _SSP1CON2bits	set	4037
  1104  0000                     _SSP1ADD	set	4040
  1105  0000                     _SSP1CON2	set	4037
  1106  0000                     _SSP1CON1	set	4038
  1107  0000                     _SSP1STAT	set	4039
  1108  0000                     _SSP1CON1bits	set	4038
  1109  0000                     _PIR1bits	set	3998
  1110  0000                     _PIE1bits	set	3997
  1111  0000                     _PIR2bits	set	4001
  1112  0000                     _PIE2bits	set	4000
  1113  0000                     _PIR3bits	set	4004
  1114  0000                     _PIE3bits	set	4003
  1115  0000                     _INTCONbits	set	4082
  1116  0000                     _RCONbits	set	4048
  1117  0000                     _INTCON2bits	set	4081
  1118  0000                     _WPUB	set	3937
  1119  0000                     _TRISC	set	3988
  1120  0000                     _TRISB	set	3987
  1121  0000                     _TRISA	set	3986
  1122  0000                     _LATC	set	3979
  1123  0000                     _LATB	set	3978
  1124  0000                     _LATA	set	3977
  1125  0000                     _OSCTUNE	set	3995
  1126  0000                     _OSCCON2	set	4050
  1127  0000                     _OSCCON	set	4051
  1128                           
  1129                           	psect	cinit
  1130  002B0E                     __pcinit:
  1131                           	opt stack 0
  1132  002B0E                     start_initialization:
  1133                           	opt stack 0
  1134  002B0E                     __initialization:
  1135                           	opt stack 0
  1136                           
  1137                           ; Initialize objects allocated to BANK1 (82 bytes)
  1138                           ; load TBLPTR registers with __pidataBANK1
  1139  002B0E  0EBC               	movlw	low __pidataBANK1
  1140  002B10  6EF6               	movwf	tblptrl,c
  1141  002B12  0E2A               	movlw	high __pidataBANK1
  1142  002B14  6EF7               	movwf	tblptrh,c
  1143  002B16  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1144  002B18  6EF8               	movwf	tblptru,c
  1145  002B1A  EE01  F000         	lfsr	0,__pdataBANK1
  1146  002B1E  EE10 F052          	lfsr	1,82
  1147  002B22                     copy_data0:
  1148  002B22  0009               	tblrd		*+
  1149  002B24  CFF5 FFEE          	movff	tablat,postinc0
  1150  002B28  50E5               	movf	postdec1,w,c
  1151  002B2A  50E1               	movf	fsr1l,w,c
  1152  002B2C  E1FA               	bnz	copy_data0
  1153                           
  1154                           ; Clear objects allocated to BANK1 (16 bytes)
  1155  002B2E  EE01  F068         	lfsr	0,__pbssBANK1
  1156  002B32  0E10               	movlw	16
  1157  002B34                     clear_0:
  1158  002B34  6AEE               	clrf	postinc0,c
  1159  002B36  06E8               	decf	wreg,f,c
  1160  002B38  E1FD               	bnz	clear_0
  1161                           
  1162                           ; Clear objects allocated to BANK0 (68 bytes)
  1163  002B3A  EE00  F0B4         	lfsr	0,__pbssBANK0
  1164  002B3E  0E44               	movlw	68
  1165  002B40                     clear_1:
  1166  002B40  6AEE               	clrf	postinc0,c
  1167  002B42  06E8               	decf	wreg,f,c
  1168  002B44  E1FD               	bnz	clear_1
  1169                           
  1170                           ; Clear objects allocated to COMRAM (19 bytes)
  1171  002B46  EE00  F030         	lfsr	0,__pbssCOMRAM
  1172  002B4A  0E13               	movlw	19
  1173  002B4C                     clear_2:
  1174  002B4C  6AEE               	clrf	postinc0,c
  1175  002B4E  06E8               	decf	wreg,f,c
  1176  002B50  E1FD               	bnz	clear_2
  1177  002B52                     end_of_initialization:
  1178                           	opt stack 0
  1179  002B52                     __end_of__initialization:
  1180                           	opt stack 0
  1181  002B52  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1182  002B54  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1183  002B56  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1184  002B58  6EF8               	movwf	tblptru,c
  1185  002B5A  0100               	movlb	0
  1186  002B5C  EFD0  F005         	goto	_main	;jump to C main() function
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           fsr1l	equ	0xFE1
  1195                           
  1196                           	psect	bssCOMRAM
  1197  000030                     __pbssCOMRAM:
  1198                           	opt stack 0
  1199  000030                     _i2c1_driver_i2cISR:
  1200                           	opt stack 0
  1201  000030                     	ds	2
  1202  000032                     _i2c1_driver_busCollisionISR:
  1203                           	opt stack 0
  1204  000032                     	ds	2
  1205  000034                     sendDataToRemoteNode@status:
  1206                           	opt stack 0
  1207  000034                     	ds	1
  1208  000035                     _eusart1RxCount:
  1209                           	opt stack 0
  1210  000035                     	ds	1
  1211  000036                     _eusart1RxTail:
  1212                           	opt stack 0
  1213  000036                     	ds	1
  1214  000037                     _eusart1RxHead:
  1215                           	opt stack 0
  1216  000037                     	ds	1
  1217  000038                     _eusart1TxTail:
  1218                           	opt stack 0
  1219  000038                     	ds	1
  1220  000039                     _eusart1TxHead:
  1221                           	opt stack 0
  1222  000039                     	ds	1
  1223  00003A                     _receiveState:
  1224                           	opt stack 0
  1225  00003A                     	ds	1
  1226  00003B                     _eusart2RxCount:
  1227                           	opt stack 0
  1228  00003B                     	ds	1
  1229  00003C                     _eusart2RxTail:
  1230                           	opt stack 0
  1231  00003C                     	ds	1
  1232  00003D                     _eusart2RxHead:
  1233                           	opt stack 0
  1234  00003D                     	ds	1
  1235  00003E                     _eusart2TxTail:
  1236                           	opt stack 0
  1237  00003E                     	ds	1
  1238  00003F                     _eusart2TxHead:
  1239                           	opt stack 0
  1240  00003F                     	ds	1
  1241  000040                     _receiveStateFeedBack:
  1242                           	opt stack 0
  1243  000040                     	ds	1
  1244  000041                     sendDataToRemoteNode@buffer:
  1245                           	opt stack 0
  1246  000041                     	ds	2
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1l	equ	0xFE1
  1255                           
  1256                           	psect	bssBANK0
  1257  0000B4                     __pbssBANK0:
  1258                           	opt stack 0
  1259  0000B4                     _i2c_status:
  1260                           	opt stack 0
  1261  0000B4                     	ds	36
  1262  0000D8                     _eusart1RxBuffer:
  1263                           	opt stack 0
  1264  0000D8                     	ds	16
  1265  0000E8                     _eusart2RxBuffer:
  1266                           	opt stack 0
  1267  0000E8                     	ds	8
  1268  0000F0                     _eusart2TxBuffer:
  1269                           	opt stack 0
  1270  0000F0                     	ds	8
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1l	equ	0xFE1
  1279                           
  1280                           	psect	bssBANK1
  1281  000168                     __pbssBANK1:
  1282                           	opt stack 0
  1283  000168                     _eusart1TxBuffer:
  1284                           	opt stack 0
  1285  000168                     	ds	16
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           
  1295                           	psect	dataBANK1
  1296  000100                     __pdataBANK1:
  1297                           	opt stack 0
  1298  000100                     printString@F7188:
  1299                           	opt stack 0
  1300  000100                     	ds	50
  1301  000132                     _fsmStateTable:
  1302                           	opt stack 0
  1303  000132                     	ds	32
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           
  1313                           	psect	cstackBANK1
  1314  000152                     __pcstackBANK1:
  1315                           	opt stack 0
  1316  000152                     main@parameter:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x0
  1320  000152                     	ds	2
  1321  000154                     main@newBuffer:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x2
  1325  000154                     	ds	3
  1326  000157                     main@tempSpeed:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x5
  1330  000157                     	ds	3
  1331  00015A                     main@i:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x8
  1335  00015A                     	ds	2
  1336  00015C                     main@printError:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0xA
  1340  00015C                     	ds	1
  1341  00015D                     main@set:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0xB
  1345  00015D                     	ds	2
  1346  00015F                     main@i_1873:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0xD
  1350  00015F                     	ds	2
  1351  000161                     main@newSpeed:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0xF
  1355  000161                     	ds	2
  1356  000163                     main@speed:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x11
  1360  000163                     	ds	3
  1361  000166                     main@errorBits:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x14
  1365  000166                     	ds	2
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           postdec1	equ	0xFE5
  1373                           fsr1l	equ	0xFE1
  1374                           
  1375                           	psect	cstackBANK0
  1376  000060                     __pcstackBANK0:
  1377                           	opt stack 0
  1378  000060                     ??_atoi:
  1379  000060                     ?___ftmul:
  1380                           	opt stack 0
  1381  000060                     ___ftdiv@cntr:
  1382                           	opt stack 0
  1383  000060                     ___ftmul@f1:
  1384                           	opt stack 0
  1385  000060                     printString@welcome:
  1386                           	opt stack 0
  1387                           
  1388                           ; 50 bytes @ 0x0
  1389  000060                     	ds	1
  1390  000061                     ___ftdiv@f3:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x1
  1394  000061                     	ds	1
  1395  000062                     atoi@sign:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x2
  1399  000062                     	ds	1
  1400  000063                     atoi@a:
  1401                           	opt stack 0
  1402  000063                     ___ftmul@f2:
  1403                           	opt stack 0
  1404                           
  1405                           ; 3 bytes @ 0x3
  1406  000063                     	ds	1
  1407  000064                     ___ftdiv@exp:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x4
  1411  000064                     	ds	1
  1412  000065                     ___ftdiv@sign:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x5
  1416  000065                     	ds	1
  1417  000066                     ___ftmul@exp:
  1418                           	opt stack 0
  1419  000066                     ___ftge@ff1:
  1420                           	opt stack 0
  1421                           
  1422                           ; 3 bytes @ 0x6
  1423  000066                     	ds	1
  1424  000067                     ___ftmul@f3_as_product:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x7
  1428  000067                     	ds	2
  1429  000069                     ___ftge@ff2:
  1430                           	opt stack 0
  1431                           
  1432                           ; 3 bytes @ 0x9
  1433  000069                     	ds	1
  1434  00006A                     ___ftmul@cntr:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0xA
  1438  00006A                     	ds	1
  1439  00006B                     ___ftmul@sign:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0xB
  1443  00006B                     	ds	1
  1444  00006C                     ??___ftge:
  1445  00006C                     ?_fround:
  1446                           	opt stack 0
  1447  00006C                     ?_scale:
  1448                           	opt stack 0
  1449                           
  1450                           ; 3 bytes @ 0xC
  1451  00006C                     	ds	3
  1452  00006F                     _fround$2859:
  1453                           	opt stack 0
  1454  00006F                     _scale$2860:
  1455                           	opt stack 0
  1456                           
  1457                           ; 3 bytes @ 0xF
  1458  00006F                     	ds	3
  1459  000072                     scale@scl:
  1460                           	opt stack 0
  1461  000072                     _fround$2858:
  1462                           	opt stack 0
  1463                           
  1464                           ; 3 bytes @ 0x12
  1465  000072                     	ds	1
  1466  000073                     ?___fttol:
  1467                           	opt stack 0
  1468  000073                     ___fttol@f1:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x13
  1472  000073                     	ds	2
  1473  000075                     fround@prec:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x15
  1477  000075                     	ds	1
  1478  000076                     ?___ftadd:
  1479                           	opt stack 0
  1480  000076                     ___ftadd@f1:
  1481                           	opt stack 0
  1482                           
  1483                           ; 3 bytes @ 0x16
  1484  000076                     	ds	1
  1485  000077                     ??___fttol:
  1486                           
  1487                           ; 1 bytes @ 0x17
  1488  000077                     	ds	2
  1489  000079                     ___ftadd@f2:
  1490                           	opt stack 0
  1491                           
  1492                           ; 3 bytes @ 0x19
  1493  000079                     	ds	3
  1494  00007C                     ??___ftadd:
  1495  00007C                     ___fttol@sign1:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x1C
  1499  00007C                     	ds	1
  1500  00007D                     ___fttol@lval:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x1D
  1504  00007D                     	ds	2
  1505  00007F                     ___ftadd@sign:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x1F
  1509  00007F                     	ds	1
  1510  000080                     ___ftadd@exp2:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x20
  1514  000080                     	ds	1
  1515  000081                     ___ftadd@exp1:
  1516                           	opt stack 0
  1517  000081                     ___fttol@exp1:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x21
  1521  000081                     	ds	1
  1522  000082                     ?___ftsub:
  1523                           	opt stack 0
  1524  000082                     ___ftsub@f1:
  1525                           	opt stack 0
  1526                           
  1527                           ; 3 bytes @ 0x22
  1528  000082                     	ds	3
  1529  000085                     ___ftsub@f2:
  1530                           	opt stack 0
  1531                           
  1532                           ; 3 bytes @ 0x25
  1533  000085                     	ds	3
  1534  000088                     ?_printf:
  1535                           	opt stack 0
  1536  000088                     printf@f:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x28
  1540  000088                     	ds	5
  1541  00008D                     ??_printf:
  1542                           
  1543                           ; 1 bytes @ 0x2D
  1544  00008D                     	ds	5
  1545  000092                     printString@i:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x32
  1549  000092                     	ds	1
  1550  000093                     _printf$2861:
  1551                           	opt stack 0
  1552                           
  1553                           ; 3 bytes @ 0x33
  1554  000093                     	ds	3
  1555  000096                     printf@cp:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x36
  1559  000096                     	ds	2
  1560  000098                     printf@ap:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x38
  1564  000098                     	ds	2
  1565  00009A                     printf@len:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x3A
  1569  00009A                     	ds	2
  1570  00009C                     printf@tmpval:
  1571                           	opt stack 0
  1572                           
  1573                           ; 4 bytes @ 0x3C
  1574  00009C                     	ds	4
  1575  0000A0                     printf@val:
  1576                           	opt stack 0
  1577                           
  1578                           ; 4 bytes @ 0x40
  1579  0000A0                     	ds	4
  1580  0000A4                     printf@exp:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x44
  1584  0000A4                     	ds	2
  1585  0000A6                     printf@flag:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x46
  1589  0000A6                     	ds	2
  1590  0000A8                     printf@fval:
  1591                           	opt stack 0
  1592                           
  1593                           ; 3 bytes @ 0x48
  1594  0000A8                     	ds	3
  1595  0000AB                     printf@width:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x4B
  1599  0000AB                     	ds	2
  1600  0000AD                     printf@prec:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x4D
  1604  0000AD                     	ds	2
  1605  0000AF                     printf@c:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x4F
  1609  0000AF                     	ds	1
  1610  0000B0                     ??_main:
  1611                           
  1612                           ; 1 bytes @ 0x50
  1613  0000B0                     	ds	4
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           postdec1	equ	0xFE5
  1621                           fsr1l	equ	0xFE1
  1622                           
  1623                           	psect	cstackCOMRAM
  1624  000001                     __pcstackCOMRAM:
  1625                           	opt stack 0
  1626  000001                     ??i2_i2c1_driver_isNACK:
  1627  000001                     sram_write@data:
  1628                           	opt stack 0
  1629  000001                     i2i2c1_driver_TXData@d:
  1630                           	opt stack 0
  1631  000001                     i2_do_I2C_TX$362:
  1632                           	opt stack 0
  1633  000001                     i2returnReset@p:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x0
  1637  000001                     	ds	1
  1638  000002                     ??_sram_write:
  1639  000002                     EUSART2_Receive_ISR@temp:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0x1
  1643  000002                     	ds	1
  1644  000003                     EUSART2_Receive_ISR@temp_1598:
  1645                           	opt stack 0
  1646  000003                     sram_write@address:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x2
  1650  000003                     	ds	1
  1651  000004                     EUSART1_Receive_ISR@temp:
  1652                           	opt stack 0
  1653                           
  1654                           ; 1 bytes @ 0x3
  1655  000004                     	ds	1
  1656  000005                     EUSART1_Receive_ISR@temp_1741:
  1657                           	opt stack 0
  1658                           
  1659                           ; 1 bytes @ 0x4
  1660  000005                     	ds	1
  1661  000006                     EUSART1_Receive_ISR@receivedChar:
  1662                           	opt stack 0
  1663                           
  1664                           ; 1 bytes @ 0x5
  1665  000006                     	ds	1
  1666  000007                     ??_INTERRUPT_InterruptManager:
  1667                           
  1668                           ; 1 bytes @ 0x6
  1669  000007                     	ds	18
  1670  000019                     ??_mssp1_IRQisEnabled:
  1671  000019                     ??_i2c1_driver_isNACK:
  1672  000019                     ??_sram_read:
  1673  000019                     ??_isdigit:
  1674  000019                     ?___awmod:
  1675                           	opt stack 0
  1676  000019                     ?___ftpack:
  1677                           	opt stack 0
  1678  000019                     ?___ftneg:
  1679                           	opt stack 0
  1680  000019                     ?__tdiv_to_l_:
  1681                           	opt stack 0
  1682  000019                     ?__div_to_l_:
  1683                           	opt stack 0
  1684  000019                     ?___lldiv:
  1685                           	opt stack 0
  1686  000019                     i2c1_driver_TXData@d:
  1687                           	opt stack 0
  1688  000019                     EUSART1_Write@txData:
  1689                           	opt stack 0
  1690  000019                     i2c_setBuffer@buffer:
  1691                           	opt stack 0
  1692  000019                     returnReset@p:
  1693                           	opt stack 0
  1694  000019                     mssp1_waitForEvent@timeout:
  1695                           	opt stack 0
  1696  000019                     i2c1_driver_setBusCollisionISR@f:
  1697                           	opt stack 0
  1698  000019                     i2c1_driver_setI2cISR@f:
  1699                           	opt stack 0
  1700  000019                     EUSART2_SetTxInterruptHandler@handler:
  1701                           	opt stack 0
  1702  000019                     EUSART2_SetRxInterruptHandler@handler:
  1703                           	opt stack 0
  1704  000019                     ___awmod@dividend:
  1705                           	opt stack 0
  1706  000019                     __div_to_l_@f1:
  1707                           	opt stack 0
  1708  000019                     ___ftpack@arg:
  1709                           	opt stack 0
  1710  000019                     __tdiv_to_l_@f1:
  1711                           	opt stack 0
  1712  000019                     ___ftneg@f1:
  1713                           	opt stack 0
  1714  000019                     ___lldiv@dividend:
  1715                           	opt stack 0
  1716                           
  1717                           ; 4 bytes @ 0x18
  1718  000019                     	ds	1
  1719  00001A                     ??_printString:
  1720  00001A                     putch@txData:
  1721                           	opt stack 0
  1722  00001A                     sram_read@address:
  1723                           	opt stack 0
  1724  00001A                     _isdigit$2358:
  1725                           	opt stack 0
  1726  00001A                     _do_I2C_TX$362:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x19
  1730  00001A                     	ds	1
  1731  00001B                     i2c_open@ret:
  1732                           	opt stack 0
  1733  00001B                     sram_read@data:
  1734                           	opt stack 0
  1735  00001B                     isdigit@c:
  1736                           	opt stack 0
  1737  00001B                     i2c_setBuffer@bufferSize:
  1738                           	opt stack 0
  1739  00001B                     ___awmod@divisor:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x1A
  1743  00001B                     	ds	1
  1744  00001C                     i2c_open@address:
  1745                           	opt stack 0
  1746  00001C                     i2c_masterOperation@read:
  1747                           	opt stack 0
  1748  00001C                     ___ftpack@exp:
  1749                           	opt stack 0
  1750  00001C                     __div_to_l_@f2:
  1751                           	opt stack 0
  1752  00001C                     __tdiv_to_l_@f2:
  1753                           	opt stack 0
  1754                           
  1755                           ; 3 bytes @ 0x1B
  1756  00001C                     	ds	1
  1757  00001D                     i2c_masterOperation@ret:
  1758                           	opt stack 0
  1759  00001D                     ___awmod@counter:
  1760                           	opt stack 0
  1761  00001D                     ___ftpack@sign:
  1762                           	opt stack 0
  1763  00001D                     ___lldiv@divisor:
  1764                           	opt stack 0
  1765                           
  1766                           ; 4 bytes @ 0x1C
  1767  00001D                     	ds	1
  1768  00001E                     ??___ftpack:
  1769  00001E                     ___awmod@sign:
  1770                           	opt stack 0
  1771  00001E                     sendDataToRemoteNode@data:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x1D
  1775  00001E                     	ds	1
  1776  00001F                     ??__tdiv_to_l_:
  1777  00001F                     ?___awdiv:
  1778                           	opt stack 0
  1779  00001F                     ___awdiv@dividend:
  1780                           	opt stack 0
  1781  00001F                     __div_to_l_@quot:
  1782                           	opt stack 0
  1783                           
  1784                           ; 4 bytes @ 0x1E
  1785  00001F                     	ds	1
  1786  000020                     sendDataToRemoteNode@commandPWM:
  1787                           	opt stack 0
  1788                           
  1789                           ; 1 bytes @ 0x1F
  1790  000020                     	ds	1
  1791  000021                     ?___awtoft:
  1792                           	opt stack 0
  1793  000021                     ?___lltoft:
  1794                           	opt stack 0
  1795  000021                     ___awdiv@divisor:
  1796                           	opt stack 0
  1797  000021                     ___awtoft@c:
  1798                           	opt stack 0
  1799  000021                     ___lldiv@quotient:
  1800                           	opt stack 0
  1801  000021                     ___lltoft@c:
  1802                           	opt stack 0
  1803                           
  1804                           ; 4 bytes @ 0x20
  1805  000021                     	ds	1
  1806  000022                     __tdiv_to_l_@quot:
  1807                           	opt stack 0
  1808                           
  1809                           ; 4 bytes @ 0x21
  1810  000022                     	ds	1
  1811  000023                     ___awdiv@counter:
  1812                           	opt stack 0
  1813  000023                     __div_to_l_@cntr:
  1814                           	opt stack 0
  1815                           
  1816                           ; 1 bytes @ 0x22
  1817  000023                     	ds	1
  1818  000024                     ___awdiv@sign:
  1819                           	opt stack 0
  1820  000024                     ___awtoft@sign:
  1821                           	opt stack 0
  1822  000024                     __div_to_l_@exp1:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0x23
  1826  000024                     	ds	1
  1827  000025                     ??___lltoft:
  1828  000025                     ?___ftdiv:
  1829                           	opt stack 0
  1830  000025                     ___lldiv@counter:
  1831                           	opt stack 0
  1832  000025                     ___awdiv@quotient:
  1833                           	opt stack 0
  1834  000025                     ___ftdiv@f1:
  1835                           	opt stack 0
  1836                           
  1837                           ; 3 bytes @ 0x24
  1838  000025                     	ds	1
  1839  000026                     ?___llmod:
  1840                           	opt stack 0
  1841  000026                     __tdiv_to_l_@cntr:
  1842                           	opt stack 0
  1843  000026                     ___llmod@dividend:
  1844                           	opt stack 0
  1845                           
  1846                           ; 4 bytes @ 0x25
  1847  000026                     	ds	1
  1848  000027                     ?___wmul:
  1849                           	opt stack 0
  1850  000027                     __tdiv_to_l_@exp1:
  1851                           	opt stack 0
  1852  000027                     ___wmul@multiplier:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x26
  1856  000027                     	ds	1
  1857  000028                     ___ftdiv@f2:
  1858                           	opt stack 0
  1859                           
  1860                           ; 3 bytes @ 0x27
  1861  000028                     	ds	1
  1862  000029                     ___lltoft@exp:
  1863                           	opt stack 0
  1864  000029                     ___wmul@multiplicand:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x28
  1868  000029                     	ds	1
  1869  00002A                     ___llmod@divisor:
  1870                           	opt stack 0
  1871                           
  1872                           ; 4 bytes @ 0x29
  1873  00002A                     	ds	1
  1874  00002B                     ??___ftdiv:
  1875  00002B                     ___wmul@product:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x2A
  1879  00002B                     	ds	2
  1880  00002D                     ??___ftmul:
  1881  00002D                     ?_atoi:
  1882                           	opt stack 0
  1883  00002D                     atoi@s:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x2C
  1887  00002D                     	ds	1
  1888  00002E                     ___llmod@counter:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x2D
  1892  00002E                     	ds	2
  1893  000030                     tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           
  1902                           ; 1 bytes @ 0x2F
  1903 ;;
  1904 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1905 ;;
  1906 ;; *************** function _main *****************
  1907 ;; Defined at:
  1908 ;;		line 95 in file "main.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  parameter       2    0[BANK1 ] unsigned int 
  1913 ;;  newBuffer       3    2[BANK1 ] unsigned char [3]
  1914 ;;  i               2   13[BANK1 ] int 
  1915 ;;  set             2   11[BANK1 ] int 
  1916 ;;  i               2    8[BANK1 ] int 
  1917 ;;  errorBits       2   20[BANK1 ] int 
  1918 ;;  newSpeed        2   15[BANK1 ] int 
  1919 ;;  speed           3   17[BANK1 ] int 
  1920 ;;  tempSpeed       3    5[BANK1 ] int 
  1921 ;;  printError      1   10[BANK1 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1931 ;;      Params:         0       0       0       0       0       0       0
  1932 ;;      Locals:         0       0      22       0       0       0       0
  1933 ;;      Temps:          0       4       0       0       0       0       0
  1934 ;;      Totals:         0       4      22       0       0       0       0
  1935 ;;Total ram usage:       26 bytes
  1936 ;; Hardware stack levels required when called:   13
  1937 ;; This function calls:
  1938 ;;		_EUSART1_Initialize
  1939 ;;		_SRAM_CONTROL_INITIALIZE
  1940 ;;		_SYSTEM_Initialize
  1941 ;;		___awtoft
  1942 ;;		___ftadd
  1943 ;;		___ftdiv
  1944 ;;		___ftge
  1945 ;;		___ftmul
  1946 ;;		___ftsub
  1947 ;;		___fttol
  1948 ;;		_atoi
  1949 ;;		_printString
  1950 ;;		_printf
  1951 ;;		_sendDataToRemoteNode
  1952 ;;		_sram_read
  1953 ;; This function is called by:
  1954 ;;		Startup code after reset
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text0
  1959  000BA0                     __ptext0:
  1960                           	opt stack 0
  1961  000BA0                     _main:
  1962                           	opt stack 18
  1963                           
  1964                           ;main.c: 97: double speed = 0;
  1965                           
  1966                           ;incstack = 0
  1967  000BA0  0E00               	movlw	0
  1968  000BA2  0101               	movlb	1	; () banked
  1969  000BA4  6F63               	movwf	main@speed& (0+255),b
  1970  000BA6  0E00               	movlw	0
  1971  000BA8  6F64               	movwf	(main@speed+1)& (0+255),b
  1972  000BAA  0E00               	movlw	0
  1973  000BAC  6F65               	movwf	(main@speed+2)& (0+255),b
  1974                           
  1975                           ;main.c: 98: bool printError = 0;
  1976  000BAE  0E00               	movlw	0
  1977  000BB0  6F5C               	movwf	main@printError& (0+255),b
  1978                           
  1979                           ;main.c: 99: double tempSpeed = 0;
  1980  000BB2  0E00               	movlw	0
  1981  000BB4  6F57               	movwf	main@tempSpeed& (0+255),b
  1982  000BB6  0E00               	movlw	0
  1983  000BB8  6F58               	movwf	(main@tempSpeed+1)& (0+255),b
  1984  000BBA  0E00               	movlw	0
  1985  000BBC  6F59               	movwf	(main@tempSpeed+2)& (0+255),b
  1986                           
  1987                           ; BSR set to: 1
  1988                           ;main.c: 102: SYSTEM_Initialize();
  1989  000BBE  EC15  F018         	call	_SYSTEM_Initialize	;wreg free
  1990                           
  1991                           ;main.c: 103: EUSART1_Initialize();
  1992  000BC2  ECEF  F016         	call	_EUSART1_Initialize	;wreg free
  1993                           
  1994                           ;main.c: 104: SRAM_CONTROL_INITIALIZE();
  1995  000BC6  EC20  F018         	call	_SRAM_CONTROL_INITIALIZE	;wreg free
  1996                           
  1997                           ;main.c: 107: (INTCONbits.GIE = 1);
  1998  000BCA  8EF2               	bsf	intcon,7,c	;volatile
  1999                           
  2000                           ;main.c: 110: (INTCONbits.PEIE = 1);
  2001  000BCC  8CF2               	bsf	intcon,6,c	;volatile
  2002                           
  2003                           ;main.c: 112: printString();
  2004  000BCE  EC77  F014         	call	_printString	;wreg free
  2005                           
  2006                           ;main.c: 113: printf("\n\rEnter a command (I: increment, D: decrement, S: set point, T: 
      +                          status, H: help, P: error status) : ");
  2007  000BD2  0E6B               	movlw	low STR_1
  2008  000BD4  0100               	movlb	0	; () banked
  2009  000BD6  6F88               	movwf	printf@f& (0+255),b
  2010  000BD8  0E7D               	movlw	high STR_1
  2011  000BDA  6F89               	movwf	(printf@f+1)& (0+255),b
  2012  000BDC  EC8F  F000         	call	_printf	;wreg free
  2013                           
  2014                           ;main.c: 116: {
  2015                           ;main.c: 117: switch(receiveState) {
  2016                           
  2017                           ;main.c: 115: while (1)
  2018  000BE0  D19B               	goto	l868
  2019  000BE2                     
  2020                           ;main.c: 119: for(int i = 0; i < eusart1RxHead; i++) {
  2021  000BE2  0E00               	movlw	0
  2022  000BE4  0101               	movlb	1	; () banked
  2023  000BE6  6F5B               	movwf	(main@i+1)& (0+255),b
  2024  000BE8  0E00               	movlw	0
  2025  000BEA  6F5A               	movwf	main@i& (0+255),b
  2026  000BEC  D00E               	goto	l870
  2027  000BEE                     
  2028                           ;main.c: 120: eusart1RxBuffer[i] = sram_read(i);
  2029                           
  2030                           ; BSR set to: 1
  2031  000BEE  0ED8               	movlw	low _eusart1RxBuffer
  2032  000BF0  0101               	movlb	1	; () banked
  2033  000BF2  255A               	addwf	main@i& (0+255),w,b
  2034  000BF4  6ED9               	movwf	fsr2l,c
  2035  000BF6  0E00               	movlw	high _eusart1RxBuffer
  2036  000BF8  215B               	addwfc	(main@i+1)& (0+255),w,b
  2037  000BFA  6EDA               	movwf	fsr2h,c
  2038  000BFC  515A               	movf	main@i& (0+255),w,b
  2039  000BFE  EC7C  F017         	call	_sram_read
  2040  000C02  6EDF               	movwf	indf2,c
  2041  000C04  0101               	movlb	1	; () banked
  2042  000C06  4B5A               	infsnz	main@i& (0+255),f,b
  2043  000C08  2B5B               	incf	(main@i+1)& (0+255),f,b
  2044  000C0A                     l870:
  2045                           
  2046                           ; BSR set to: 1
  2047                           
  2048                           ; BSR set to: 1
  2049  000C0A  5037               	movf	_eusart1RxHead,w,c	;volatile
  2050  000C0C  0100               	movlb	0	; () banked
  2051  000C0E  6FB0               	movwf	??_main& (0+255),b
  2052  000C10  6BB1               	clrf	(??_main+1)& (0+255),b
  2053  000C12  51B0               	movf	??_main& (0+255),w,b
  2054  000C14  0101               	movlb	1	; () banked
  2055  000C16  5D5A               	subwf	main@i& (0+255),w,b
  2056  000C18  515B               	movf	(main@i+1)& (0+255),w,b
  2057  000C1A  0A80               	xorlw	128
  2058  000C1C  0100               	movlb	0	; () banked
  2059  000C1E  6FB2               	movwf	(??_main+2)& (0+255),b
  2060  000C20  51B1               	movf	(??_main+1)& (0+255),w,b
  2061  000C22  0A80               	xorlw	128
  2062  000C24  59B2               	subwfb	(??_main+2)& (0+255),w,b
  2063  000C26  B0D8               	btfsc	status,0,c
  2064  000C28  D14D               	goto	l873
  2065  000C2A  D7E1               	goto	l871
  2066  000C2C                     
  2067                           ; BSR set to: 0
  2068                           
  2069                           ; BSR set to: 0
  2070  000C2C  0E31               	movlw	low STR_2
  2071  000C2E  6F88               	movwf	printf@f& (0+255),b
  2072  000C30  0E7F               	movlw	high STR_2
  2073  000C32  6F89               	movwf	(printf@f+1)& (0+255),b
  2074  000C34  EC8F  F000         	call	_printf	;wreg free
  2075                           
  2076                           ;main.c: 124: sendDataToRemoteNode(INCREMENT, 0);
  2077  000C38  0E00               	movlw	0
  2078  000C3A  6E1F               	movwf	sendDataToRemoteNode@data+1,c
  2079  000C3C  0E00               	movlw	0
  2080  000C3E  6E1E               	movwf	sendDataToRemoteNode@data,c
  2081  000C40  0E01               	movlw	1
  2082  000C42  ECD6  F014         	call	_sendDataToRemoteNode
  2083                           
  2084                           ;main.c: 125: speed += 0.5;
  2085  000C46  C163  F076         	movff	main@speed,___ftadd@f1
  2086  000C4A  C164  F077         	movff	main@speed+1,___ftadd@f1+1
  2087  000C4E  C165  F078         	movff	main@speed+2,___ftadd@f1+2
  2088  000C52  0E00               	movlw	0
  2089  000C54  0100               	movlb	0	; () banked
  2090  000C56  6F79               	movwf	___ftadd@f2& (0+255),b
  2091  000C58  0E00               	movlw	0
  2092  000C5A  6F7A               	movwf	(___ftadd@f2+1)& (0+255),b
  2093  000C5C  0E3F               	movlw	63
  2094  000C5E  6F7B               	movwf	(___ftadd@f2+2)& (0+255),b
  2095  000C60  EC85  F00D         	call	___ftadd	;wreg free
  2096  000C64  C076  F163         	movff	?___ftadd,main@speed
  2097  000C68  C077  F164         	movff	?___ftadd+1,main@speed+1
  2098  000C6C  C078  F165         	movff	?___ftadd+2,main@speed+2
  2099                           
  2100                           ;main.c: 126: if (speed > 100) {
  2101  000C70  0E00               	movlw	0
  2102  000C72  0100               	movlb	0	; () banked
  2103  000C74  6F66               	movwf	___ftge@ff1& (0+255),b
  2104  000C76  0EC8               	movlw	200
  2105  000C78  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  2106  000C7A  0E42               	movlw	66
  2107  000C7C  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  2108  000C7E  C163  F069         	movff	main@speed,___ftge@ff2
  2109  000C82  C164  F06A         	movff	main@speed+1,___ftge@ff2+1
  2110  000C86  C165  F06B         	movff	main@speed+2,___ftge@ff2+2
  2111  000C8A  EC4D  F012         	call	___ftge	;wreg free
  2112  000C8E  0100               	movlb	0	; () banked
  2113  000C90  B0D8               	btfsc	status,0,c
  2114  000C92  D0D0               	goto	l7712
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 127: speed = 100;
  2118  000C94  0E00               	movlw	0
  2119  000C96  0101               	movlb	1	; () banked
  2120  000C98  6F63               	movwf	main@speed& (0+255),b
  2121  000C9A  0EC8               	movlw	200
  2122  000C9C  6F64               	movwf	(main@speed+1)& (0+255),b
  2123  000C9E  0E42               	movlw	66
  2124  000CA0  6F65               	movwf	(main@speed+2)& (0+255),b
  2125                           
  2126                           ; BSR set to: 1
  2127  000CA2  D0C8               	goto	l7712
  2128  000CA4  0EF8               	movlw	low STR_3
  2129  000CA6  0100               	movlb	0	; () banked
  2130  000CA8  6F88               	movwf	printf@f& (0+255),b
  2131  000CAA  0E7E               	movlw	high STR_3
  2132  000CAC  6F89               	movwf	(printf@f+1)& (0+255),b
  2133  000CAE  EC8F  F000         	call	_printf	;wreg free
  2134                           
  2135                           ;main.c: 133: sendDataToRemoteNode(DECREMENT, 0);
  2136  000CB2  0E00               	movlw	0
  2137  000CB4  6E1F               	movwf	sendDataToRemoteNode@data+1,c
  2138  000CB6  0E00               	movlw	0
  2139  000CB8  6E1E               	movwf	sendDataToRemoteNode@data,c
  2140  000CBA  0E02               	movlw	2
  2141  000CBC  ECD6  F014         	call	_sendDataToRemoteNode
  2142                           
  2143                           ;main.c: 134: speed -= 0.5;
  2144  000CC0  C163  F082         	movff	main@speed,___ftsub@f1
  2145  000CC4  C164  F083         	movff	main@speed+1,___ftsub@f1+1
  2146  000CC8  C165  F084         	movff	main@speed+2,___ftsub@f1+2
  2147  000CCC  0E00               	movlw	0
  2148  000CCE  0100               	movlb	0	; () banked
  2149  000CD0  6F85               	movwf	___ftsub@f2& (0+255),b
  2150  000CD2  0E00               	movlw	0
  2151  000CD4  6F86               	movwf	(___ftsub@f2+1)& (0+255),b
  2152  000CD6  0E3F               	movlw	63
  2153  000CD8  6F87               	movwf	(___ftsub@f2+2)& (0+255),b
  2154  000CDA  EC95  F016         	call	___ftsub	;wreg free
  2155  000CDE  C082  F163         	movff	?___ftsub,main@speed
  2156  000CE2  C083  F164         	movff	?___ftsub+1,main@speed+1
  2157  000CE6  C084  F165         	movff	?___ftsub+2,main@speed+2
  2158                           
  2159                           ;main.c: 135: if (speed < 0) {
  2160  000CEA  0101               	movlb	1	; () banked
  2161  000CEC  AF65               	btfss	(main@speed+2)& (0+255),7,b
  2162  000CEE  D0A2               	goto	l7712
  2163                           
  2164                           ; BSR set to: 1
  2165                           ;main.c: 136: speed = 0;
  2166  000CF0  0E00               	movlw	0
  2167  000CF2  6F63               	movwf	main@speed& (0+255),b
  2168  000CF4  0E00               	movlw	0
  2169  000CF6  6F64               	movwf	(main@speed+1)& (0+255),b
  2170  000CF8  0E00               	movlw	0
  2171  000CFA  D7D2               	goto	L2
  2172  000CFC                     
  2173                           ; BSR set to: 1
  2174  000CFC  0E97               	movlw	low STR_4
  2175  000CFE  0100               	movlb	0	; () banked
  2176  000D00  6F88               	movwf	printf@f& (0+255),b
  2177  000D02  0E7F               	movlw	high STR_4
  2178  000D04  6F89               	movwf	(printf@f+1)& (0+255),b
  2179  000D06  EC8F  F000         	call	_printf	;wreg free
  2180                           
  2181                           ;main.c: 142: char newBuffer[3];
  2182                           ;main.c: 143: int i = 1;
  2183  000D0A  0E00               	movlw	0
  2184  000D0C  0101               	movlb	1	; () banked
  2185  000D0E  6F60               	movwf	(main@i_1873+1)& (0+255),b
  2186  000D10  0E01               	movlw	1
  2187  000D12  6F5F               	movwf	main@i_1873& (0+255),b
  2188                           
  2189                           ;main.c: 144: while(eusart1RxBuffer[i] != 13) {
  2190  000D14  D01E               	goto	l880
  2191  000D16                     
  2192                           ; BSR set to: 1
  2193                           ;main.c: 145: newBuffer[i - 1] = eusart1RxBuffer[i];
  2194                           
  2195                           ; BSR set to: 1
  2196  000D16  0ED8               	movlw	low _eusart1RxBuffer
  2197  000D18  255F               	addwf	main@i_1873& (0+255),w,b
  2198  000D1A  6ED9               	movwf	fsr2l,c
  2199  000D1C  0E00               	movlw	high _eusart1RxBuffer
  2200  000D1E  2160               	addwfc	(main@i_1873+1)& (0+255),w,b
  2201  000D20  6EDA               	movwf	fsr2h,c
  2202  000D22  0EFF               	movlw	255
  2203  000D24  0100               	movlb	0	; () banked
  2204  000D26  6FB0               	movwf	??_main& (0+255),b
  2205  000D28  0EFF               	movlw	255
  2206  000D2A  6FB1               	movwf	(??_main+1)& (0+255),b
  2207  000D2C  C15F  F0B2         	movff	main@i_1873,??_main+2
  2208  000D30  C160  F0B3         	movff	main@i_1873+1,??_main+3
  2209  000D34  51B0               	movf	??_main& (0+255),w,b
  2210  000D36  27B2               	addwf	(??_main+2)& (0+255),f,b
  2211  000D38  51B1               	movf	(??_main+1)& (0+255),w,b
  2212  000D3A  23B3               	addwfc	(??_main+3)& (0+255),f,b
  2213  000D3C  0E54               	movlw	low main@newBuffer
  2214  000D3E  25B2               	addwf	(??_main+2)& (0+255),w,b
  2215  000D40  6EE1               	movwf	fsr1l,c
  2216  000D42  0E01               	movlw	high main@newBuffer
  2217  000D44  21B3               	addwfc	(??_main+3)& (0+255),w,b
  2218  000D46  6EE2               	movwf	fsr1h,c
  2219  000D48  CFDF FFE7          	movff	indf2,indf1
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;main.c: 146: i++;
  2223  000D4C  0101               	movlb	1	; () banked
  2224  000D4E  4B5F               	infsnz	main@i_1873& (0+255),f,b
  2225  000D50  2B60               	incf	(main@i_1873+1)& (0+255),f,b
  2226  000D52                     l880:
  2227                           
  2228                           ; BSR set to: 1
  2229                           
  2230                           ; BSR set to: 1
  2231  000D52  0ED8               	movlw	low _eusart1RxBuffer
  2232  000D54  255F               	addwf	main@i_1873& (0+255),w,b
  2233  000D56  6ED9               	movwf	fsr2l,c
  2234  000D58  0E00               	movlw	high _eusart1RxBuffer
  2235  000D5A  2160               	addwfc	(main@i_1873+1)& (0+255),w,b
  2236  000D5C  6EDA               	movwf	fsr2h,c
  2237  000D5E  0E0D               	movlw	13
  2238  000D60  18DE               	xorwf	postinc2,w,c
  2239  000D62  A4D8               	btfss	status,2,c
  2240  000D64  D7D8               	goto	l881
  2241                           
  2242                           ; BSR set to: 1
  2243                           ;main.c: 147: }
  2244                           ;main.c: 148: newBuffer[i -1] = '\0';
  2245                           
  2246                           ; BSR set to: 1
  2247  000D66  0EFF               	movlw	255
  2248  000D68  0100               	movlb	0	; () banked
  2249  000D6A  6FB0               	movwf	??_main& (0+255),b
  2250  000D6C  0EFF               	movlw	255
  2251  000D6E  6FB1               	movwf	(??_main+1)& (0+255),b
  2252  000D70  C15F  F0B2         	movff	main@i_1873,??_main+2
  2253  000D74  C160  F0B3         	movff	main@i_1873+1,??_main+3
  2254  000D78  51B0               	movf	??_main& (0+255),w,b
  2255  000D7A  27B2               	addwf	(??_main+2)& (0+255),f,b
  2256  000D7C  51B1               	movf	(??_main+1)& (0+255),w,b
  2257  000D7E  23B3               	addwfc	(??_main+3)& (0+255),f,b
  2258  000D80  0E54               	movlw	low main@newBuffer
  2259  000D82  25B2               	addwf	(??_main+2)& (0+255),w,b
  2260  000D84  6ED9               	movwf	fsr2l,c
  2261  000D86  0E01               	movlw	high main@newBuffer
  2262  000D88  21B3               	addwfc	(??_main+3)& (0+255),w,b
  2263  000D8A  6EDA               	movwf	fsr2h,c
  2264  000D8C  0E00               	movlw	0
  2265  000D8E  6EDF               	movwf	indf2,c
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;main.c: 149: int set;
  2269                           ;main.c: 150: set = atoi(newBuffer);
  2270  000D90  0E54               	movlw	low main@newBuffer
  2271  000D92  6E2D               	movwf	atoi@s,c
  2272  000D94  0E01               	movlw	high main@newBuffer
  2273  000D96  6E2E               	movwf	atoi@s+1,c
  2274  000D98  ECF4  F010         	call	_atoi	;wreg free
  2275  000D9C  C02D  F15D         	movff	?_atoi,main@set
  2276  000DA0  C02E  F15E         	movff	?_atoi+1,main@set+1
  2277                           
  2278                           ;main.c: 151: speed = set;
  2279  000DA4  C15D  F021         	movff	main@set,___awtoft@c
  2280  000DA8  C15E  F022         	movff	main@set+1,___awtoft@c+1
  2281  000DAC  ECD3  F016         	call	___awtoft	;wreg free
  2282  000DB0  C021  F163         	movff	?___awtoft,main@speed
  2283  000DB4  C022  F164         	movff	?___awtoft+1,main@speed+1
  2284  000DB8  C023  F165         	movff	?___awtoft+2,main@speed+2
  2285                           
  2286                           ;main.c: 152: if (set <= 100) {
  2287  000DBC  0101               	movlb	1	; () banked
  2288  000DBE  BF5E               	btfsc	(main@set+1)& (0+255),7,b
  2289  000DC0  D006               	goto	u7570
  2290  000DC2  515E               	movf	(main@set+1)& (0+255),w,b
  2291  000DC4  E13E               	bnz	l7714
  2292  000DC6  0E65               	movlw	101
  2293  000DC8  5D5D               	subwf	main@set& (0+255),w,b
  2294  000DCA  B0D8               	btfsc	status,0,c
  2295  000DCC  D03A               	goto	l883
  2296  000DCE                     u7570:
  2297                           
  2298                           ; BSR set to: 1
  2299                           ;main.c: 153: uint16_t parameter = (uint16_t)(set * 6.39);
  2300  000DCE  0E7B               	movlw	123
  2301  000DD0  0100               	movlb	0	; () banked
  2302  000DD2  6F63               	movwf	___ftmul@f2& (0+255),b
  2303  000DD4  0ECC               	movlw	204
  2304  000DD6  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  2305  000DD8  0E40               	movlw	64
  2306  000DDA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  2307  000DDC  C15D  F021         	movff	main@set,___awtoft@c
  2308  000DE0  C15E  F022         	movff	main@set+1,___awtoft@c+1
  2309  000DE4  ECD3  F016         	call	___awtoft	;wreg free
  2310  000DE8  C021  F060         	movff	?___awtoft,___ftmul@f1
  2311  000DEC  C022  F061         	movff	?___awtoft+1,___ftmul@f1+1
  2312  000DF0  C023  F062         	movff	?___awtoft+2,___ftmul@f1+2
  2313  000DF4  EC05  F010         	call	___ftmul	;wreg free
  2314  000DF8  C060  F073         	movff	?___ftmul,___fttol@f1
  2315  000DFC  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  2316  000E00  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  2317  000E04  EC89  F00F         	call	___fttol	;wreg free
  2318  000E08  C073  F152         	movff	?___fttol,main@parameter
  2319  000E0C  C074  F153         	movff	?___fttol+1,main@parameter+1
  2320                           
  2321                           ;main.c: 154: printf("\nThe motor is set to %d%%", set);
  2322  000E10  0E4C               	movlw	low STR_5
  2323  000E12  0100               	movlb	0	; () banked
  2324  000E14  6F88               	movwf	printf@f& (0+255),b
  2325  000E16  0E7F               	movlw	high STR_5
  2326  000E18  6F89               	movwf	(printf@f+1)& (0+255),b
  2327  000E1A  C15D  F08A         	movff	main@set,?_printf+2
  2328  000E1E  C15E  F08B         	movff	main@set+1,?_printf+3
  2329  000E22  EC8F  F000         	call	_printf	;wreg free
  2330                           
  2331                           ;main.c: 155: sendDataToRemoteNode(SET, parameter);
  2332  000E26  C152  F01E         	movff	main@parameter,sendDataToRemoteNode@data
  2333  000E2A  C153  F01F         	movff	main@parameter+1,sendDataToRemoteNode@data+1
  2334  000E2E  0E00               	movlw	0
  2335  000E30  ECD6  F014         	call	_sendDataToRemoteNode
  2336  000E34                     l7712:
  2337                           
  2338                           ;main.c: 156: tempSpeed = speed;
  2339  000E34  C163  F157         	movff	main@speed,main@tempSpeed
  2340  000E38  C164  F158         	movff	main@speed+1,main@tempSpeed+1
  2341  000E3C  C165  F159         	movff	main@speed+2,main@tempSpeed+2
  2342                           
  2343                           ;main.c: 157: }
  2344  000E40  D056               	goto	l876
  2345  000E42                     l883:
  2346  000E42                     l7714:
  2347                           
  2348                           ;main.c: 159: else {
  2349                           ;main.c: 160: printf("\nThe value entered is too large, reenter command");
  2350  000E42  0E5A               	movlw	low STR_6
  2351  000E44  0100               	movlb	0	; () banked
  2352  000E46  6F88               	movwf	printf@f& (0+255),b
  2353  000E48  0E7E               	movlw	high STR_6
  2354  000E4A  6F89               	movwf	(printf@f+1)& (0+255),b
  2355  000E4C  EC8F  F000         	call	_printf	;wreg free
  2356                           
  2357                           ;main.c: 161: }
  2358                           ;main.c: 162: break;
  2359  000E50  D04E               	goto	l876
  2360  000E52                     
  2361                           ;main.c: 165: printf("\nThe motor is set to %.1f%%", speed);
  2362  000E52  0E15               	movlw	low STR_7
  2363  000E54  0100               	movlb	0	; () banked
  2364  000E56  6F88               	movwf	printf@f& (0+255),b
  2365  000E58  0E7F               	movlw	high STR_7
  2366  000E5A  6F89               	movwf	(printf@f+1)& (0+255),b
  2367  000E5C  C163  F08A         	movff	main@speed,?_printf+2
  2368  000E60  C164  F08B         	movff	main@speed+1,?_printf+3
  2369  000E64  C165  F08C         	movff	main@speed+2,?_printf+4
  2370  000E68  EC8F  F000         	call	_printf	;wreg free
  2371                           
  2372                           ;main.c: 166: break;
  2373  000E6C  D040               	goto	l876
  2374  000E6E                     
  2375                           ;main.c: 169: printf("\n(I: increment, D: decrement, S: set point, T: status, H: help, P
      +                          : error status)");
  2376  000E6E  0ED0               	movlw	low STR_8
  2377  000E70  0100               	movlb	0	; () banked
  2378  000E72  6F88               	movwf	printf@f& (0+255),b
  2379  000E74  0E7D               	movlw	high STR_8
  2380  000E76  6F89               	movwf	(printf@f+1)& (0+255),b
  2381  000E78  EC8F  F000         	call	_printf	;wreg free
  2382                           
  2383                           ;main.c: 170: break;
  2384  000E7C  D038               	goto	l876
  2385  000E7E                     
  2386                           ;main.c: 172: printError = !printError;
  2387  000E7E  0101               	movlb	1	; () banked
  2388  000E80  515C               	movf	main@printError& (0+255),w,b
  2389  000E82  A4D8               	btfss	status,2,c
  2390  000E84  D002               	goto	u7580
  2391  000E86  0E01               	movlw	1
  2392  000E88  D001               	goto	u7590
  2393  000E8A                     u7580:
  2394  000E8A  0E00               	movlw	0
  2395  000E8C                     u7590:
  2396  000E8C  6F5C               	movwf	main@printError& (0+255),b
  2397                           
  2398                           ;main.c: 173: if (printError) {
  2399  000E8E  515C               	movf	main@printError& (0+255),w,b
  2400  000E90  B4D8               	btfsc	status,2,c
  2401  000E92  D008               	goto	l888
  2402                           
  2403                           ; BSR set to: 1
  2404                           ;main.c: 174: printf("Enable Error Printing \n");
  2405  000E94  0E7F               	movlw	low STR_9
  2406  000E96  0100               	movlb	0	; () banked
  2407  000E98  6F88               	movwf	printf@f& (0+255),b
  2408  000E9A  0E7F               	movlw	high STR_9
  2409  000E9C  6F89               	movwf	(printf@f+1)& (0+255),b
  2410  000E9E  EC8F  F000         	call	_printf	;wreg free
  2411                           
  2412                           ;main.c: 175: } else {
  2413  000EA2  D025               	goto	l876
  2414  000EA4                     l888:
  2415                           
  2416                           ;main.c: 176: printf("Disable Error Printing \n");
  2417  000EA4  0E66               	movlw	low STR_10
  2418  000EA6  0100               	movlb	0	; () banked
  2419  000EA8  6F88               	movwf	printf@f& (0+255),b
  2420  000EAA  0E7F               	movlw	high STR_10
  2421  000EAC  6F89               	movwf	(printf@f+1)& (0+255),b
  2422  000EAE  EC8F  F000         	call	_printf	;wreg free
  2423                           
  2424                           ;main.c: 177: }
  2425                           ;main.c: 178: break;
  2426  000EB2  D01D               	goto	l876
  2427  000EB4  0ED5               	movlw	low STR_11
  2428  000EB6  0100               	movlb	0	; () banked
  2429  000EB8  6F88               	movwf	printf@f& (0+255),b
  2430  000EBA  0E7E               	movlw	high STR_11
  2431  000EBC  6F89               	movwf	(printf@f+1)& (0+255),b
  2432  000EBE  EC8F  F000         	call	_printf	;wreg free
  2433                           
  2434                           ;main.c: 181: }
  2435                           
  2436                           ;main.c: 180: break;
  2437  000EC2  D015               	goto	l876
  2438  000EC4                     l873:
  2439  000EC4  0100               	movlb	0	; () banked
  2440  000EC6  51D8               	movf	_eusart1RxBuffer& (0+255),w,b	;volatile
  2441                           
  2442                           ; Switch size 1, requested type "space"
  2443                           ; Number of cases is 6, Range of values is 68 to 84
  2444                           ; switch strategies available:
  2445                           ; Name         Instructions Cycles
  2446                           ; simple_byte           19    10 (average)
  2447                           ;	Chosen strategy is simple_byte
  2448  000EC8  0A44               	xorlw	68	; case 68
  2449  000ECA  B4D8               	btfsc	status,2,c
  2450  000ECC  D6EB               	goto	l877
  2451  000ECE  0A0C               	xorlw	12	; case 72
  2452  000ED0  B4D8               	btfsc	status,2,c
  2453  000ED2  D7CD               	goto	l886
  2454  000ED4  0A01               	xorlw	1	; case 73
  2455  000ED6  B4D8               	btfsc	status,2,c
  2456  000ED8  D6A9               	goto	l874
  2457  000EDA  0A19               	xorlw	25	; case 80
  2458  000EDC  B4D8               	btfsc	status,2,c
  2459  000EDE  D7CF               	goto	l887
  2460  000EE0  0A03               	xorlw	3	; case 83
  2461  000EE2  B4D8               	btfsc	status,2,c
  2462  000EE4  D70B               	goto	l879
  2463  000EE6  0A07               	xorlw	7	; case 84
  2464  000EE8  B4D8               	btfsc	status,2,c
  2465  000EEA  D7B3               	goto	l885
  2466  000EEC  D7E3               	goto	l890
  2467  000EEE                     l876:
  2468                           
  2469                           ;main.c: 182: eusart1RxHead = 0;
  2470                           
  2471                           ; BSR set to: 0
  2472  000EEE  0E00               	movlw	0
  2473  000EF0  6E37               	movwf	_eusart1RxHead,c	;volatile
  2474                           
  2475                           ;main.c: 183: eusart1RxCount = 0;
  2476  000EF2  0E00               	movlw	0
  2477  000EF4  6E35               	movwf	_eusart1RxCount,c	;volatile
  2478                           
  2479                           ;main.c: 184: receiveState = RECEIVING;
  2480  000EF6  0E00               	movlw	0
  2481  000EF8  6E3A               	movwf	_receiveState,c
  2482                           
  2483                           ;main.c: 185: printf("\n\rEnter a command: ");
  2484  000EFA  0ED8               	movlw	low STR_12
  2485  000EFC  0100               	movlb	0	; () banked
  2486  000EFE  6F88               	movwf	printf@f& (0+255),b
  2487  000F00  0E7F               	movlw	high STR_12
  2488  000F02  6F89               	movwf	(printf@f+1)& (0+255),b
  2489  000F04  EC8F  F000         	call	_printf	;wreg free
  2490                           
  2491                           ;main.c: 186: break;
  2492  000F08  D2B9               	goto	l894
  2493  000F0A                     
  2494                           ;main.c: 189: eusart1RxHead = 0;
  2495  000F0A  0E00               	movlw	0
  2496  000F0C  6E37               	movwf	_eusart1RxHead,c	;volatile
  2497                           
  2498                           ;main.c: 190: eusart1RxCount = 0;
  2499  000F0E  0E00               	movlw	0
  2500  000F10  6E35               	movwf	_eusart1RxCount,c	;volatile
  2501                           
  2502                           ;main.c: 191: receiveState = RECEIVING;
  2503  000F12  0E00               	movlw	0
  2504  000F14  6E3A               	movwf	_receiveState,c
  2505                           
  2506                           ;main.c: 197: }
  2507                           
  2508                           ;main.c: 196: break;
  2509                           
  2510                           ;main.c: 195: default:
  2511                           
  2512                           ;main.c: 193: break;
  2513  000F16  D2B2               	goto	l894
  2514  000F18                     l868:
  2515  000F18  503A               	movf	_receiveState,w,c
  2516                           
  2517                           ; Switch size 1, requested type "space"
  2518                           ; Number of cases is 2, Range of values is 1 to 2
  2519                           ; switch strategies available:
  2520                           ; Name         Instructions Cycles
  2521                           ; simple_byte            7     4 (average)
  2522                           ;	Chosen strategy is simple_byte
  2523  000F1A  0A01               	xorlw	1	; case 1
  2524  000F1C  B4D8               	btfsc	status,2,c
  2525  000F1E  D661               	goto	l869
  2526  000F20  0A03               	xorlw	3	; case 2
  2527  000F22  B4D8               	btfsc	status,2,c
  2528  000F24  D7F2               	goto	l892
  2529                           
  2530                           ;main.c: 200: switch(receiveStateFeedBack) {
  2531  000F26  D2AA               	goto	l894
  2532  000F28                     
  2533                           ;main.c: 205: errorBits = (int16_t) eusart2RxBuffer[0] << 8;
  2534  000F28  0100               	movlb	0	; () banked
  2535  000F2A  51E8               	movf	_eusart2RxBuffer& (0+255),w,b	;volatile
  2536  000F2C  0101               	movlb	1	; () banked
  2537  000F2E  6F67               	movwf	(main@errorBits+1)& (0+255),b
  2538  000F30  6B66               	clrf	main@errorBits& (0+255),b
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;main.c: 206: errorBits |= (int16_t) eusart2RxBuffer[1];
  2542  000F32  0100               	movlb	0	; () banked
  2543  000F34  51E9               	movf	(_eusart2RxBuffer+1)& (0+255),w,b	;volatile
  2544  000F36  0101               	movlb	1	; () banked
  2545  000F38  1366               	iorwf	main@errorBits& (0+255),f,b
  2546                           
  2547                           ; BSR set to: 1
  2548                           ;main.c: 207: if ((errorBits / 6.4) >= 5 || (errorBits / 6.4) <= -5) {
  2549  000F3A  0ECD               	movlw	205
  2550  000F3C  6E28               	movwf	___ftdiv@f2,c
  2551  000F3E  0ECC               	movlw	204
  2552  000F40  6E29               	movwf	___ftdiv@f2+1,c
  2553  000F42  0E40               	movlw	64
  2554  000F44  6E2A               	movwf	___ftdiv@f2+2,c
  2555  000F46  C166  F021         	movff	main@errorBits,___awtoft@c
  2556  000F4A  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2557  000F4E  ECD3  F016         	call	___awtoft	;wreg free
  2558  000F52  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2559  000F56  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2560  000F5A  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2561  000F5E  EC80  F010         	call	___ftdiv	;wreg free
  2562  000F62  C025  F066         	movff	?___ftdiv,___ftge@ff1
  2563  000F66  C026  F067         	movff	?___ftdiv+1,___ftge@ff1+1
  2564  000F6A  C027  F068         	movff	?___ftdiv+2,___ftge@ff1+2
  2565  000F6E  0E00               	movlw	0
  2566  000F70  0100               	movlb	0	; () banked
  2567  000F72  6F69               	movwf	___ftge@ff2& (0+255),b
  2568  000F74  0EA0               	movlw	160
  2569  000F76  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  2570  000F78  0E40               	movlw	64
  2571  000F7A  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  2572  000F7C  EC4D  F012         	call	___ftge	;wreg free
  2573  000F80  0100               	movlb	0	; () banked
  2574  000F82  B0D8               	btfsc	status,0,c
  2575  000F84  D025               	goto	u7620
  2576                           
  2577                           ; BSR set to: 0
  2578  000F86  0E00               	movlw	0
  2579  000F88  6F66               	movwf	___ftge@ff1& (0+255),b
  2580  000F8A  0EA0               	movlw	160
  2581  000F8C  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  2582  000F8E  0EC0               	movlw	192
  2583  000F90  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  2584  000F92  0ECD               	movlw	205
  2585  000F94  6E28               	movwf	___ftdiv@f2,c
  2586  000F96  0ECC               	movlw	204
  2587  000F98  6E29               	movwf	___ftdiv@f2+1,c
  2588  000F9A  0E40               	movlw	64
  2589  000F9C  6E2A               	movwf	___ftdiv@f2+2,c
  2590  000F9E  C166  F021         	movff	main@errorBits,___awtoft@c
  2591  000FA2  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2592  000FA6  ECD3  F016         	call	___awtoft	;wreg free
  2593  000FAA  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2594  000FAE  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2595  000FB2  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2596  000FB6  EC80  F010         	call	___ftdiv	;wreg free
  2597  000FBA  C025  F069         	movff	?___ftdiv,___ftge@ff2
  2598  000FBE  C026  F06A         	movff	?___ftdiv+1,___ftge@ff2+1
  2599  000FC2  C027  F06B         	movff	?___ftdiv+2,___ftge@ff2+2
  2600  000FC6  EC4D  F012         	call	___ftge	;wreg free
  2601  000FCA  0100               	movlb	0	; () banked
  2602  000FCC  A0D8               	btfss	status,0,c
  2603  000FCE  D0A5               	goto	l896
  2604  000FD0                     u7620:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;main.c: 208: printf("\n\rError level is 0 and is severe. Adjusting motor speed.");
  2608                           
  2609                           ; BSR set to: 0
  2610  000FD0  0E21               	movlw	low STR_13
  2611  000FD2  6F88               	movwf	printf@f& (0+255),b
  2612  000FD4  0E7E               	movlw	high STR_13
  2613  000FD6  6F89               	movwf	(printf@f+1)& (0+255),b
  2614  000FD8  EC8F  F000         	call	_printf	;wreg free
  2615                           
  2616                           ;main.c: 209: printf("\n\rError is: %0.1f%% ", ((int) errorBits) / 6.4);
  2617  000FDC  0EC3               	movlw	low STR_14
  2618  000FDE  0100               	movlb	0	; () banked
  2619  000FE0  6F88               	movwf	printf@f& (0+255),b
  2620  000FE2  0E7F               	movlw	high STR_14
  2621  000FE4  6F89               	movwf	(printf@f+1)& (0+255),b
  2622  000FE6  C166  F021         	movff	main@errorBits,___awtoft@c
  2623  000FEA  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2624  000FEE  ECD3  F016         	call	___awtoft	;wreg free
  2625  000FF2  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2626  000FF6  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2627  000FFA  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2628  000FFE  0ECD               	movlw	205
  2629  001000  6E28               	movwf	___ftdiv@f2,c
  2630  001002  0ECC               	movlw	204
  2631  001004  6E29               	movwf	___ftdiv@f2+1,c
  2632  001006  0E40               	movlw	64
  2633  001008  6E2A               	movwf	___ftdiv@f2+2,c
  2634  00100A  EC80  F010         	call	___ftdiv	;wreg free
  2635  00100E  C025  F08A         	movff	?___ftdiv,?_printf+2
  2636  001012  C026  F08B         	movff	?___ftdiv+1,?_printf+3
  2637  001016  C027  F08C         	movff	?___ftdiv+2,?_printf+4
  2638  00101A  EC8F  F000         	call	_printf	;wreg free
  2639                           
  2640                           ;main.c: 210: newSpeed = (int16_t) (tempSpeed * 6.4) - errorBits;
  2641  00101E  C166  F0B0         	movff	main@errorBits,??_main
  2642  001022  C167  F0B1         	movff	main@errorBits+1,??_main+1
  2643  001026  0100               	movlb	0	; () banked
  2644  001028  1FB0               	comf	??_main& (0+255),f,b
  2645  00102A  1FB1               	comf	(??_main+1)& (0+255),f,b
  2646  00102C  4BB0               	infsnz	??_main& (0+255),f,b
  2647  00102E  2BB1               	incf	(??_main+1)& (0+255),f,b
  2648  001030  0ECD               	movlw	205
  2649  001032  6F63               	movwf	___ftmul@f2& (0+255),b
  2650  001034  0ECC               	movlw	204
  2651  001036  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  2652  001038  0E40               	movlw	64
  2653  00103A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  2654  00103C  C157  F060         	movff	main@tempSpeed,___ftmul@f1
  2655  001040  C158  F061         	movff	main@tempSpeed+1,___ftmul@f1+1
  2656  001044  C159  F062         	movff	main@tempSpeed+2,___ftmul@f1+2
  2657  001048  EC05  F010         	call	___ftmul	;wreg free
  2658  00104C  C060  F073         	movff	?___ftmul,___fttol@f1
  2659  001050  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  2660  001054  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  2661  001058  EC89  F00F         	call	___fttol	;wreg free
  2662  00105C  0100               	movlb	0	; () banked
  2663  00105E  51B0               	movf	??_main& (0+255),w,b
  2664  001060  2573               	addwf	?___fttol& (0+255),w,b
  2665  001062  0101               	movlb	1	; () banked
  2666  001064  6F61               	movwf	main@newSpeed& (0+255),b
  2667  001066  0100               	movlb	0	; () banked
  2668  001068  51B1               	movf	(??_main+1)& (0+255),w,b
  2669  00106A  2174               	addwfc	(?___fttol+1)& (0+255),w,b
  2670  00106C  0101               	movlb	1	; () banked
  2671  00106E  6F62               	movwf	(main@newSpeed+1)& (0+255),b
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 211: printf("\n\rNew speed is %d", newSpeed);
  2675  001070  0EEC               	movlw	low STR_15
  2676  001072  0100               	movlb	0	; () banked
  2677  001074  6F88               	movwf	printf@f& (0+255),b
  2678  001076  0E7F               	movlw	high STR_15
  2679  001078  6F89               	movwf	(printf@f+1)& (0+255),b
  2680  00107A  C161  F08A         	movff	main@newSpeed,?_printf+2
  2681  00107E  C162  F08B         	movff	main@newSpeed+1,?_printf+3
  2682  001082  EC8F  F000         	call	_printf	;wreg free
  2683                           
  2684                           ;main.c: 212: if(newSpeed > 639) {
  2685  001086  0101               	movlb	1	; () banked
  2686  001088  BF62               	btfsc	(main@newSpeed+1)& (0+255),7,b
  2687  00108A  D014               	goto	l899
  2688  00108C  0E80               	movlw	128
  2689  00108E  5D61               	subwf	main@newSpeed& (0+255),w,b
  2690  001090  0E02               	movlw	2
  2691  001092  5962               	subwfb	(main@newSpeed+1)& (0+255),w,b
  2692  001094  A0D8               	btfss	status,0,c
  2693  001096  D00E               	goto	l899
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;main.c: 213: sendDataToRemoteNode(ADJUST, (uint16_t) 639);
  2697  001098  0E02               	movlw	2
  2698  00109A  6E1F               	movwf	sendDataToRemoteNode@data+1,c
  2699  00109C  0E7F               	movlw	127
  2700  00109E  6E1E               	movwf	sendDataToRemoteNode@data,c
  2701  0010A0  0E03               	movlw	3
  2702  0010A2  ECD6  F014         	call	_sendDataToRemoteNode
  2703                           
  2704                           ;main.c: 214: tempSpeed = 100;
  2705  0010A6  0E00               	movlw	0
  2706  0010A8  0101               	movlb	1	; () banked
  2707  0010AA  6F57               	movwf	main@tempSpeed& (0+255),b
  2708  0010AC  0EC8               	movlw	200
  2709  0010AE  6F58               	movwf	(main@tempSpeed+1)& (0+255),b
  2710  0010B0  0E42               	movlw	66
  2711  0010B2  D00F               	goto	L1
  2712  0010B4                     l899:
  2713                           
  2714                           ; BSR set to: 1
  2715                           
  2716                           ; BSR set to: 1
  2717  0010B4  AF62               	btfss	(main@newSpeed+1)& (0+255),7,b
  2718  0010B6  D00F               	goto	l901
  2719                           
  2720                           ; BSR set to: 1
  2721                           ;main.c: 216: sendDataToRemoteNode(ADJUST, (uint16_t) 0);
  2722  0010B8  0E00               	movlw	0
  2723  0010BA  6E1F               	movwf	sendDataToRemoteNode@data+1,c
  2724  0010BC  0E00               	movlw	0
  2725  0010BE  6E1E               	movwf	sendDataToRemoteNode@data,c
  2726  0010C0  0E03               	movlw	3
  2727  0010C2  ECD6  F014         	call	_sendDataToRemoteNode
  2728                           
  2729                           ;main.c: 217: tempSpeed = 0;
  2730  0010C6  0E00               	movlw	0
  2731  0010C8  0101               	movlb	1	; () banked
  2732  0010CA  6F57               	movwf	main@tempSpeed& (0+255),b
  2733  0010CC  0E00               	movlw	0
  2734  0010CE  6F58               	movwf	(main@tempSpeed+1)& (0+255),b
  2735  0010D0  0E00               	movlw	0
  2736  0010D2                     L1:
  2737  0010D2  6F59               	movwf	(main@tempSpeed+2)& (0+255),b
  2738                           
  2739                           ;main.c: 218: } else {
  2740  0010D4  D1D0               	goto	l918
  2741  0010D6                     l901:
  2742                           
  2743                           ; BSR set to: 1
  2744                           ;main.c: 219: sendDataToRemoteNode(ADJUST, (int16_t) newSpeed);
  2745                           
  2746                           ; BSR set to: 1
  2747  0010D6  C161  F01E         	movff	main@newSpeed,sendDataToRemoteNode@data
  2748  0010DA  C162  F01F         	movff	main@newSpeed+1,sendDataToRemoteNode@data+1
  2749  0010DE  0E03               	movlw	3
  2750  0010E0  ECD6  F014         	call	_sendDataToRemoteNode
  2751                           
  2752                           ;main.c: 220: tempSpeed = newSpeed / 6.4;
  2753  0010E4  C161  F021         	movff	main@newSpeed,___awtoft@c
  2754  0010E8  C162  F022         	movff	main@newSpeed+1,___awtoft@c+1
  2755  0010EC  ECD3  F016         	call	___awtoft	;wreg free
  2756  0010F0  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2757  0010F4  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2758  0010F8  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2759  0010FC  0ECD               	movlw	205
  2760  0010FE  6E28               	movwf	___ftdiv@f2,c
  2761  001100  0ECC               	movlw	204
  2762  001102  6E29               	movwf	___ftdiv@f2+1,c
  2763  001104  0E40               	movlw	64
  2764  001106  6E2A               	movwf	___ftdiv@f2+2,c
  2765  001108  EC80  F010         	call	___ftdiv	;wreg free
  2766  00110C  C025  F157         	movff	?___ftdiv,main@tempSpeed
  2767  001110  C026  F158         	movff	?___ftdiv+1,main@tempSpeed+1
  2768  001114  C027  F159         	movff	?___ftdiv+2,main@tempSpeed+2
  2769                           
  2770                           ;main.c: 221: }
  2771                           ;main.c: 222: }
  2772  001118  D1AE               	goto	l918
  2773  00111A                     l896:
  2774                           
  2775                           ;main.c: 223: else if (((errorBits / 6.4) >= 2 && (errorBits / 6.4) < 5) || ((errorBits 
      +                          / 6.4) <= -2 && (errorBits / 6.4) > -5)) {
  2776  00111A  0ECD               	movlw	205
  2777  00111C  6E28               	movwf	___ftdiv@f2,c
  2778  00111E  0ECC               	movlw	204
  2779  001120  6E29               	movwf	___ftdiv@f2+1,c
  2780  001122  0E40               	movlw	64
  2781  001124  6E2A               	movwf	___ftdiv@f2+2,c
  2782  001126  C166  F021         	movff	main@errorBits,___awtoft@c
  2783  00112A  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2784  00112E  ECD3  F016         	call	___awtoft	;wreg free
  2785  001132  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2786  001136  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2787  00113A  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2788  00113E  EC80  F010         	call	___ftdiv	;wreg free
  2789  001142  C025  F066         	movff	?___ftdiv,___ftge@ff1
  2790  001146  C026  F067         	movff	?___ftdiv+1,___ftge@ff1+1
  2791  00114A  C027  F068         	movff	?___ftdiv+2,___ftge@ff1+2
  2792  00114E  0E00               	movlw	0
  2793  001150  0100               	movlb	0	; () banked
  2794  001152  6F69               	movwf	___ftge@ff2& (0+255),b
  2795  001154  0E00               	movlw	0
  2796  001156  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  2797  001158  0E40               	movlw	64
  2798  00115A  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  2799  00115C  EC4D  F012         	call	___ftge	;wreg free
  2800  001160  0100               	movlb	0	; () banked
  2801  001162  A0D8               	btfss	status,0,c
  2802  001164  D026               	goto	u7660
  2803                           
  2804                           ; BSR set to: 0
  2805  001166  0ECD               	movlw	205
  2806  001168  6E28               	movwf	___ftdiv@f2,c
  2807  00116A  0ECC               	movlw	204
  2808  00116C  6E29               	movwf	___ftdiv@f2+1,c
  2809  00116E  0E40               	movlw	64
  2810  001170  6E2A               	movwf	___ftdiv@f2+2,c
  2811  001172  C166  F021         	movff	main@errorBits,___awtoft@c
  2812  001176  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2813  00117A  ECD3  F016         	call	___awtoft	;wreg free
  2814  00117E  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2815  001182  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2816  001186  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2817  00118A  EC80  F010         	call	___ftdiv	;wreg free
  2818  00118E  C025  F066         	movff	?___ftdiv,___ftge@ff1
  2819  001192  C026  F067         	movff	?___ftdiv+1,___ftge@ff1+1
  2820  001196  C027  F068         	movff	?___ftdiv+2,___ftge@ff1+2
  2821  00119A  0E00               	movlw	0
  2822  00119C  0100               	movlb	0	; () banked
  2823  00119E  6F69               	movwf	___ftge@ff2& (0+255),b
  2824  0011A0  0EA0               	movlw	160
  2825  0011A2  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  2826  0011A4  0E40               	movlw	64
  2827  0011A6  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  2828  0011A8  EC4D  F012         	call	___ftge	;wreg free
  2829  0011AC  0100               	movlb	0	; () banked
  2830  0011AE  A0D8               	btfss	status,0,c
  2831  0011B0  D04A               	goto	u7680
  2832  0011B2                     u7660:
  2833                           
  2834                           ; BSR set to: 0
  2835                           
  2836                           ; BSR set to: 0
  2837  0011B2  0E00               	movlw	0
  2838  0011B4  6F66               	movwf	___ftge@ff1& (0+255),b
  2839  0011B6  0E00               	movlw	0
  2840  0011B8  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  2841  0011BA  0EC0               	movlw	192
  2842  0011BC  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  2843  0011BE  0ECD               	movlw	205
  2844  0011C0  6E28               	movwf	___ftdiv@f2,c
  2845  0011C2  0ECC               	movlw	204
  2846  0011C4  6E29               	movwf	___ftdiv@f2+1,c
  2847  0011C6  0E40               	movlw	64
  2848  0011C8  6E2A               	movwf	___ftdiv@f2+2,c
  2849  0011CA  C166  F021         	movff	main@errorBits,___awtoft@c
  2850  0011CE  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2851  0011D2  ECD3  F016         	call	___awtoft	;wreg free
  2852  0011D6  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2853  0011DA  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2854  0011DE  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2855  0011E2  EC80  F010         	call	___ftdiv	;wreg free
  2856  0011E6  C025  F069         	movff	?___ftdiv,___ftge@ff2
  2857  0011EA  C026  F06A         	movff	?___ftdiv+1,___ftge@ff2+1
  2858  0011EE  C027  F06B         	movff	?___ftdiv+2,___ftge@ff2+2
  2859  0011F2  EC4D  F012         	call	___ftge	;wreg free
  2860  0011F6  0100               	movlb	0	; () banked
  2861  0011F8  A0D8               	btfss	status,0,c
  2862  0011FA  D04D               	goto	l904
  2863                           
  2864                           ; BSR set to: 0
  2865  0011FC  0E00               	movlw	0
  2866  0011FE  6F66               	movwf	___ftge@ff1& (0+255),b
  2867  001200  0EA0               	movlw	160
  2868  001202  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  2869  001204  0EC0               	movlw	192
  2870  001206  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  2871  001208  0ECD               	movlw	205
  2872  00120A  6E28               	movwf	___ftdiv@f2,c
  2873  00120C  0ECC               	movlw	204
  2874  00120E  6E29               	movwf	___ftdiv@f2+1,c
  2875  001210  0E40               	movlw	64
  2876  001212  6E2A               	movwf	___ftdiv@f2+2,c
  2877  001214  C166  F021         	movff	main@errorBits,___awtoft@c
  2878  001218  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2879  00121C  ECD3  F016         	call	___awtoft	;wreg free
  2880  001220  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2881  001224  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2882  001228  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2883  00122C  EC80  F010         	call	___ftdiv	;wreg free
  2884  001230  C025  F069         	movff	?___ftdiv,___ftge@ff2
  2885  001234  C026  F06A         	movff	?___ftdiv+1,___ftge@ff2+1
  2886  001238  C027  F06B         	movff	?___ftdiv+2,___ftge@ff2+2
  2887  00123C  EC4D  F012         	call	___ftge	;wreg free
  2888  001240  0100               	movlb	0	; () banked
  2889  001242  B0D8               	btfsc	status,0,c
  2890  001244  D028               	goto	l904
  2891  001246                     u7680:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 224: printf("\n\rError level is 1 and is moderate.");
  2895                           
  2896                           ; BSR set to: 0
  2897  001246  0EB1               	movlw	low STR_16
  2898  001248  6F88               	movwf	printf@f& (0+255),b
  2899  00124A  0E7E               	movlw	high STR_16
  2900  00124C  6F89               	movwf	(printf@f+1)& (0+255),b
  2901  00124E  EC8F  F000         	call	_printf	;wreg free
  2902                           
  2903                           ;main.c: 225: printf("\n\rError is: %0.1f%% ", ((int) errorBits) / 6.39 );
  2904  001252  0EC3               	movlw	low STR_14
  2905  001254  0100               	movlb	0	; () banked
  2906  001256  6F88               	movwf	printf@f& (0+255),b
  2907  001258  0E7F               	movlw	high STR_14
  2908  00125A  6F89               	movwf	(printf@f+1)& (0+255),b
  2909  00125C  C166  F021         	movff	main@errorBits,___awtoft@c
  2910  001260  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2911  001264  ECD3  F016         	call	___awtoft	;wreg free
  2912  001268  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2913  00126C  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2914  001270  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2915  001274  0E7B               	movlw	123
  2916  001276  6E28               	movwf	___ftdiv@f2,c
  2917  001278  0ECC               	movlw	204
  2918  00127A  6E29               	movwf	___ftdiv@f2+1,c
  2919  00127C  0E40               	movlw	64
  2920  00127E  6E2A               	movwf	___ftdiv@f2+2,c
  2921  001280  EC80  F010         	call	___ftdiv	;wreg free
  2922  001284  C025  F08A         	movff	?___ftdiv,?_printf+2
  2923  001288  C026  F08B         	movff	?___ftdiv+1,?_printf+3
  2924  00128C  C027  F08C         	movff	?___ftdiv+2,?_printf+4
  2925  001290  EC8F  F000         	call	_printf	;wreg free
  2926                           
  2927                           ;main.c: 226: }
  2928  001294  D0F0               	goto	l918
  2929  001296                     l904:
  2930                           
  2931                           ;main.c: 227: else if (((errorBits / 6.4) >= 1 && (errorBits / 6.4) < 2) || ((errorBits 
      +                          / 6.4) <= -1 && (errorBits / 6.4) > -2)) {
  2932  001296  0ECD               	movlw	205
  2933  001298  6E28               	movwf	___ftdiv@f2,c
  2934  00129A  0ECC               	movlw	204
  2935  00129C  6E29               	movwf	___ftdiv@f2+1,c
  2936  00129E  0E40               	movlw	64
  2937  0012A0  6E2A               	movwf	___ftdiv@f2+2,c
  2938  0012A2  C166  F021         	movff	main@errorBits,___awtoft@c
  2939  0012A6  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2940  0012AA  ECD3  F016         	call	___awtoft	;wreg free
  2941  0012AE  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2942  0012B2  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2943  0012B6  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2944  0012BA  EC80  F010         	call	___ftdiv	;wreg free
  2945  0012BE  C025  F066         	movff	?___ftdiv,___ftge@ff1
  2946  0012C2  C026  F067         	movff	?___ftdiv+1,___ftge@ff1+1
  2947  0012C6  C027  F068         	movff	?___ftdiv+2,___ftge@ff1+2
  2948  0012CA  0E00               	movlw	0
  2949  0012CC  0100               	movlb	0	; () banked
  2950  0012CE  6F69               	movwf	___ftge@ff2& (0+255),b
  2951  0012D0  0E80               	movlw	128
  2952  0012D2  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  2953  0012D4  0E3F               	movlw	63
  2954  0012D6  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  2955  0012D8  EC4D  F012         	call	___ftge	;wreg free
  2956  0012DC  0100               	movlb	0	; () banked
  2957  0012DE  A0D8               	btfss	status,0,c
  2958  0012E0  D026               	goto	u7700
  2959                           
  2960                           ; BSR set to: 0
  2961  0012E2  0ECD               	movlw	205
  2962  0012E4  6E28               	movwf	___ftdiv@f2,c
  2963  0012E6  0ECC               	movlw	204
  2964  0012E8  6E29               	movwf	___ftdiv@f2+1,c
  2965  0012EA  0E40               	movlw	64
  2966  0012EC  6E2A               	movwf	___ftdiv@f2+2,c
  2967  0012EE  C166  F021         	movff	main@errorBits,___awtoft@c
  2968  0012F2  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  2969  0012F6  ECD3  F016         	call	___awtoft	;wreg free
  2970  0012FA  C021  F025         	movff	?___awtoft,___ftdiv@f1
  2971  0012FE  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  2972  001302  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  2973  001306  EC80  F010         	call	___ftdiv	;wreg free
  2974  00130A  C025  F066         	movff	?___ftdiv,___ftge@ff1
  2975  00130E  C026  F067         	movff	?___ftdiv+1,___ftge@ff1+1
  2976  001312  C027  F068         	movff	?___ftdiv+2,___ftge@ff1+2
  2977  001316  0E00               	movlw	0
  2978  001318  0100               	movlb	0	; () banked
  2979  00131A  6F69               	movwf	___ftge@ff2& (0+255),b
  2980  00131C  0E00               	movlw	0
  2981  00131E  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  2982  001320  0E40               	movlw	64
  2983  001322  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  2984  001324  EC4D  F012         	call	___ftge	;wreg free
  2985  001328  0100               	movlb	0	; () banked
  2986  00132A  A0D8               	btfss	status,0,c
  2987  00132C  D04A               	goto	u7720
  2988  00132E                     u7700:
  2989                           
  2990                           ; BSR set to: 0
  2991                           
  2992                           ; BSR set to: 0
  2993  00132E  0E00               	movlw	0
  2994  001330  6F66               	movwf	___ftge@ff1& (0+255),b
  2995  001332  0E80               	movlw	128
  2996  001334  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  2997  001336  0EBF               	movlw	191
  2998  001338  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  2999  00133A  0ECD               	movlw	205
  3000  00133C  6E28               	movwf	___ftdiv@f2,c
  3001  00133E  0ECC               	movlw	204
  3002  001340  6E29               	movwf	___ftdiv@f2+1,c
  3003  001342  0E40               	movlw	64
  3004  001344  6E2A               	movwf	___ftdiv@f2+2,c
  3005  001346  C166  F021         	movff	main@errorBits,___awtoft@c
  3006  00134A  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  3007  00134E  ECD3  F016         	call	___awtoft	;wreg free
  3008  001352  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3009  001356  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3010  00135A  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3011  00135E  EC80  F010         	call	___ftdiv	;wreg free
  3012  001362  C025  F069         	movff	?___ftdiv,___ftge@ff2
  3013  001366  C026  F06A         	movff	?___ftdiv+1,___ftge@ff2+1
  3014  00136A  C027  F06B         	movff	?___ftdiv+2,___ftge@ff2+2
  3015  00136E  EC4D  F012         	call	___ftge	;wreg free
  3016  001372  0100               	movlb	0	; () banked
  3017  001374  A0D8               	btfss	status,0,c
  3018  001376  D04D               	goto	l910
  3019                           
  3020                           ; BSR set to: 0
  3021  001378  0E00               	movlw	0
  3022  00137A  6F66               	movwf	___ftge@ff1& (0+255),b
  3023  00137C  0E00               	movlw	0
  3024  00137E  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
  3025  001380  0EC0               	movlw	192
  3026  001382  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
  3027  001384  0ECD               	movlw	205
  3028  001386  6E28               	movwf	___ftdiv@f2,c
  3029  001388  0ECC               	movlw	204
  3030  00138A  6E29               	movwf	___ftdiv@f2+1,c
  3031  00138C  0E40               	movlw	64
  3032  00138E  6E2A               	movwf	___ftdiv@f2+2,c
  3033  001390  C166  F021         	movff	main@errorBits,___awtoft@c
  3034  001394  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  3035  001398  ECD3  F016         	call	___awtoft	;wreg free
  3036  00139C  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3037  0013A0  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3038  0013A4  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3039  0013A8  EC80  F010         	call	___ftdiv	;wreg free
  3040  0013AC  C025  F069         	movff	?___ftdiv,___ftge@ff2
  3041  0013B0  C026  F06A         	movff	?___ftdiv+1,___ftge@ff2+1
  3042  0013B4  C027  F06B         	movff	?___ftdiv+2,___ftge@ff2+2
  3043  0013B8  EC4D  F012         	call	___ftge	;wreg free
  3044  0013BC  0100               	movlb	0	; () banked
  3045  0013BE  B0D8               	btfsc	status,0,c
  3046  0013C0  D028               	goto	l910
  3047  0013C2                     u7720:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;main.c: 228: printf("\n\rError level is 2 and is of concern ");
  3051                           
  3052                           ; BSR set to: 0
  3053  0013C2  0E8B               	movlw	low STR_18
  3054  0013C4  6F88               	movwf	printf@f& (0+255),b
  3055  0013C6  0E7E               	movlw	high STR_18
  3056  0013C8  6F89               	movwf	(printf@f+1)& (0+255),b
  3057  0013CA  EC8F  F000         	call	_printf	;wreg free
  3058                           
  3059                           ;main.c: 229: printf("\n\rError is: %0.1f%% ", ((int) errorBits) / 6.39 );
  3060  0013CE  0EC3               	movlw	low STR_14
  3061  0013D0  0100               	movlb	0	; () banked
  3062  0013D2  6F88               	movwf	printf@f& (0+255),b
  3063  0013D4  0E7F               	movlw	high STR_14
  3064  0013D6  6F89               	movwf	(printf@f+1)& (0+255),b
  3065  0013D8  C166  F021         	movff	main@errorBits,___awtoft@c
  3066  0013DC  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  3067  0013E0  ECD3  F016         	call	___awtoft	;wreg free
  3068  0013E4  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3069  0013E8  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3070  0013EC  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3071  0013F0  0E7B               	movlw	123
  3072  0013F2  6E28               	movwf	___ftdiv@f2,c
  3073  0013F4  0ECC               	movlw	204
  3074  0013F6  6E29               	movwf	___ftdiv@f2+1,c
  3075  0013F8  0E40               	movlw	64
  3076  0013FA  6E2A               	movwf	___ftdiv@f2+2,c
  3077  0013FC  EC80  F010         	call	___ftdiv	;wreg free
  3078  001400  C025  F08A         	movff	?___ftdiv,?_printf+2
  3079  001404  C026  F08B         	movff	?___ftdiv+1,?_printf+3
  3080  001408  C027  F08C         	movff	?___ftdiv+2,?_printf+4
  3081  00140C  EC8F  F000         	call	_printf	;wreg free
  3082                           
  3083                           ;main.c: 230: }
  3084  001410  D032               	goto	l918
  3085  001412                     l910:
  3086                           
  3087                           ;main.c: 231: else if(printError){
  3088  001412  0101               	movlb	1	; () banked
  3089  001414  515C               	movf	main@printError& (0+255),w,b
  3090  001416  B4D8               	btfsc	status,2,c
  3091  001418  D02E               	goto	l918
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;main.c: 232: printf("\n\rError level is fine");
  3095  00141A  0EAD               	movlw	low STR_20
  3096  00141C  0100               	movlb	0	; () banked
  3097  00141E  6F88               	movwf	printf@f& (0+255),b
  3098  001420  0E7F               	movlw	high STR_20
  3099  001422  6F89               	movwf	(printf@f+1)& (0+255),b
  3100  001424  EC8F  F000         	call	_printf	;wreg free
  3101                           
  3102                           ;main.c: 233: printf("\n\rError is: %0.1f%% ", ((int) errorBits) / 6.39 );
  3103  001428  0EC3               	movlw	low STR_14
  3104  00142A  0100               	movlb	0	; () banked
  3105  00142C  6F88               	movwf	printf@f& (0+255),b
  3106  00142E  0E7F               	movlw	high STR_14
  3107  001430  6F89               	movwf	(printf@f+1)& (0+255),b
  3108  001432  C166  F021         	movff	main@errorBits,___awtoft@c
  3109  001436  C167  F022         	movff	main@errorBits+1,___awtoft@c+1
  3110  00143A  ECD3  F016         	call	___awtoft	;wreg free
  3111  00143E  C021  F025         	movff	?___awtoft,___ftdiv@f1
  3112  001442  C022  F026         	movff	?___awtoft+1,___ftdiv@f1+1
  3113  001446  C023  F027         	movff	?___awtoft+2,___ftdiv@f1+2
  3114  00144A  0E7B               	movlw	123
  3115  00144C  6E28               	movwf	___ftdiv@f2,c
  3116  00144E  0ECC               	movlw	204
  3117  001450  6E29               	movwf	___ftdiv@f2+1,c
  3118  001452  0E40               	movlw	64
  3119  001454  6E2A               	movwf	___ftdiv@f2+2,c
  3120  001456  EC80  F010         	call	___ftdiv	;wreg free
  3121  00145A  C025  F08A         	movff	?___ftdiv,?_printf+2
  3122  00145E  C026  F08B         	movff	?___ftdiv+1,?_printf+3
  3123  001462  C027  F08C         	movff	?___ftdiv+2,?_printf+4
  3124  001466  EC8F  F000         	call	_printf	;wreg free
  3125  00146A  D005               	goto	l918
  3126  00146C                     l7798:
  3127                           
  3128                           ;main.c: 236: eusart2RxCount = 0;
  3129  00146C  0E00               	movlw	0
  3130  00146E  6E3B               	movwf	_eusart2RxCount,c	;volatile
  3131                           
  3132                           ;main.c: 237: receiveStateFeedBack = RECEIVINGFEEDBACK;
  3133  001470  0E00               	movlw	0
  3134  001472  6E40               	movwf	_receiveStateFeedBack,c
  3135                           
  3136                           ;main.c: 238: break;
  3137  001474  D551               	goto	l868
  3138  001476                     l918:
  3139                           
  3140                           ;main.c: 241: eusart2RxHead = 0;
  3141  001476  0E00               	movlw	0
  3142  001478  6E3D               	movwf	_eusart2RxHead,c	;volatile
  3143  00147A  D7F8               	goto	l7798
  3144  00147C                     l894:
  3145  00147C  5040               	movf	_receiveStateFeedBack,w,c
  3146                           
  3147                           ; Switch size 1, requested type "space"
  3148                           ; Number of cases is 2, Range of values is 1 to 2
  3149                           ; switch strategies available:
  3150                           ; Name         Instructions Cycles
  3151                           ; simple_byte            7     4 (average)
  3152                           ;	Chosen strategy is simple_byte
  3153  00147E  0A01               	xorlw	1	; case 1
  3154  001480  B4D8               	btfsc	status,2,c
  3155  001482  D552               	goto	l895
  3156  001484  0A03               	xorlw	3	; case 2
  3157  001486  B4D8               	btfsc	status,2,c
  3158  001488  D7F6               	goto	l918
  3159  00148A  D546               	goto	l868
  3160  00148C                     __end_of_main:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           intcon	equ	0xFF2
  3167                           postinc0	equ	0xFEE
  3168                           wreg	equ	0xFE8
  3169                           indf1	equ	0xFE7
  3170                           postdec1	equ	0xFE5
  3171                           fsr1h	equ	0xFE2
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _sram_read *****************
  3180 ;; Defined at:
  3181 ;;		line 27 in file "sram_control.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  address         1    wreg     unsigned char 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  address         1   25[COMRAM] unsigned char 
  3186 ;;  data            1   26[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      unsigned char 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         0       0       0       0       0       0       0
  3197 ;;      Locals:         2       0       0       0       0       0       0
  3198 ;;      Temps:          1       0       0       0       0       0       0
  3199 ;;      Totals:         3       0       0       0       0       0       0
  3200 ;;Total ram usage:        3 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    5
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text1
  3211  002EF8                     __ptext1:
  3212                           	opt stack 0
  3213  002EF8                     _sram_read:
  3214                           	opt stack 25
  3215                           
  3216                           ;incstack = 0
  3217                           ;sram_read@address stored from wreg
  3218  002EF8  6E1A               	movwf	sram_read@address,c
  3219                           
  3220                           ;sram_control.c: 28: uint8_t data;
  3221                           ;sram_control.c: 30: TRISA = 0xFF;
  3222  002EFA  6892               	setf	3986,c	;volatile
  3223                           
  3224                           ;sram_control.c: 33: PORTBbits.RB6 = 0;
  3225  002EFC  9C81               	bcf	3969,6,c	;volatile
  3226                           
  3227                           ;sram_control.c: 34: PORTBbits.RB5 = 1;
  3228  002EFE  8A81               	bsf	3969,5,c	;volatile
  3229                           
  3230                           ;sram_control.c: 35: PORTB = (PORTB & 0xE0) | (address & 0x1F);
  3231  002F00  C01A  F019         	movff	sram_read@address,??_sram_read
  3232  002F04  0E1F               	movlw	31
  3233  002F06  1619               	andwf	??_sram_read,f,c
  3234  002F08  5081               	movf	3969,w,c	;volatile
  3235  002F0A  0BE0               	andlw	224
  3236  002F0C  1019               	iorwf	??_sram_read,w,c
  3237  002F0E  6E81               	movwf	3969,c	;volatile
  3238                           
  3239                           ;sram_control.c: 37: _delay((unsigned long)((1)*(16000000/4000000.0)));
  3240  002F10  D000               	nop2		;2 cycle nop
  3241  002F12  D000               	nop2		;2 cycle nop
  3242                           
  3243                           ;sram_control.c: 40: data = PORTA;
  3244  002F14  CF80 F01B          	movff	3968,sram_read@data	;volatile
  3245                           
  3246                           ;sram_control.c: 43: PORTBbits.RB5 = 1;
  3247  002F18  8A81               	bsf	3969,5,c	;volatile
  3248                           
  3249                           ;sram_control.c: 44: PORTBbits.RB6 = 1;
  3250  002F1A  8C81               	bsf	3969,6,c	;volatile
  3251                           
  3252                           ;sram_control.c: 46: return data;
  3253  002F1C  501B               	movf	sram_read@data,w,c
  3254  002F1E  0012               	return	
  3255  002F20                     __end_of_sram_read:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           indf1	equ	0xFE7
  3265                           postdec1	equ	0xFE5
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _sendDataToRemoteNode *****************
  3275 ;; Defined at:
  3276 ;;		line 44 in file "main.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  commandPWM      1    wreg     enum E7191
  3279 ;;  data            2   29[COMRAM] unsigned int 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  commandPWM      1   31[COMRAM] enum E7191
  3282 ;; Return value:  Size  Location     Type
  3283 ;;		None               void
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         2       0       0       0       0       0       0
  3292 ;;      Locals:         1       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0
  3294 ;;      Totals:         3       0       0       0       0       0       0
  3295 ;;Total ram usage:        3 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:   12
  3298 ;; This function calls:
  3299 ;;		_i2c_masterWrite
  3300 ;;		_i2c_open
  3301 ;;		_i2c_setBuffer
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text2
  3308  0029AC                     __ptext2:
  3309                           	opt stack 0
  3310  0029AC                     _sendDataToRemoteNode:
  3311                           	opt stack 18
  3312                           
  3313                           ;incstack = 0
  3314                           ;sendDataToRemoteNode@commandPWM stored from wreg
  3315  0029AC  6E20               	movwf	sendDataToRemoteNode@commandPWM,c
  3316                           
  3317                           ;main.c: 45: static i2c_error_t status;
  3318                           ;main.c: 46: static uint8_t buffer[2];
  3319                           ;main.c: 47: switch(commandPWM) {
  3320  0029AE  D009               	goto	l855
  3321  0029B0                     
  3322                           ;main.c: 49: buffer[0] = 0x00;
  3323  0029B0  0E00               	movlw	0
  3324  0029B2  D005               	goto	L5
  3325  0029B4                     
  3326                           ;main.c: 53: buffer[0] = 0x40;
  3327  0029B4  0E40               	movlw	64
  3328  0029B6  D003               	goto	L5
  3329  0029B8                     
  3330                           ;main.c: 57: buffer[0] = 0x80;
  3331  0029B8  0E80               	movlw	128
  3332  0029BA  D001               	goto	L5
  3333  0029BC                     
  3334                           ;main.c: 60: buffer[0] = 0xC0;
  3335  0029BC  0EC0               	movlw	192
  3336  0029BE                     L5:
  3337  0029BE  6E41               	movwf	sendDataToRemoteNode@buffer,c
  3338                           
  3339                           ;main.c: 62: }
  3340                           
  3341                           ;main.c: 61: break;
  3342  0029C0  D00D               	goto	l857
  3343  0029C2                     l855:
  3344  0029C2  5020               	movf	sendDataToRemoteNode@commandPWM,w,c
  3345                           
  3346                           ; Switch size 1, requested type "space"
  3347                           ; Number of cases is 4, Range of values is 0 to 3
  3348                           ; switch strategies available:
  3349                           ; Name         Instructions Cycles
  3350                           ; simple_byte           13     7 (average)
  3351                           ;	Chosen strategy is simple_byte
  3352  0029C4  0A00               	xorlw	0	; case 0
  3353  0029C6  B4D8               	btfsc	status,2,c
  3354  0029C8  D7F3               	goto	l856
  3355  0029CA  0A01               	xorlw	1	; case 1
  3356  0029CC  B4D8               	btfsc	status,2,c
  3357  0029CE  D7F2               	goto	l858
  3358  0029D0  0A03               	xorlw	3	; case 2
  3359  0029D2  B4D8               	btfsc	status,2,c
  3360  0029D4  D7F1               	goto	l859
  3361  0029D6  0A01               	xorlw	1	; case 3
  3362  0029D8  B4D8               	btfsc	status,2,c
  3363  0029DA  D7F0               	goto	l860
  3364  0029DC                     l857:
  3365                           
  3366                           ;main.c: 64: buffer[0] |= (data >> 8) & 0x3;
  3367  0029DC  501F               	movf	sendDataToRemoteNode@data+1,w,c
  3368  0029DE  0B03               	andlw	3
  3369  0029E0  1241               	iorwf	sendDataToRemoteNode@buffer,f,c
  3370                           
  3371                           ;main.c: 65: buffer[1] = data & 0xFF;
  3372  0029E2  C01E  F042         	movff	sendDataToRemoteNode@data,sendDataToRemoteNode@buffer+1
  3373                           
  3374                           ;main.c: 66: i2c_open(0x50);
  3375  0029E6  0E50               	movlw	80
  3376  0029E8  ECB5  F011         	call	_i2c_open
  3377                           
  3378                           ;main.c: 67: i2c_setBuffer(buffer, 2);
  3379  0029EC  0E41               	movlw	low sendDataToRemoteNode@buffer
  3380  0029EE  6E19               	movwf	i2c_setBuffer@buffer,c
  3381  0029F0  0E00               	movlw	high sendDataToRemoteNode@buffer
  3382  0029F2  6E1A               	movwf	i2c_setBuffer@buffer+1,c
  3383  0029F4  0E00               	movlw	0
  3384  0029F6  6E1C               	movwf	i2c_setBuffer@bufferSize+1,c
  3385  0029F8  0E02               	movlw	2
  3386  0029FA  6E1B               	movwf	i2c_setBuffer@bufferSize,c
  3387  0029FC  ECC4  F017         	call	_i2c_setBuffer	;wreg free
  3388                           
  3389                           ;main.c: 68: status = i2c_masterWrite();
  3390  002A00  ECD8  F018         	call	_i2c_masterWrite	;wreg free
  3391  002A04  6E34               	movwf	sendDataToRemoteNode@status,c
  3392                           
  3393                           ;main.c: 71: return 0;
  3394                           ;	Return value of _sendDataToRemoteNode is never used
  3395  002A06  0012               	return	
  3396  002A08                     __end_of_sendDataToRemoteNode:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           intcon	equ	0xFF2
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           indf1	equ	0xFE7
  3406                           postdec1	equ	0xFE5
  3407                           fsr1h	equ	0xFE2
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _i2c_setBuffer *****************
  3416 ;; Defined at:
  3417 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  buffer          2   24[COMRAM] PTR void 
  3420 ;;		 -> sendDataToRemoteNode@buffer(2), 
  3421 ;;  bufferSize      2   26[COMRAM] unsigned int 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3433 ;;      Params:         4       0       0       0       0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0
  3436 ;;      Totals:         4       0       0       0       0       0       0
  3437 ;;Total ram usage:        4 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    5
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_sendDataToRemoteNode
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text3
  3448  002F88                     __ptext3:
  3449                           	opt stack 0
  3450  002F88                     _i2c_setBuffer:
  3451                           	opt stack 24
  3452                           
  3453                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  3454                           
  3455                           ;incstack = 0
  3456  002F88  0100               	movlb	0	; () banked
  3457  002F8A  A5B4               	btfss	_i2c_status& (0+255),2,b
  3458  002F8C  0012               	return	
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;i2c_master.c: 187: {
  3462                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  3463  002F8E  C019  F0B6         	movff	i2c_setBuffer@buffer,_i2c_status+2
  3464  002F92  C01A  F0B7         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  3468  002F96  C01B  F0B8         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  3469  002F9A  C01C  F0B9         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  3473  002F9E  95B4               	bcf	_i2c_status& (0+255),2,b
  3474  002FA0  0012               	return	
  3475  002FA2                     __end_of_i2c_setBuffer:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           intcon	equ	0xFF2
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           indf1	equ	0xFE7
  3485                           postdec1	equ	0xFE5
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _i2c_open *****************
  3495 ;; Defined at:
  3496 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  address         1    wreg     unsigned char 
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  address         1   27[COMRAM] unsigned char 
  3501 ;;  ret             1   26[COMRAM] enum E6837
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      enum E6837
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         0       0       0       0       0       0       0
  3512 ;;      Locals:         2       0       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0
  3514 ;;      Totals:         2       0       0       0       0       0       0
  3515 ;;Total ram usage:        2 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		_i2c1_driver_open
  3520 ;;		_i2c1_driver_setBusCollisionISR
  3521 ;;		_i2c1_driver_setI2cISR
  3522 ;;		_mssp1_clearIRQ
  3523 ;; This function is called by:
  3524 ;;		_sendDataToRemoteNode
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text4
  3529  00236A                     __ptext4:
  3530                           	opt stack 0
  3531  00236A                     _i2c_open:
  3532                           	opt stack 23
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;incstack = 0
  3536                           ;i2c_open@address stored from wreg
  3537  00236A  6E1C               	movwf	i2c_open@address,c
  3538                           
  3539                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  3540  00236C  0E01               	movlw	1
  3541  00236E  6E1B               	movwf	i2c_open@ret,c
  3542                           
  3543                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  3544  002370  0100               	movlb	0	; () banked
  3545  002372  B3B4               	btfsc	_i2c_status& (0+255),1,b
  3546  002374  0012               	return	
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;i2c_master.c: 121: {
  3550                           ;i2c_master.c: 122: i2c_status.address = address;
  3551  002376  C01C  F0B5         	movff	i2c_open@address,_i2c_status+1
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;i2c_master.c: 123: i2c_status.busy = 0;
  3555  00237A  91B4               	bcf	_i2c_status& (0+255),0,b
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  3559  00237C  83B4               	bsf	_i2c_status& (0+255),1,b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  3563  00237E  97B4               	bcf	_i2c_status& (0+255),3,b
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  3567  002380  0E0E               	movlw	14
  3568  002382  6FBE               	movwf	(_i2c_status+10)& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  3572  002384  0E01               	movlw	1
  3573  002386  6FBD               	movwf	(_i2c_status+9)& (0+255),b
  3574  002388  0EF4               	movlw	244
  3575  00238A  6FBC               	movwf	(_i2c_status+8)& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  3579  00238C  85B4               	bsf	_i2c_status& (0+255),2,b
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  3583  00238E  0E88               	movlw	low _returnStop
  3584  002390  6FC0               	movwf	(_i2c_status+12)& (0+255),b
  3585  002392  0E31               	movlw	high _returnStop
  3586  002394  6FC1               	movwf	(_i2c_status+13)& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  3590  002396  0E00               	movlw	0
  3591  002398  6FCC               	movwf	(_i2c_status+24)& (0+255),b
  3592  00239A  0E00               	movlw	0
  3593  00239C  6FCD               	movwf	(_i2c_status+25)& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  3597  00239E  0E88               	movlw	low _returnStop
  3598  0023A0  6FC2               	movwf	(_i2c_status+14)& (0+255),b
  3599  0023A2  0E31               	movlw	high _returnStop
  3600  0023A4  6FC3               	movwf	(_i2c_status+15)& (0+255),b
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  3604  0023A6  0E00               	movlw	0
  3605  0023A8  6FCE               	movwf	(_i2c_status+26)& (0+255),b
  3606  0023AA  0E00               	movlw	0
  3607  0023AC  6FCF               	movwf	(_i2c_status+27)& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  3611  0023AE  0E88               	movlw	low _returnStop
  3612  0023B0  6FC4               	movwf	(_i2c_status+16)& (0+255),b
  3613  0023B2  0E31               	movlw	high _returnStop
  3614  0023B4  6FC5               	movwf	(_i2c_status+17)& (0+255),b
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  3618  0023B6  0E00               	movlw	0
  3619  0023B8  6FD0               	movwf	(_i2c_status+28)& (0+255),b
  3620  0023BA  0E00               	movlw	0
  3621  0023BC  6FD1               	movwf	(_i2c_status+29)& (0+255),b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  3625  0023BE  0E88               	movlw	low _returnStop
  3626  0023C0  6FC6               	movwf	(_i2c_status+18)& (0+255),b
  3627  0023C2  0E31               	movlw	high _returnStop
  3628  0023C4  6FC7               	movwf	(_i2c_status+19)& (0+255),b
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  3632  0023C6  0E00               	movlw	0
  3633  0023C8  6FD2               	movwf	(_i2c_status+30)& (0+255),b
  3634  0023CA  0E00               	movlw	0
  3635  0023CC  6FD3               	movwf	(_i2c_status+31)& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  3639  0023CE  0E7E               	movlw	low _returnReset
  3640  0023D0  6FC8               	movwf	(_i2c_status+20)& (0+255),b
  3641  0023D2  0E31               	movlw	high _returnReset
  3642  0023D4  6FC9               	movwf	(_i2c_status+21)& (0+255),b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  3646  0023D6  0E00               	movlw	0
  3647  0023D8  6FD4               	movwf	(_i2c_status+32)& (0+255),b
  3648  0023DA  0E00               	movlw	0
  3649  0023DC  6FD5               	movwf	(_i2c_status+33)& (0+255),b
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;i2c_master.c: 142: i2c1_driver_open();
  3653  0023DE  ECDE  F017         	call	_i2c1_driver_open	;wreg free
  3654                           
  3655                           ;i2c_master.c: 143: mssp1_clearIRQ();
  3656  0023E2  EC0F  F019         	call	_mssp1_clearIRQ	;wreg free
  3657                           
  3658                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  3659  0023E6  0E18               	movlw	low _i2c_busCollisionISR
  3660  0023E8  6E19               	movwf	i2c1_driver_setBusCollisionISR@f,c
  3661  0023EA  0E32               	movlw	high _i2c_busCollisionISR
  3662  0023EC  6E1A               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  3663  0023EE  ECBA  F018         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  3664                           
  3665                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
  3666  0023F2  0EB2               	movlw	low _i2c_ISR
  3667  0023F4  6E19               	movwf	i2c1_driver_setI2cISR@f,c
  3668  0023F6  0E2B               	movlw	high _i2c_ISR
  3669  0023F8  6E1A               	movwf	i2c1_driver_setI2cISR@f+1,c
  3670  0023FA  ECB5  F018         	call	_i2c1_driver_setI2cISR	;wreg free
  3671                           
  3672                           ;i2c_master.c: 151: ret = I2C_NOERR;
  3673  0023FE  0E00               	movlw	0
  3674  002400  6E1B               	movwf	i2c_open@ret,c
  3675  002402  0012               	return	
  3676  002404                     __end_of_i2c_open:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           intcon	equ	0xFF2
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           indf1	equ	0xFE7
  3686                           postdec1	equ	0xFE5
  3687                           fsr1h	equ	0xFE2
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _i2c1_driver_setI2cISR *****************
  3696 ;; Defined at:
  3697 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  f               2   24[COMRAM] PTR void 
  3700 ;;		 -> i2c_ISR(1), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3712 ;;      Params:         2       0       0       0       0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0       0       0
  3715 ;;      Totals:         2       0       0       0       0       0       0
  3716 ;;Total ram usage:        2 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    5
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_i2c_open
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text5
  3727  00316A                     __ptext5:
  3728                           	opt stack 0
  3729  00316A                     _i2c1_driver_setI2cISR:
  3730                           	opt stack 23
  3731                           
  3732                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  3733                           
  3734                           ;incstack = 0
  3735  00316A  C019  F030         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  3736  00316E  C01A  F031         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  3737  003172  0012               	return		;funcret
  3738  003174                     __end_of_i2c1_driver_setI2cISR:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           intcon	equ	0xFF2
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           indf1	equ	0xFE7
  3748                           postdec1	equ	0xFE5
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  3758 ;; Defined at:
  3759 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  f               2   24[COMRAM] PTR void 
  3762 ;;		 -> i2c_busCollisionISR(1), 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3774 ;;      Params:         2       0       0       0       0       0       0
  3775 ;;      Locals:         0       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    5
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_i2c_open
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text6
  3789  003174                     __ptext6:
  3790                           	opt stack 0
  3791  003174                     _i2c1_driver_setBusCollisionISR:
  3792                           	opt stack 23
  3793                           
  3794                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  3795                           
  3796                           ;incstack = 0
  3797  003174  C019  F032         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  3798  003178  C01A  F033         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  3799  00317C  0012               	return		;funcret
  3800  00317E                     __end_of_i2c1_driver_setBusCollisionISR:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           intcon	equ	0xFF2
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           indf1	equ	0xFE7
  3810                           postdec1	equ	0xFE5
  3811                           fsr1h	equ	0xFE2
  3812                           fsr1l	equ	0xFE1
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _i2c1_driver_open *****************
  3820 ;; Defined at:
  3821 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, status,2
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3835 ;;      Params:         0       0       0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0
  3838 ;;      Totals:         0       0       0       0       0       0       0
  3839 ;;Total ram usage:        0 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    5
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_i2c_open
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text7
  3850  002FBC                     __ptext7:
  3851                           	opt stack 0
  3852  002FBC                     _i2c1_driver_open:
  3853                           	opt stack 23
  3854                           
  3855                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  3856                           
  3857                           ;incstack = 0
  3858  002FBC  BAC6               	btfsc	4038,5,c	;volatile
  3859  002FBE  0012               	return	
  3860                           
  3861                           ;i2c1_driver.c: 86: {
  3862                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  3863  002FC0  0E00               	movlw	0
  3864  002FC2  6EC7               	movwf	4039,c	;volatile
  3865                           
  3866                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  3867  002FC4  0E28               	movlw	40
  3868  002FC6  6EC6               	movwf	4038,c	;volatile
  3869                           
  3870                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  3871  002FC8  0E00               	movlw	0
  3872  002FCA  6EC5               	movwf	4037,c	;volatile
  3873                           
  3874                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  3875  002FCC  0E27               	movlw	39
  3876  002FCE  6EC8               	movwf	4040,c	;volatile
  3877                           
  3878                           ;i2c1_driver.c: 93: else
  3879                           ;i2c1_driver.c: 94: return 0;
  3880                           ;	Return value of _i2c1_driver_open is never used
  3881                           
  3882                           ;i2c1_driver.c: 92: }
  3883                           
  3884                           ;i2c1_driver.c: 91: return 1;
  3885                           ;	Return value of _i2c1_driver_open is never used
  3886  002FD0  0012               	return	
  3887  002FD2                     __end_of_i2c1_driver_open:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           indf1	equ	0xFE7
  3897                           postdec1	equ	0xFE5
  3898                           fsr1h	equ	0xFE2
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _i2c_masterWrite *****************
  3907 ;; Defined at:
  3908 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      enum E6837
  3915 ;; Registers used:
  3916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3922 ;;      Params:         0       0       0       0       0       0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0
  3924 ;;      Temps:          0       0       0       0       0       0       0
  3925 ;;      Totals:         0       0       0       0       0       0       0
  3926 ;;Total ram usage:        0 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:   11
  3929 ;; This function calls:
  3930 ;;		_i2c_masterOperation
  3931 ;; This function is called by:
  3932 ;;		_sendDataToRemoteNode
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text8
  3937  0031B0                     __ptext8:
  3938                           	opt stack 0
  3939  0031B0                     _i2c_masterWrite:
  3940                           	opt stack 18
  3941                           
  3942                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  3943                           
  3944                           ;incstack = 0
  3945  0031B0  0E00               	movlw	0
  3946  0031B2  EC09  F017         	call	_i2c_masterOperation
  3947  0031B6  0012               	return	
  3948  0031B8                     __end_of_i2c_masterWrite:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           intcon	equ	0xFF2
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           indf1	equ	0xFE7
  3958                           postdec1	equ	0xFE5
  3959                           fsr1h	equ	0xFE2
  3960                           fsr1l	equ	0xFE1
  3961                           indf2	equ	0xFDF
  3962                           postinc2	equ	0xFDE
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _i2c_masterOperation *****************
  3968 ;; Defined at:
  3969 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  read            1    wreg     unsigned char 
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  read            1   27[COMRAM] unsigned char 
  3974 ;;  ret             1   28[COMRAM] enum E6837
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      enum E6837
  3977 ;; Registers used:
  3978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3984 ;;      Params:         0       0       0       0       0       0       0
  3985 ;;      Locals:         2       0       0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0
  3987 ;;      Totals:         2       0       0       0       0       0       0
  3988 ;;Total ram usage:        2 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:   10
  3991 ;; This function calls:
  3992 ;;		_i2c1_driver_start
  3993 ;;		_i2c_poller
  3994 ;;		_mssp1_IRQisEnabled
  3995 ;; This function is called by:
  3996 ;;		_i2c_masterWrite
  3997 ;;		_i2c_masterRead
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text9
  4002  002E12                     __ptext9:
  4003                           	opt stack 0
  4004  002E12                     _i2c_masterOperation:
  4005                           	opt stack 18
  4006                           
  4007                           ;incstack = 0
  4008                           ;i2c_masterOperation@read stored from wreg
  4009  002E12  6E1C               	movwf	i2c_masterOperation@read,c
  4010                           
  4011                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  4012  002E14  0E01               	movlw	1
  4013  002E16  6E1D               	movwf	i2c_masterOperation@ret,c
  4014                           
  4015                           ;i2c_master.c: 196: if(!i2c_status.busy)
  4016  002E18  0100               	movlb	0	; () banked
  4017  002E1A  B1B4               	btfsc	_i2c_status& (0+255),0,b
  4018  002E1C  D011               	goto	l163
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;i2c_master.c: 197: {
  4022                           ;i2c_master.c: 198: i2c_status.busy = 1;
  4023  002E1E  81B4               	bsf	_i2c_status& (0+255),0,b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;i2c_master.c: 199: ret = I2C_NOERR;
  4027  002E20  0E00               	movlw	0
  4028  002E22  6E1D               	movwf	i2c_masterOperation@ret,c
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;i2c_master.c: 201: if(read)
  4032  002E24  501C               	movf	i2c_masterOperation@read,w,c
  4033  002E26  B4D8               	btfsc	status,2,c
  4034  002E28  D002               	goto	l161
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;i2c_master.c: 202: {
  4038                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  4039  002E2A  0E01               	movlw	1
  4040  002E2C  D001               	goto	L6
  4041  002E2E                     l161:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;i2c_master.c: 205: else
  4045                           ;i2c_master.c: 206: {
  4046                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  4047                           
  4048                           ; BSR set to: 0
  4049  002E2E  0E02               	movlw	2
  4050  002E30                     L6:
  4051  002E30  6FBE               	movwf	(_i2c_status+10)& (0+255),b
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;i2c_master.c: 208: }
  4055                           ;i2c_master.c: 209: i2c1_driver_start();
  4056                           
  4057                           ; BSR set to: 0
  4058  002E32  EC1B  F019         	call	_i2c1_driver_start	;wreg free
  4059                           
  4060                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
  4061  002E36  EC51  F018         	call	_mssp1_IRQisEnabled	;wreg free
  4062  002E3A  A0D8               	btfss	status,0,c
  4063                           
  4064                           ;i2c_master.c: 212: i2c_poller();
  4065  002E3C  ECD1  F017         	call	_i2c_poller	;wreg free
  4066  002E40                     l163:
  4067                           
  4068                           ;i2c_master.c: 213: }
  4069                           ;i2c_master.c: 214: return ret;
  4070  002E40  501D               	movf	i2c_masterOperation@ret,w,c
  4071  002E42  0012               	return	
  4072  002E44                     __end_of_i2c_masterOperation:
  4073                           	opt stack 0
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           intcon	equ	0xFF2
  4079                           postinc0	equ	0xFEE
  4080                           wreg	equ	0xFE8
  4081                           indf1	equ	0xFE7
  4082                           postdec1	equ	0xFE5
  4083                           fsr1h	equ	0xFE2
  4084                           fsr1l	equ	0xFE1
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function _mssp1_IRQisEnabled *****************
  4092 ;; Defined at:
  4093 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;		None               void
  4100 ;; Registers used:
  4101 ;;		wreg, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4107 ;;      Params:         0       0       0       0       0       0       0
  4108 ;;      Locals:         0       0       0       0       0       0       0
  4109 ;;      Temps:          1       0       0       0       0       0       0
  4110 ;;      Totals:         1       0       0       0       0       0       0
  4111 ;;Total ram usage:        1 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    5
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_i2c_masterOperation
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text10
  4122  0030A2                     __ptext10:
  4123                           	opt stack 0
  4124  0030A2                     _mssp1_IRQisEnabled:
  4125                           	opt stack 22
  4126                           
  4127                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  4128                           
  4129                           ;incstack = 0
  4130  0030A2  A69D               	btfss	3997,3,c	;volatile
  4131  0030A4  D003               	goto	u5440
  4132  0030A6  6A19               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  4133  0030A8  2A19               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  4134  0030AA  D001               	goto	u5448
  4135  0030AC                     u5440:
  4136  0030AC  6A19               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  4137  0030AE                     u5448:
  4138  0030AE  3019               	rrcf	??_mssp1_IRQisEnabled,w,c
  4139  0030B0  0012               	return	
  4140  0030B2                     __end_of_mssp1_IRQisEnabled:
  4141                           	opt stack 0
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           intcon	equ	0xFF2
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           indf1	equ	0xFE7
  4150                           postdec1	equ	0xFE5
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           indf2	equ	0xFDF
  4154                           postinc2	equ	0xFDE
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _i2c_poller *****************
  4160 ;; Defined at:
  4161 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4175 ;;      Params:         0       0       0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0
  4178 ;;      Totals:         0       0       0       0       0       0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    9
  4182 ;; This function calls:
  4183 ;;		_i2c_ISR
  4184 ;;		_mssp1_waitForEvent
  4185 ;; This function is called by:
  4186 ;;		_i2c_masterOperation
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text11
  4191  002FA2                     __ptext11:
  4192                           	opt stack 0
  4193  002FA2                     _i2c_poller:
  4194                           	opt stack 18
  4195                           
  4196                           ;i2c_master.c: 232: while(i2c_status.busy)
  4197                           
  4198                           ;incstack = 0
  4199  002FA2  D008               	goto	l173
  4200  002FA4                     
  4201                           ;i2c_master.c: 233: {
  4202                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
  4203  002FA4  0E00               	movlw	0
  4204  002FA6  6E19               	movwf	mssp1_waitForEvent@timeout,c
  4205  002FA8  0E00               	movlw	0
  4206  002FAA  6E1A               	movwf	mssp1_waitForEvent@timeout+1,c
  4207  002FAC  EC36  F018         	call	_mssp1_waitForEvent	;wreg free
  4208                           
  4209                           ;i2c_master.c: 235: i2c_ISR();
  4210  002FB0  ECD9  F015         	call	_i2c_ISR	;wreg free
  4211  002FB4                     l173:
  4212  002FB4  0100               	movlb	0	; () banked
  4213  002FB6  A1B4               	btfss	_i2c_status& (0+255),0,b
  4214  002FB8  0012               	return	
  4215  002FBA  D7F4               	goto	l174
  4216  002FBC                     __end_of_i2c_poller:
  4217                           	opt stack 0
  4218                           tblptru	equ	0xFF8
  4219                           tblptrh	equ	0xFF7
  4220                           tblptrl	equ	0xFF6
  4221                           tablat	equ	0xFF5
  4222                           intcon	equ	0xFF2
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf1	equ	0xFE7
  4226                           postdec1	equ	0xFE5
  4227                           fsr1h	equ	0xFE2
  4228                           fsr1l	equ	0xFE1
  4229                           indf2	equ	0xFDF
  4230                           postinc2	equ	0xFDE
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _mssp1_waitForEvent *****************
  4236 ;; Defined at:
  4237 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  timeout         2   24[COMRAM] PTR unsigned int 
  4240 ;;		 -> NULL(0), 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4252 ;;      Params:         2       0       0       0       0       0       0
  4253 ;;      Locals:         0       0       0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0
  4255 ;;      Totals:         2       0       0       0       0       0       0
  4256 ;;Total ram usage:        2 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    5
  4259 ;; This function calls:
  4260 ;;		Nothing
  4261 ;; This function is called by:
  4262 ;;		_i2c_poller
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text12
  4267  00306C                     __ptext12:
  4268                           	opt stack 0
  4269  00306C                     _mssp1_waitForEvent:
  4270                           	opt stack 21
  4271                           
  4272                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;incstack = 0
  4276  00306C  B69E               	btfsc	3998,3,c	;volatile
  4277  00306E  0012               	return	
  4278  003070                     u5390:
  4279                           
  4280                           ;i2c1_driver.c: 76: {
  4281                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  4282                           
  4283                           ;i2c1_driver.c: 74: {
  4284                           ;i2c1_driver.c: 75: while(1)
  4285  003070  B69E               	btfsc	3998,3,c	;volatile
  4286  003072  0012               	return	
  4287                           
  4288                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  4289  003074  0E85               	movlw	133
  4290  003076                     u7747:
  4291  003076  2EE8               	decfsz	wreg,f,c
  4292  003078  D7FE               	bra	u7747
  4293  00307A  F000               	nop	
  4294  00307C  D7F9               	goto	u5390
  4295  00307E                     __end_of_mssp1_waitForEvent:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           intcon	equ	0xFF2
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           indf1	equ	0xFE7
  4305                           postdec1	equ	0xFE5
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _i2c_ISR *****************
  4315 ;; Defined at:
  4316 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4330 ;;      Params:         0       0       0       0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0
  4333 ;;      Totals:         0       0       0       0       0       0       0
  4334 ;;Total ram usage:        0 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    8
  4337 ;; This function calls:
  4338 ;;		_do_I2C_DO_ACK
  4339 ;;		_do_I2C_DO_ADDRESS_NACK
  4340 ;;		_do_I2C_DO_NACK_RESTART
  4341 ;;		_do_I2C_DO_NACK_STOP
  4342 ;;		_do_I2C_IDLE
  4343 ;;		_do_I2C_RCEN
  4344 ;;		_do_I2C_RESET
  4345 ;;		_do_I2C_RX
  4346 ;;		_do_I2C_SEND_ADR_READ
  4347 ;;		_do_I2C_SEND_ADR_WRITE
  4348 ;;		_do_I2C_SEND_RESTART
  4349 ;;		_do_I2C_SEND_RESTART_READ
  4350 ;;		_do_I2C_SEND_RESTART_WRITE
  4351 ;;		_do_I2C_SEND_STOP
  4352 ;;		_do_I2C_TX
  4353 ;;		_do_I2C_TX_EMPTY
  4354 ;;		_i2c1_driver_isNACK
  4355 ;;		_mssp1_clearIRQ
  4356 ;; This function is called by:
  4357 ;;		_i2c_open
  4358 ;;		_i2c_poller
  4359 ;;		_INTERRUPT_InterruptManager
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text13
  4364  002BB2                     __ptext13:
  4365                           	opt stack 0
  4366  002BB2                     _i2c_ISR:
  4367                           	opt stack 0
  4368                           
  4369                           ;Skip over the trampoline to the duplicate function for level 2
  4370  002BB2  B247               	btfsc	btemp,1,c
  4371  002BB4  EF4D  F016         	goto	i2_i2c_ISR
  4372  002BB8                     _i2c_ISR$intlevel0:
  4373                           	opt stack 18
  4374                           
  4375                           ;i2c_master.c: 421: mssp1_clearIRQ();
  4376                           
  4377                           ;incstack = 0
  4378  002BB8  EC0F  F019         	call	_mssp1_clearIRQ	;wreg free
  4379                           
  4380                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  4381  002BBC  0100               	movlb	0	; () banked
  4382  002BBE  A7B4               	btfss	_i2c_status& (0+255),3,b
  4383  002BC0  D007               	goto	l263
  4384                           
  4385                           ; BSR set to: 0
  4386  002BC2  EC0A  F018         	call	_i2c1_driver_isNACK	;wreg free
  4387  002BC6  A0D8               	btfss	status,0,c
  4388  002BC8  D003               	goto	l263
  4389                           
  4390                           ;i2c_master.c: 428: {
  4391                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  4392  002BCA  0E0F               	movlw	15
  4393  002BCC  0100               	movlb	0	; () banked
  4394  002BCE  6FBE               	movwf	(_i2c_status+10)& (0+255),b
  4395  002BD0                     l263:
  4396                           
  4397                           ;i2c_master.c: 430: }
  4398                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  4399                           
  4400                           ; BSR set to: 0
  4401  002BD0  0100               	movlb	0	; () banked
  4402  002BD2  51BE               	movf	(_i2c_status+10)& (0+255),w,b
  4403  002BD4  0D02               	mullw	2
  4404  002BD6  0E32               	movlw	low _fsmStateTable
  4405  002BD8  24F3               	addwf	prodl,w,c
  4406  002BDA  6ED9               	movwf	fsr2l,c
  4407  002BDC  0E01               	movlw	high _fsmStateTable
  4408  002BDE  20F4               	addwfc	prodh,w,c
  4409  002BE0  6EDA               	movwf	fsr2h,c
  4410  002BE2  D801               	call	u5438
  4411  002BE4  D00A               	goto	u5439
  4412  002BE6                     u5438:
  4413  002BE6  0005               	push	
  4414  002BE8  6EFA               	movwf	pclath,c
  4415  002BEA  50DE               	movf	postinc2,w,c
  4416  002BEC  6EFD               	movwf	tosl,c
  4417  002BEE  50DE               	movf	postinc2,w,c
  4418  002BF0  6EFE               	movwf	tosh,c
  4419  002BF2  50F8               	movf	tblptru,w,c
  4420  002BF4  6EFF               	movwf	tosu,c
  4421  002BF6  50FA               	movf	pclath,w,c
  4422  002BF8  0012               	return		;indir
  4423  002BFA                     u5439:
  4424  002BFA  0100               	movlb	0	; () banked
  4425  002BFC  6FBE               	movwf	(_i2c_status+10)& (0+255),b
  4426                           
  4427                           ; BSR set to: 0
  4428  002BFE  0012               	return		;funcret
  4429  002C00                     __end_of_i2c_ISR:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclath	equ	0xFFA
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           postinc0	equ	0xFEE
  4443                           wreg	equ	0xFE8
  4444                           indf1	equ	0xFE7
  4445                           postdec1	equ	0xFE5
  4446                           fsr1h	equ	0xFE2
  4447                           fsr1l	equ	0xFE1
  4448                           indf2	equ	0xFDF
  4449                           postinc2	equ	0xFDE
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function _mssp1_clearIRQ *****************
  4455 ;; Defined at:
  4456 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;		None
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		None
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4470 ;;      Params:         0       0       0       0       0       0       0
  4471 ;;      Locals:         0       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0
  4473 ;;      Totals:         0       0       0       0       0       0       0
  4474 ;;Total ram usage:        0 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    5
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		_i2c_open
  4481 ;;		_i2c_ISR
  4482 ;;		_i2c_close
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text14
  4487  00321E                     __ptext14:
  4488                           	opt stack 0
  4489  00321E                     _mssp1_clearIRQ:
  4490                           	opt stack 23
  4491                           
  4492                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;incstack = 0
  4496  00321E  969E               	bcf	3998,3,c	;volatile
  4497  003220  0012               	return		;funcret
  4498  003222                     __end_of_mssp1_clearIRQ:
  4499                           	opt stack 0
  4500                           tosu	equ	0xFFF
  4501                           tosh	equ	0xFFE
  4502                           tosl	equ	0xFFD
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           indf1	equ	0xFE7
  4514                           postdec1	equ	0xFE5
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _do_I2C_RX *****************
  4524 ;; Defined at:
  4525 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      enum E7008
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       0       0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    7
  4546 ;; This function calls:
  4547 ;;		_do_I2C_DO_NACK_RESTART
  4548 ;;		_do_I2C_DO_NACK_STOP
  4549 ;;		_i2c1_driver_getRXData
  4550 ;;		_i2c1_driver_sendACK
  4551 ;;		_returnReset
  4552 ;;		_returnStop
  4553 ;; This function is called by:
  4554 ;;		_i2c_ISR
  4555 ;;		i2_i2c_ISR
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text15
  4560  0026C2                     __ptext15:
  4561                           	opt stack 0
  4562  0026C2                     _do_I2C_RX:
  4563                           	opt stack 0
  4564                           
  4565                           ;Skip over the trampoline to the duplicate function for level 2
  4566  0026C2  B247               	btfsc	btemp,1,c
  4567  0026C4  EF9E  F013         	goto	i2_do_I2C_RX
  4568  0026C8                     _do_I2C_RX$intlevel0:
  4569                           	opt stack 18
  4570                           
  4571                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  4572                           
  4573                           ;incstack = 0
  4574  0026C8  EC13  F019         	call	_i2c1_driver_getRXData	;wreg free
  4575  0026CC  C0B6  FFD9         	movff	_i2c_status+2,fsr2l
  4576  0026D0  C0B7  FFDA         	movff	_i2c_status+3,fsr2h
  4577  0026D4  6EDF               	movwf	indf2,c
  4578  0026D6  0100               	movlb	0	; () banked
  4579  0026D8  4BB6               	infsnz	(_i2c_status+2)& (0+255),f,b
  4580  0026DA  2BB7               	incf	(_i2c_status+3)& (0+255),f,b
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  4584  0026DC  07B8               	decf	(_i2c_status+4)& (0+255),f,b
  4585  0026DE  A0D8               	btfss	status,0,c
  4586  0026E0  07B9               	decf	(_i2c_status+5)& (0+255),f,b
  4587  0026E2  51B8               	movf	(_i2c_status+4)& (0+255),w,b
  4588  0026E4  11B9               	iorwf	(_i2c_status+5)& (0+255),w,b
  4589  0026E6  B4D8               	btfsc	status,2,c
  4590  0026E8  D004               	goto	l239
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;i2c_master.c: 361: {
  4594                           ;i2c_master.c: 362: i2c1_driver_sendACK();
  4595  0026EA  EC03  F019         	call	_i2c1_driver_sendACK	;wreg free
  4596                           
  4597                           ;i2c_master.c: 363: return I2C_RCEN;
  4598  0026EE  0E05               	movlw	5
  4599                           
  4600                           ;i2c_master.c: 364: }
  4601  0026F0  0012               	return	
  4602  0026F2                     l239:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;i2c_master.c: 365: else
  4606                           ;i2c_master.c: 366: {
  4607                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  4608  0026F2  85B4               	bsf	_i2c_status& (0+255),2,b
  4609                           
  4610                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4611  0026F4  D006               	goto	l242
  4612  0026F6                     
  4613                           ;i2c_master.c: 371: case i2c_restart_read:
  4614                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  4615                           
  4616                           ; BSR set to: 0
  4617                           
  4618                           ; BSR set to: 0
  4619  0026F6  EC71  F018         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  4620  0026FA  0012               	return	
  4621  0026FC                     
  4622                           ;i2c_master.c: 375: case i2c_stop:
  4623                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  4624                           
  4625                           ;i2c_master.c: 374: case i2c_continue:
  4626  0026FC  EC78  F018         	call	_do_I2C_DO_NACK_STOP	;wreg free
  4627                           
  4628                           ;i2c_master.c: 377: }
  4629  002700  0012               	return	
  4630  002702                     l242:
  4631  002702  C0CC  F019         	movff	_i2c_status+24,returnReset@p
  4632  002706  C0CD  F01A         	movff	_i2c_status+25,returnReset@p+1
  4633  00270A  EE20  F0C0         	lfsr	2,_i2c_status+12
  4634  00270E  D801               	call	u5378
  4635  002710  D00A               	goto	u5379
  4636  002712                     u5378:
  4637  002712  0005               	push	
  4638  002714  6EFA               	movwf	pclath,c
  4639  002716  50DE               	movf	postinc2,w,c
  4640  002718  6EFD               	movwf	tosl,c
  4641  00271A  50DE               	movf	postinc2,w,c
  4642  00271C  6EFE               	movwf	tosh,c
  4643  00271E  50F8               	movf	tblptru,w,c
  4644  002720  6EFF               	movwf	tosu,c
  4645  002722  50FA               	movf	pclath,w,c
  4646  002724  0012               	return		;indir
  4647  002726                     u5379:
  4648                           
  4649                           ; Switch size 1, requested type "space"
  4650                           ; Number of cases is 4, Range of values is 1 to 4
  4651                           ; switch strategies available:
  4652                           ; Name         Instructions Cycles
  4653                           ; simple_byte           13     7 (average)
  4654                           ;	Chosen strategy is simple_byte
  4655  002726  0A01               	xorlw	1	; case 1
  4656  002728  B4D8               	btfsc	status,2,c
  4657  00272A  D7E8               	goto	l245
  4658  00272C  0A03               	xorlw	3	; case 2
  4659  00272E  B4D8               	btfsc	status,2,c
  4660  002730  D7E2               	goto	l243
  4661  002732  0A01               	xorlw	1	; case 3
  4662  002734  B4D8               	btfsc	status,2,c
  4663  002736  D7DF               	goto	l243
  4664  002738  0A07               	xorlw	7	; case 4
  4665  00273A  D7E0               	goto	l245
  4666  00273C                     __end_of_do_I2C_RX:
  4667                           	opt stack 0
  4668                           tosu	equ	0xFFF
  4669                           tosh	equ	0xFFE
  4670                           tosl	equ	0xFFD
  4671                           pclath	equ	0xFFA
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           indf1	equ	0xFE7
  4682                           postdec1	equ	0xFE5
  4683                           fsr1h	equ	0xFE2
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           fsr2h	equ	0xFDA
  4688                           fsr2l	equ	0xFD9
  4689                           status	equ	0xFD8
  4690                           
  4691 ;; *************** function _do_I2C_TX *****************
  4692 ;; Defined at:
  4693 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;		None
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;		None
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      enum E7008
  4700 ;; Registers used:
  4701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4707 ;;      Params:         0       0       0       0       0       0       0
  4708 ;;      Locals:         2       0       0       0       0       0       0
  4709 ;;      Temps:          0       0       0       0       0       0       0
  4710 ;;      Totals:         2       0       0       0       0       0       0
  4711 ;;Total ram usage:        2 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    7
  4714 ;; This function calls:
  4715 ;;		_do_I2C_SEND_RESTART_READ
  4716 ;;		_do_I2C_SEND_RESTART_WRITE
  4717 ;;		_do_I2C_SEND_STOP
  4718 ;;		_i2c1_driver_TXData
  4719 ;;		_i2c1_driver_isNACK
  4720 ;;		_returnReset
  4721 ;;		_returnStop
  4722 ;; This function is called by:
  4723 ;;		_i2c_ISR
  4724 ;;		i2_i2c_ISR
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text16
  4729  002404                     __ptext16:
  4730                           	opt stack 0
  4731  002404                     _do_I2C_TX:
  4732                           	opt stack 0
  4733                           
  4734                           ;Skip over the trampoline to the duplicate function for level 2
  4735  002404  B247               	btfsc	btemp,1,c
  4736  002406  EF96  F012         	goto	i2_do_I2C_TX
  4737  00240A                     _do_I2C_TX$intlevel0:
  4738                           	opt stack 18
  4739                           
  4740                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
  4741                           
  4742                           ;incstack = 0
  4743  00240A  EC0A  F018         	call	_i2c1_driver_isNACK	;wreg free
  4744  00240E  B0D8               	btfsc	status,0,c
  4745  002410  D00A               	goto	l224
  4746  002412  D026               	goto	l223
  4747  002414                     
  4748                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  4749  002414  EC9B  F018         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  4750  002418  0012               	return	
  4751  00241A                     
  4752                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  4753  00241A  EC94  F018         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  4754  00241E  0012               	return	
  4755  002420                     
  4756                           ;i2c_master.c: 345: case i2c_stop:
  4757                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  4758                           
  4759                           ;i2c_master.c: 344: case i2c_continue:
  4760  002420  EC86  F018         	call	_do_I2C_SEND_STOP	;wreg free
  4761                           
  4762                           ;i2c_master.c: 347: }
  4763  002424  0012               	return	
  4764  002426                     l224:
  4765  002426  C0D2  F019         	movff	_i2c_status+30,returnReset@p
  4766  00242A  C0D3  F01A         	movff	_i2c_status+31,returnReset@p+1
  4767  00242E  EE20  F0C6         	lfsr	2,_i2c_status+18
  4768  002432  D801               	call	u5348
  4769  002434  D00A               	goto	u5349
  4770  002436                     u5348:
  4771  002436  0005               	push	
  4772  002438  6EFA               	movwf	pclath,c
  4773  00243A  50DE               	movf	postinc2,w,c
  4774  00243C  6EFD               	movwf	tosl,c
  4775  00243E  50DE               	movf	postinc2,w,c
  4776  002440  6EFE               	movwf	tosh,c
  4777  002442  50F8               	movf	tblptru,w,c
  4778  002444  6EFF               	movwf	tosu,c
  4779  002446  50FA               	movf	pclath,w,c
  4780  002448  0012               	return		;indir
  4781  00244A                     u5349:
  4782                           
  4783                           ; Switch size 1, requested type "space"
  4784                           ; Number of cases is 4, Range of values is 1 to 4
  4785                           ; switch strategies available:
  4786                           ; Name         Instructions Cycles
  4787                           ; simple_byte           13     7 (average)
  4788                           ;	Chosen strategy is simple_byte
  4789  00244A  0A01               	xorlw	1	; case 1
  4790  00244C  B4D8               	btfsc	status,2,c
  4791  00244E  D7E8               	goto	l228
  4792  002450  0A03               	xorlw	3	; case 2
  4793  002452  B4D8               	btfsc	status,2,c
  4794  002454  D7DF               	goto	l225
  4795  002456  0A01               	xorlw	1	; case 3
  4796  002458  B4D8               	btfsc	status,2,c
  4797  00245A  D7DF               	goto	l227
  4798  00245C  0A07               	xorlw	7	; case 4
  4799  00245E  D7E0               	goto	l228
  4800  002460                     l223:
  4801                           
  4802                           ;i2c_master.c: 349: else
  4803                           ;i2c_master.c: 350: {
  4804                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  4805  002460  0100               	movlb	0	; () banked
  4806  002462  97B4               	bcf	_i2c_status& (0+255),3,b
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
  4810  002464  C0B6  FFD9         	movff	_i2c_status+2,fsr2l
  4811  002468  C0B7  FFDA         	movff	_i2c_status+3,fsr2h
  4812  00246C  4BB6               	infsnz	(_i2c_status+2)& (0+255),f,b
  4813  00246E  2BB7               	incf	(_i2c_status+3)& (0+255),f,b
  4814  002470  50DF               	movf	indf2,w,c
  4815  002472  ECDC  F018         	call	_i2c1_driver_TXData
  4816                           
  4817                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  4818  002476  0100               	movlb	0	; () banked
  4819  002478  07B8               	decf	(_i2c_status+4)& (0+255),f,b
  4820  00247A  A0D8               	btfss	status,0,c
  4821  00247C  07B9               	decf	(_i2c_status+5)& (0+255),f,b
  4822  00247E  51B8               	movf	(_i2c_status+4)& (0+255),w,b
  4823  002480  11B9               	iorwf	(_i2c_status+5)& (0+255),w,b
  4824  002482  A4D8               	btfss	status,2,c
  4825  002484  D004               	goto	l234
  4826                           
  4827                           ; BSR set to: 0
  4828  002486  0E00               	movlw	0
  4829  002488  6E1B               	movwf	_do_I2C_TX$362+1,c
  4830  00248A  0E06               	movlw	6
  4831  00248C  D003               	goto	L7
  4832  00248E                     l234:
  4833                           
  4834                           ; BSR set to: 0
  4835                           
  4836                           ; BSR set to: 0
  4837  00248E  0E00               	movlw	0
  4838  002490  6E1B               	movwf	_do_I2C_TX$362+1,c
  4839  002492  0E03               	movlw	3
  4840  002494                     L7:
  4841  002494  6E1A               	movwf	_do_I2C_TX$362,c
  4842                           
  4843                           ; BSR set to: 0
  4844  002496  501A               	movf	_do_I2C_TX$362,w,c
  4845                           
  4846                           ; BSR set to: 0
  4847  002498  0012               	return	
  4848  00249A                     __end_of_do_I2C_TX:
  4849                           	opt stack 0
  4850                           tosu	equ	0xFFF
  4851                           tosh	equ	0xFFE
  4852                           tosl	equ	0xFFD
  4853                           pclath	equ	0xFFA
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           intcon	equ	0xFF2
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           indf1	equ	0xFE7
  4864                           postdec1	equ	0xFE5
  4865                           fsr1h	equ	0xFE2
  4866                           fsr1l	equ	0xFE1
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  4874 ;; Defined at:
  4875 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      enum E7008
  4882 ;; Registers used:
  4883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4889 ;;      Params:         0       0       0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    7
  4896 ;; This function calls:
  4897 ;;		_do_I2C_SEND_RESTART
  4898 ;;		_do_I2C_SEND_STOP
  4899 ;;		_returnReset
  4900 ;;		_returnStop
  4901 ;; This function is called by:
  4902 ;;		_i2c_ISR
  4903 ;;		i2_i2c_ISR
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text17
  4908  002C00                     __ptext17:
  4909                           	opt stack 0
  4910  002C00                     _do_I2C_DO_ADDRESS_NACK:
  4911                           	opt stack 0
  4912                           
  4913                           ;Skip over the trampoline to the duplicate function for level 2
  4914  002C00  B247               	btfsc	btemp,1,c
  4915  002C02  EF71  F016         	goto	i2_do_I2C_DO_ADDRESS_NACK
  4916  002C06                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  4917                           	opt stack 18
  4918                           
  4919                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  4920                           
  4921                           ;incstack = 0
  4922  002C06  0100               	movlb	0	; () banked
  4923  002C08  97B4               	bcf	_i2c_status& (0+255),3,b
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  4927  002C0A  0E02               	movlw	2
  4928  002C0C  6FBF               	movwf	(_i2c_status+11)& (0+255),b
  4929                           
  4930                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  4931  002C0E  D006               	goto	l215
  4932  002C10                     
  4933                           ;i2c_master.c: 326: case i2c_restart_write:
  4934                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  4935                           
  4936                           ; BSR set to: 0
  4937                           
  4938                           ; BSR set to: 0
  4939  002C10  EC8D  F018         	call	_do_I2C_SEND_RESTART	;wreg free
  4940  002C14  0012               	return	
  4941  002C16                     
  4942                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  4943  002C16  EC86  F018         	call	_do_I2C_SEND_STOP	;wreg free
  4944                           
  4945                           ;i2c_master.c: 330: }
  4946  002C1A  0012               	return	
  4947  002C1C                     l215:
  4948  002C1C  C0D0  F019         	movff	_i2c_status+28,returnReset@p
  4949  002C20  C0D1  F01A         	movff	_i2c_status+29,returnReset@p+1
  4950  002C24  EE20  F0C4         	lfsr	2,_i2c_status+16
  4951  002C28  D801               	call	u5328
  4952  002C2A  D00A               	goto	u5329
  4953  002C2C                     u5328:
  4954  002C2C  0005               	push	
  4955  002C2E  6EFA               	movwf	pclath,c
  4956  002C30  50DE               	movf	postinc2,w,c
  4957  002C32  6EFD               	movwf	tosl,c
  4958  002C34  50DE               	movf	postinc2,w,c
  4959  002C36  6EFE               	movwf	tosh,c
  4960  002C38  50F8               	movf	tblptru,w,c
  4961  002C3A  6EFF               	movwf	tosu,c
  4962  002C3C  50FA               	movf	pclath,w,c
  4963  002C3E  0012               	return		;indir
  4964  002C40                     u5329:
  4965                           
  4966                           ; Switch size 1, requested type "space"
  4967                           ; Number of cases is 2, Range of values is 2 to 3
  4968                           ; switch strategies available:
  4969                           ; Name         Instructions Cycles
  4970                           ; simple_byte            7     4 (average)
  4971                           ;	Chosen strategy is simple_byte
  4972  002C40  0A02               	xorlw	2	; case 2
  4973  002C42  B4D8               	btfsc	status,2,c
  4974  002C44  D7E5               	goto	l216
  4975  002C46  0A01               	xorlw	1	; case 3
  4976  002C48  B4D8               	btfsc	status,2,c
  4977  002C4A  D7E2               	goto	l216
  4978  002C4C  D7E4               	goto	l219
  4979  002C4E                     __end_of_do_I2C_DO_ADDRESS_NACK:
  4980                           	opt stack 0
  4981                           tosu	equ	0xFFF
  4982                           tosh	equ	0xFFE
  4983                           tosl	equ	0xFFD
  4984                           pclath	equ	0xFFA
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           intcon	equ	0xFF2
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           indf1	equ	0xFE7
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5005 ;; Defined at:
  5006 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      enum E7008
  5013 ;; Registers used:
  5014 ;;		wreg, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5020 ;;      Params:         0       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    6
  5027 ;; This function calls:
  5028 ;;		_i2c1_driver_sendNACK
  5029 ;; This function is called by:
  5030 ;;		_do_I2C_RX
  5031 ;;		_i2c_ISR
  5032 ;;		i2_i2c_ISR
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text18
  5037  0030E2                     __ptext18:
  5038                           	opt stack 0
  5039  0030E2                     _do_I2C_DO_NACK_RESTART:
  5040                           	opt stack 0
  5041                           
  5042                           ;Skip over the trampoline to the duplicate function for level 2
  5043  0030E2  B247               	btfsc	btemp,1,c
  5044  0030E4  EFE0  F018         	goto	i2_do_I2C_DO_NACK_RESTART
  5045  0030E8                     _do_I2C_DO_NACK_RESTART$intlevel0:
  5046                           	opt stack 18
  5047                           
  5048                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
  5049                           
  5050                           ;incstack = 0
  5051  0030E8  EC00  F019         	call	_i2c1_driver_sendNACK	;wreg free
  5052                           
  5053                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  5054  0030EC  0E09               	movlw	9
  5055  0030EE  0012               	return	
  5056  0030F0                     __end_of_do_I2C_DO_NACK_RESTART:
  5057                           	opt stack 0
  5058                           tosu	equ	0xFFF
  5059                           tosh	equ	0xFFE
  5060                           tosl	equ	0xFFD
  5061                           pclath	equ	0xFFA
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           prodh	equ	0xFF4
  5067                           prodl	equ	0xFF3
  5068                           intcon	equ	0xFF2
  5069                           postinc0	equ	0xFEE
  5070                           wreg	equ	0xFE8
  5071                           indf1	equ	0xFE7
  5072                           postdec1	equ	0xFE5
  5073                           fsr1h	equ	0xFE2
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5082 ;; Defined at:
  5083 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      enum E7008
  5090 ;; Registers used:
  5091 ;;		wreg, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5097 ;;      Params:         0       0       0       0       0       0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0
  5100 ;;      Totals:         0       0       0       0       0       0       0
  5101 ;;Total ram usage:        0 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    6
  5104 ;; This function calls:
  5105 ;;		_i2c1_driver_sendNACK
  5106 ;; This function is called by:
  5107 ;;		_do_I2C_RX
  5108 ;;		_i2c_ISR
  5109 ;;		i2_i2c_ISR
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text19
  5114  0030F0                     __ptext19:
  5115                           	opt stack 0
  5116  0030F0                     _do_I2C_DO_NACK_STOP:
  5117                           	opt stack 0
  5118                           
  5119                           ;Skip over the trampoline to the duplicate function for level 2
  5120  0030F0  B247               	btfsc	btemp,1,c
  5121  0030F2  EFE4  F018         	goto	i2_do_I2C_DO_NACK_STOP
  5122  0030F6                     _do_I2C_DO_NACK_STOP$intlevel0:
  5123                           	opt stack 18
  5124                           
  5125                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
  5126                           
  5127                           ;incstack = 0
  5128  0030F6  EC00  F019         	call	_i2c1_driver_sendNACK	;wreg free
  5129                           
  5130                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  5131  0030FA  0E0A               	movlw	10
  5132  0030FC  0012               	return	
  5133  0030FE                     __end_of_do_I2C_DO_NACK_STOP:
  5134                           	opt stack 0
  5135                           tosu	equ	0xFFF
  5136                           tosh	equ	0xFFE
  5137                           tosl	equ	0xFFD
  5138                           pclath	equ	0xFFA
  5139                           tblptru	equ	0xFF8
  5140                           tblptrh	equ	0xFF7
  5141                           tblptrl	equ	0xFF6
  5142                           tablat	equ	0xFF5
  5143                           prodh	equ	0xFF4
  5144                           prodl	equ	0xFF3
  5145                           intcon	equ	0xFF2
  5146                           postinc0	equ	0xFEE
  5147                           wreg	equ	0xFE8
  5148                           indf1	equ	0xFE7
  5149                           postdec1	equ	0xFE5
  5150                           fsr1h	equ	0xFE2
  5151                           fsr1l	equ	0xFE1
  5152                           indf2	equ	0xFDF
  5153                           postinc2	equ	0xFDE
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _do_I2C_DO_ACK *****************
  5159 ;; Defined at:
  5160 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      enum E7008
  5167 ;; Registers used:
  5168 ;;		wreg, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5174 ;;      Params:         0       0       0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    6
  5181 ;; This function calls:
  5182 ;;		_i2c1_driver_sendACK
  5183 ;; This function is called by:
  5184 ;;		_i2c_ISR
  5185 ;;		i2_i2c_ISR
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text20
  5190  0030FE                     __ptext20:
  5191                           	opt stack 0
  5192  0030FE                     _do_I2C_DO_ACK:
  5193                           	opt stack 0
  5194                           
  5195                           ;Skip over the trampoline to the duplicate function for level 2
  5196  0030FE  B247               	btfsc	btemp,1,c
  5197  003100  EFE8  F018         	goto	i2_do_I2C_DO_ACK
  5198  003104                     _do_I2C_DO_ACK$intlevel0:
  5199                           	opt stack 19
  5200                           
  5201                           ;i2c_master.c: 301: i2c1_driver_sendACK();
  5202                           
  5203                           ;incstack = 0
  5204  003104  EC03  F019         	call	_i2c1_driver_sendACK	;wreg free
  5205                           
  5206                           ;i2c_master.c: 302: return I2C_RCEN;
  5207  003108  0E05               	movlw	5
  5208  00310A  0012               	return	
  5209  00310C                     __end_of_do_I2C_DO_ACK:
  5210                           	opt stack 0
  5211                           tosu	equ	0xFFF
  5212                           tosh	equ	0xFFE
  5213                           tosl	equ	0xFFD
  5214                           pclath	equ	0xFFA
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           intcon	equ	0xFF2
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           indf1	equ	0xFE7
  5225                           postdec1	equ	0xFE5
  5226                           fsr1h	equ	0xFE2
  5227                           fsr1l	equ	0xFE1
  5228                           indf2	equ	0xFDF
  5229                           postinc2	equ	0xFDE
  5230                           fsr2h	equ	0xFDA
  5231                           fsr2l	equ	0xFD9
  5232                           status	equ	0xFD8
  5233                           
  5234 ;; *************** function _do_I2C_RCEN *****************
  5235 ;; Defined at:
  5236 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      enum E7008
  5243 ;; Registers used:
  5244 ;;		wreg, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5250 ;;      Params:         0       0       0       0       0       0       0
  5251 ;;      Locals:         0       0       0       0       0       0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0
  5253 ;;      Totals:         0       0       0       0       0       0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    6
  5257 ;; This function calls:
  5258 ;;		_i2c1_driver_startRX
  5259 ;; This function is called by:
  5260 ;;		_i2c_ISR
  5261 ;;		i2_i2c_ISR
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text21
  5266  00307E                     __ptext21:
  5267                           	opt stack 0
  5268  00307E                     _do_I2C_RCEN:
  5269                           	opt stack 0
  5270                           
  5271                           ;Skip over the trampoline to the duplicate function for level 2
  5272  00307E  B247               	btfsc	btemp,1,c
  5273  003080  EFA9  F018         	goto	i2_do_I2C_RCEN
  5274  003084                     _do_I2C_RCEN$intlevel0:
  5275                           	opt stack 19
  5276                           
  5277                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  5278                           
  5279                           ;incstack = 0
  5280  003084  0100               	movlb	0	; () banked
  5281  003086  97B4               	bcf	_i2c_status& (0+255),3,b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;i2c_master.c: 295: i2c1_driver_startRX();
  5285  003088  EC15  F019         	call	_i2c1_driver_startRX	;wreg free
  5286                           
  5287                           ;i2c_master.c: 296: return I2C_RX;
  5288  00308C  0E04               	movlw	4
  5289  00308E  0012               	return	
  5290  003090                     __end_of_do_I2C_RCEN:
  5291                           	opt stack 0
  5292                           tosu	equ	0xFFF
  5293                           tosh	equ	0xFFE
  5294                           tosl	equ	0xFFD
  5295                           pclath	equ	0xFFA
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           indf1	equ	0xFE7
  5306                           postdec1	equ	0xFE5
  5307                           fsr1h	equ	0xFE2
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5316 ;; Defined at:
  5317 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      enum E7008
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5331 ;;      Params:         0       0       0       0       0       0       0
  5332 ;;      Locals:         0       0       0       0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0
  5334 ;;      Totals:         0       0       0       0       0       0       0
  5335 ;;Total ram usage:        0 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    6
  5338 ;; This function calls:
  5339 ;;		_i2c1_driver_TXData
  5340 ;; This function is called by:
  5341 ;;		_i2c_ISR
  5342 ;;		i2_i2c_ISR
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text22
  5347  002FD2                     __ptext22:
  5348                           	opt stack 0
  5349  002FD2                     _do_I2C_SEND_ADR_WRITE:
  5350                           	opt stack 0
  5351                           
  5352                           ;Skip over the trampoline to the duplicate function for level 2
  5353  002FD2  B247               	btfsc	btemp,1,c
  5354  002FD4  EF59  F018         	goto	i2_do_I2C_SEND_ADR_WRITE
  5355  002FD8                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  5356                           	opt stack 19
  5357                           
  5358                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  5359                           
  5360                           ;incstack = 0
  5361  002FD8  0100               	movlb	0	; () banked
  5362  002FDA  87B4               	bsf	_i2c_status& (0+255),3,b
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
  5366  002FDC  51B5               	movf	(_i2c_status+1)& (0+255),w,b
  5367  002FDE  25B5               	addwf	(_i2c_status+1)& (0+255),w,b
  5368  002FE0  ECDC  F018         	call	_i2c1_driver_TXData
  5369                           
  5370                           ;i2c_master.c: 289: return I2C_TX;
  5371  002FE4  0E03               	movlw	3
  5372  002FE6  0012               	return	
  5373  002FE8                     __end_of_do_I2C_SEND_ADR_WRITE:
  5374                           	opt stack 0
  5375                           tosu	equ	0xFFF
  5376                           tosh	equ	0xFFE
  5377                           tosl	equ	0xFFD
  5378                           pclath	equ	0xFFA
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           postinc0	equ	0xFEE
  5387                           wreg	equ	0xFE8
  5388                           indf1	equ	0xFE7
  5389                           postdec1	equ	0xFE5
  5390                           fsr1h	equ	0xFE2
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5399 ;; Defined at:
  5400 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      enum E7008
  5407 ;; Registers used:
  5408 ;;		wreg, status,0, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5414 ;;      Params:         0       0       0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    6
  5421 ;; This function calls:
  5422 ;;		_i2c1_driver_TXData
  5423 ;; This function is called by:
  5424 ;;		_i2c_ISR
  5425 ;;		i2_i2c_ISR
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           	psect	text23
  5430  002FE8                     __ptext23:
  5431                           	opt stack 0
  5432  002FE8                     _do_I2C_SEND_ADR_READ:
  5433                           	opt stack 0
  5434                           
  5435                           ;Skip over the trampoline to the duplicate function for level 2
  5436  002FE8  B247               	btfsc	btemp,1,c
  5437  002FEA  EF61  F018         	goto	i2_do_I2C_SEND_ADR_READ
  5438  002FEE                     _do_I2C_SEND_ADR_READ$intlevel0:
  5439                           	opt stack 19
  5440                           
  5441                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  5442                           
  5443                           ;incstack = 0
  5444  002FEE  0100               	movlb	0	; () banked
  5445  002FF0  87B4               	bsf	_i2c_status& (0+255),3,b
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  5449  002FF2  80D8               	bsf	status,0,c
  5450  002FF4  35B5               	rlcf	(_i2c_status+1)& (0+255),w,b
  5451  002FF6  ECDC  F018         	call	_i2c1_driver_TXData
  5452                           
  5453                           ;i2c_master.c: 282: return I2C_RCEN;
  5454  002FFA  0E05               	movlw	5
  5455  002FFC  0012               	return	
  5456  002FFE                     __end_of_do_I2C_SEND_ADR_READ:
  5457                           	opt stack 0
  5458                           tosu	equ	0xFFF
  5459                           tosh	equ	0xFFE
  5460                           tosl	equ	0xFFD
  5461                           pclath	equ	0xFFA
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           indf1	equ	0xFE7
  5472                           postdec1	equ	0xFE5
  5473                           fsr1h	equ	0xFE2
  5474                           fsr1l	equ	0xFE1
  5475                           indf2	equ	0xFDF
  5476                           postinc2	equ	0xFDE
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _do_I2C_SEND_STOP *****************
  5482 ;; Defined at:
  5483 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      enum E7008
  5490 ;; Registers used:
  5491 ;;		wreg, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5497 ;;      Params:         0       0       0       0       0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    6
  5504 ;; This function calls:
  5505 ;;		_i2c1_driver_stop
  5506 ;; This function is called by:
  5507 ;;		_do_I2C_DO_ADDRESS_NACK
  5508 ;;		_do_I2C_TX
  5509 ;;		_do_I2C_TX_EMPTY
  5510 ;;		_i2c_ISR
  5511 ;;		i2_i2c_ISR
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text24
  5516  00310C                     __ptext24:
  5517                           	opt stack 0
  5518  00310C                     _do_I2C_SEND_STOP:
  5519                           	opt stack 0
  5520                           
  5521                           ;Skip over the trampoline to the duplicate function for level 2
  5522  00310C  B247               	btfsc	btemp,1,c
  5523  00310E  EFEC  F018         	goto	i2_do_I2C_SEND_STOP
  5524  003112                     _do_I2C_SEND_STOP$intlevel0:
  5525                           	opt stack 18
  5526                           
  5527                           ;i2c_master.c: 274: i2c1_driver_stop();
  5528                           
  5529                           ;incstack = 0
  5530  003112  EC17  F019         	call	_i2c1_driver_stop	;wreg free
  5531                           
  5532                           ;i2c_master.c: 275: return I2C_IDLE;
  5533  003116  0E00               	movlw	0
  5534  003118  0012               	return	
  5535  00311A                     __end_of_do_I2C_SEND_STOP:
  5536                           	opt stack 0
  5537                           tosu	equ	0xFFF
  5538                           tosh	equ	0xFFE
  5539                           tosl	equ	0xFFD
  5540                           pclath	equ	0xFFA
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           postinc0	equ	0xFEE
  5549                           wreg	equ	0xFE8
  5550                           indf1	equ	0xFE7
  5551                           postdec1	equ	0xFE5
  5552                           fsr1h	equ	0xFE2
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function _do_I2C_SEND_RESTART *****************
  5561 ;; Defined at:
  5562 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      enum E7008
  5569 ;; Registers used:
  5570 ;;		wreg, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5576 ;;      Params:         0       0       0       0       0       0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    6
  5583 ;; This function calls:
  5584 ;;		_i2c1_driver_restart
  5585 ;; This function is called by:
  5586 ;;		_do_I2C_DO_ADDRESS_NACK
  5587 ;;		_do_I2C_TX_EMPTY
  5588 ;;		_i2c_ISR
  5589 ;;		i2_i2c_ISR
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text25
  5594  00311A                     __ptext25:
  5595                           	opt stack 0
  5596  00311A                     _do_I2C_SEND_RESTART:
  5597                           	opt stack 0
  5598                           
  5599                           ;Skip over the trampoline to the duplicate function for level 2
  5600  00311A  B247               	btfsc	btemp,1,c
  5601  00311C  EFF0  F018         	goto	i2_do_I2C_SEND_RESTART
  5602  003120                     _do_I2C_SEND_RESTART$intlevel0:
  5603                           	opt stack 18
  5604                           
  5605                           ;i2c_master.c: 268: i2c1_driver_restart();
  5606                           
  5607                           ;incstack = 0
  5608  003120  EC19  F019         	call	_i2c1_driver_restart	;wreg free
  5609                           
  5610                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  5611  003124  0E01               	movlw	1
  5612  003126  0012               	return	
  5613  003128                     __end_of_do_I2C_SEND_RESTART:
  5614                           	opt stack 0
  5615                           tosu	equ	0xFFF
  5616                           tosh	equ	0xFFE
  5617                           tosl	equ	0xFFD
  5618                           pclath	equ	0xFFA
  5619                           tblptru	equ	0xFF8
  5620                           tblptrh	equ	0xFF7
  5621                           tblptrl	equ	0xFF6
  5622                           tablat	equ	0xFF5
  5623                           prodh	equ	0xFF4
  5624                           prodl	equ	0xFF3
  5625                           intcon	equ	0xFF2
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           indf1	equ	0xFE7
  5629                           postdec1	equ	0xFE5
  5630                           fsr1h	equ	0xFE2
  5631                           fsr1l	equ	0xFE1
  5632                           indf2	equ	0xFDF
  5633                           postinc2	equ	0xFDE
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5639 ;; Defined at:
  5640 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      enum E7008
  5647 ;; Registers used:
  5648 ;;		wreg, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5654 ;;      Params:         0       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0
  5657 ;;      Totals:         0       0       0       0       0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    6
  5661 ;; This function calls:
  5662 ;;		_i2c1_driver_restart
  5663 ;; This function is called by:
  5664 ;;		_do_I2C_TX
  5665 ;;		_i2c_ISR
  5666 ;;		i2_i2c_ISR
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text26
  5671  003128                     __ptext26:
  5672                           	opt stack 0
  5673  003128                     _do_I2C_SEND_RESTART_WRITE:
  5674                           	opt stack 0
  5675                           
  5676                           ;Skip over the trampoline to the duplicate function for level 2
  5677  003128  B247               	btfsc	btemp,1,c
  5678  00312A  EFF4  F018         	goto	i2_do_I2C_SEND_RESTART_WRITE
  5679  00312E                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  5680                           	opt stack 18
  5681                           
  5682                           ;i2c_master.c: 262: i2c1_driver_restart();
  5683                           
  5684                           ;incstack = 0
  5685  00312E  EC19  F019         	call	_i2c1_driver_restart	;wreg free
  5686                           
  5687                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  5688  003132  0E02               	movlw	2
  5689  003134  0012               	return	
  5690  003136                     __end_of_do_I2C_SEND_RESTART_WRITE:
  5691                           	opt stack 0
  5692                           tosu	equ	0xFFF
  5693                           tosh	equ	0xFFE
  5694                           tosl	equ	0xFFD
  5695                           pclath	equ	0xFFA
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           intcon	equ	0xFF2
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           indf1	equ	0xFE7
  5706                           postdec1	equ	0xFE5
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5716 ;; Defined at:
  5717 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      enum E7008
  5724 ;; Registers used:
  5725 ;;		wreg, cstack
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5731 ;;      Params:         0       0       0       0       0       0       0
  5732 ;;      Locals:         0       0       0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0
  5734 ;;      Totals:         0       0       0       0       0       0       0
  5735 ;;Total ram usage:        0 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    6
  5738 ;; This function calls:
  5739 ;;		_i2c1_driver_restart
  5740 ;; This function is called by:
  5741 ;;		_do_I2C_TX
  5742 ;;		_i2c_ISR
  5743 ;;		i2_i2c_ISR
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text27
  5748  003136                     __ptext27:
  5749                           	opt stack 0
  5750  003136                     _do_I2C_SEND_RESTART_READ:
  5751                           	opt stack 0
  5752                           
  5753                           ;Skip over the trampoline to the duplicate function for level 2
  5754  003136  B247               	btfsc	btemp,1,c
  5755  003138  EFF8  F018         	goto	i2_do_I2C_SEND_RESTART_READ
  5756  00313C                     _do_I2C_SEND_RESTART_READ$intlevel0:
  5757                           	opt stack 18
  5758                           
  5759                           ;i2c_master.c: 256: i2c1_driver_restart();
  5760                           
  5761                           ;incstack = 0
  5762  00313C  EC19  F019         	call	_i2c1_driver_restart	;wreg free
  5763                           
  5764                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  5765  003140  0E01               	movlw	1
  5766  003142  0012               	return	
  5767  003144                     __end_of_do_I2C_SEND_RESTART_READ:
  5768                           	opt stack 0
  5769                           tosu	equ	0xFFF
  5770                           tosh	equ	0xFFE
  5771                           tosl	equ	0xFFD
  5772                           pclath	equ	0xFFA
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postdec1	equ	0xFE5
  5784                           fsr1h	equ	0xFE2
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _do_I2C_IDLE *****************
  5793 ;; Defined at:
  5794 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      enum E7008
  5801 ;; Registers used:
  5802 ;;		wreg, status,2
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5808 ;;      Params:         0       0       0       0       0       0       0
  5809 ;;      Locals:         0       0       0       0       0       0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0
  5811 ;;      Totals:         0       0       0       0       0       0       0
  5812 ;;Total ram usage:        0 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    5
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_i2c_ISR
  5819 ;;		i2_i2c_ISR
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text28
  5824  003090                     __ptext28:
  5825                           	opt stack 0
  5826  003090                     _do_I2C_IDLE:
  5827                           	opt stack 0
  5828                           
  5829                           ;Skip over the trampoline to the duplicate function for level 2
  5830  003090  B247               	btfsc	btemp,1,c
  5831  003092  EFAF  F018         	goto	i2_do_I2C_IDLE
  5832  003096                     _do_I2C_IDLE$intlevel0:
  5833                           	opt stack 20
  5834                           
  5835                           ;i2c_master.c: 249: i2c_status.busy = 0;
  5836                           
  5837                           ;incstack = 0
  5838  003096  0100               	movlb	0	; () banked
  5839  003098  91B4               	bcf	_i2c_status& (0+255),0,b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  5843  00309A  0E00               	movlw	0
  5844  00309C  6FBF               	movwf	(_i2c_status+11)& (0+255),b
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;i2c_master.c: 251: return I2C_RESET;
  5848  00309E  0E0E               	movlw	14
  5849  0030A0  0012               	return	
  5850  0030A2                     __end_of_do_I2C_IDLE:
  5851                           	opt stack 0
  5852                           tosu	equ	0xFFF
  5853                           tosh	equ	0xFFE
  5854                           tosl	equ	0xFFD
  5855                           pclath	equ	0xFFA
  5856                           tblptru	equ	0xFF8
  5857                           tblptrh	equ	0xFF7
  5858                           tblptrl	equ	0xFF6
  5859                           tablat	equ	0xFF5
  5860                           prodh	equ	0xFF4
  5861                           prodl	equ	0xFF3
  5862                           intcon	equ	0xFF2
  5863                           postinc0	equ	0xFEE
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           postdec1	equ	0xFE5
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function _do_I2C_RESET *****************
  5876 ;; Defined at:
  5877 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;		None
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;		None
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      enum E7008
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5891 ;;      Params:         0       0       0       0       0       0       0
  5892 ;;      Locals:         0       0       0       0       0       0       0
  5893 ;;      Temps:          0       0       0       0       0       0       0
  5894 ;;      Totals:         0       0       0       0       0       0       0
  5895 ;;Total ram usage:        0 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    6
  5898 ;; This function calls:
  5899 ;;		_i2c1_driver_resetBus
  5900 ;; This function is called by:
  5901 ;;		_i2c_ISR
  5902 ;;		i2_i2c_ISR
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text29
  5907  002FFE                     __ptext29:
  5908                           	opt stack 0
  5909  002FFE                     _do_I2C_RESET:
  5910                           	opt stack 0
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;Skip over the trampoline to the duplicate function for level 2
  5914  002FFE  B247               	btfsc	btemp,1,c
  5915  003000  EF69  F018         	goto	i2_do_I2C_RESET
  5916  003004                     _do_I2C_RESET$intlevel0:
  5917                           	opt stack 19
  5918                           
  5919                           ;i2c_master.c: 241: i2c1_driver_resetBus();
  5920                           
  5921                           ;incstack = 0
  5922  003004  EC31  F019         	call	_i2c1_driver_resetBus	;wreg free
  5923                           
  5924                           ;i2c_master.c: 242: i2c_status.busy = 0;
  5925  003008  0100               	movlb	0	; () banked
  5926  00300A  91B4               	bcf	_i2c_status& (0+255),0,b
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  5930  00300C  0E00               	movlw	0
  5931  00300E  6FBF               	movwf	(_i2c_status+11)& (0+255),b
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;i2c_master.c: 244: return I2C_RESET;
  5935  003010  0E0E               	movlw	14
  5936  003012  0012               	return	
  5937  003014                     __end_of_do_I2C_RESET:
  5938                           	opt stack 0
  5939                           tosu	equ	0xFFF
  5940                           tosh	equ	0xFFE
  5941                           tosl	equ	0xFFD
  5942                           pclath	equ	0xFFA
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf1	equ	0xFE7
  5953                           postdec1	equ	0xFE5
  5954                           fsr1h	equ	0xFE2
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _do_I2C_TX_EMPTY *****************
  5963 ;; Defined at:
  5964 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      enum E7008
  5971 ;; Registers used:
  5972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5978 ;;      Params:         0       0       0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    7
  5985 ;; This function calls:
  5986 ;;		_do_I2C_SEND_RESTART
  5987 ;;		_do_I2C_SEND_STOP
  5988 ;;		_mssp1_setIRQ
  5989 ;;		_returnReset
  5990 ;;		_returnStop
  5991 ;; This function is called by:
  5992 ;;		_i2c_ISR
  5993 ;;		i2_i2c_ISR
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text30
  5998  00294E                     __ptext30:
  5999                           	opt stack 0
  6000  00294E                     _do_I2C_TX_EMPTY:
  6001                           	opt stack 0
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;Skip over the trampoline to the duplicate function for level 2
  6005  00294E  B247               	btfsc	btemp,1,c
  6006  002950  EF32  F015         	goto	i2_do_I2C_TX_EMPTY
  6007  002954                     _do_I2C_TX_EMPTY$intlevel0:
  6008                           	opt stack 18
  6009                           
  6010                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  6011                           
  6012                           ;incstack = 0
  6013  002954  0100               	movlb	0	; () banked
  6014  002956  85B4               	bsf	_i2c_status& (0+255),2,b
  6015                           
  6016                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6017  002958  D00A               	goto	l251
  6018  00295A                     
  6019                           ;i2c_master.c: 388: case i2c_restart_write:
  6020                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  6021                           
  6022                           ; BSR set to: 0
  6023                           
  6024                           ; BSR set to: 0
  6025  00295A  EC8D  F018         	call	_do_I2C_SEND_RESTART	;wreg free
  6026  00295E  0012               	return	
  6027  002960                     
  6028                           ;i2c_master.c: 391: mssp1_setIRQ();
  6029  002960  EC11  F019         	call	_mssp1_setIRQ	;wreg free
  6030                           
  6031                           ;i2c_master.c: 392: return I2C_TX;
  6032  002964  0E03               	movlw	3
  6033  002966  0012               	return	
  6034  002968                     
  6035                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  6036                           
  6037                           ;i2c_master.c: 394: case i2c_stop:
  6038  002968  EC86  F018         	call	_do_I2C_SEND_STOP	;wreg free
  6039                           
  6040                           ;i2c_master.c: 396: }
  6041  00296C  0012               	return	
  6042  00296E                     l251:
  6043  00296E  C0CC  F019         	movff	_i2c_status+24,returnReset@p
  6044  002972  C0CD  F01A         	movff	_i2c_status+25,returnReset@p+1
  6045  002976  EE20  F0C0         	lfsr	2,_i2c_status+12
  6046  00297A  D801               	call	u5388
  6047  00297C  D00A               	goto	u5389
  6048  00297E                     u5388:
  6049  00297E  0005               	push	
  6050  002980  6EFA               	movwf	pclath,c
  6051  002982  50DE               	movf	postinc2,w,c
  6052  002984  6EFD               	movwf	tosl,c
  6053  002986  50DE               	movf	postinc2,w,c
  6054  002988  6EFE               	movwf	tosh,c
  6055  00298A  50F8               	movf	tblptru,w,c
  6056  00298C  6EFF               	movwf	tosu,c
  6057  00298E  50FA               	movf	pclath,w,c
  6058  002990  0012               	return		;indir
  6059  002992                     u5389:
  6060                           
  6061                           ; Switch size 1, requested type "space"
  6062                           ; Number of cases is 4, Range of values is 1 to 4
  6063                           ; switch strategies available:
  6064                           ; Name         Instructions Cycles
  6065                           ; simple_byte           13     7 (average)
  6066                           ;	Chosen strategy is simple_byte
  6067  002992  0A01               	xorlw	1	; case 1
  6068  002994  B4D8               	btfsc	status,2,c
  6069  002996  D7E8               	goto	l256
  6070  002998  0A03               	xorlw	3	; case 2
  6071  00299A  B4D8               	btfsc	status,2,c
  6072  00299C  D7DE               	goto	l252
  6073  00299E  0A01               	xorlw	1	; case 3
  6074  0029A0  B4D8               	btfsc	status,2,c
  6075  0029A2  D7DB               	goto	l252
  6076  0029A4  0A07               	xorlw	7	; case 4
  6077  0029A6  B4D8               	btfsc	status,2,c
  6078  0029A8  D7DB               	goto	l255
  6079  0029AA  D7DE               	goto	l256
  6080  0029AC                     __end_of_do_I2C_TX_EMPTY:
  6081                           	opt stack 0
  6082                           tosu	equ	0xFFF
  6083                           tosh	equ	0xFFE
  6084                           tosl	equ	0xFFD
  6085                           pclath	equ	0xFFA
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           postinc0	equ	0xFEE
  6094                           wreg	equ	0xFE8
  6095                           indf1	equ	0xFE7
  6096                           postdec1	equ	0xFE5
  6097                           fsr1h	equ	0xFE2
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function _mssp1_setIRQ *****************
  6106 ;; Defined at:
  6107 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		None
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6121 ;;      Params:         0       0       0       0       0       0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0
  6124 ;;      Totals:         0       0       0       0       0       0       0
  6125 ;;Total ram usage:        0 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    5
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_do_I2C_TX_EMPTY
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text31
  6136  003222                     __ptext31:
  6137                           	opt stack 0
  6138  003222                     _mssp1_setIRQ:
  6139                           	opt stack 19
  6140                           
  6141                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  6142                           
  6143                           ;incstack = 0
  6144  003222  869E               	bsf	3998,3,c	;volatile
  6145  003224  0012               	return		;funcret
  6146  003226                     __end_of_mssp1_setIRQ:
  6147                           	opt stack 0
  6148                           tosu	equ	0xFFF
  6149                           tosh	equ	0xFFE
  6150                           tosl	equ	0xFFD
  6151                           pclath	equ	0xFFA
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           postinc0	equ	0xFEE
  6160                           wreg	equ	0xFE8
  6161                           indf1	equ	0xFE7
  6162                           postdec1	equ	0xFE5
  6163                           fsr1h	equ	0xFE2
  6164                           fsr1l	equ	0xFE1
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171 ;; *************** function _i2c1_driver_isNACK *****************
  6172 ;; Defined at:
  6173 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;		None               void
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6187 ;;      Params:         0       0       0       0       0       0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0
  6189 ;;      Temps:          1       0       0       0       0       0       0
  6190 ;;      Totals:         1       0       0       0       0       0       0
  6191 ;;Total ram usage:        1 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    5
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_do_I2C_TX
  6198 ;;		_i2c_ISR
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text32
  6203  003014                     __ptext32:
  6204                           	opt stack 0
  6205  003014                     _i2c1_driver_isNACK:
  6206                           	opt stack 20
  6207                           
  6208                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  6209                           
  6210                           ;incstack = 0
  6211  003014  50C5               	movf	4037,w,c	;volatile
  6212  003016  0BBF               	andlw	-65
  6213  003018  0940               	iorlw	64
  6214  00301A  6EC5               	movwf	4037,c	;volatile
  6215  00301C  38C5               	swapf	4037,w,c	;volatile
  6216  00301E  32E8               	rrcf	wreg,f,c
  6217  003020  32E8               	rrcf	wreg,f,c
  6218  003022  0B01               	andlw	1
  6219  003024  6E19               	movwf	??_i2c1_driver_isNACK& (0+255),c
  6220  003026  3019               	rrcf	??_i2c1_driver_isNACK,w,c
  6221  003028  0012               	return	
  6222  00302A                     __end_of_i2c1_driver_isNACK:
  6223                           	opt stack 0
  6224                           tosu	equ	0xFFF
  6225                           tosh	equ	0xFFE
  6226                           tosl	equ	0xFFD
  6227                           pclath	equ	0xFFA
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           indf1	equ	0xFE7
  6238                           postdec1	equ	0xFE5
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _i2c1_driver_TXData *****************
  6248 ;; Defined at:
  6249 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;  d               1    wreg     unsigned char 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  d               1   24[COMRAM] unsigned char 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6263 ;;      Params:         0       0       0       0       0       0       0
  6264 ;;      Locals:         1       0       0       0       0       0       0
  6265 ;;      Temps:          0       0       0       0       0       0       0
  6266 ;;      Totals:         1       0       0       0       0       0       0
  6267 ;;Total ram usage:        1 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    5
  6270 ;; This function calls:
  6271 ;;		Nothing
  6272 ;; This function is called by:
  6273 ;;		_do_I2C_SEND_ADR_READ
  6274 ;;		_do_I2C_SEND_ADR_WRITE
  6275 ;;		_do_I2C_TX
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text33
  6280  0031B8                     __ptext33:
  6281                           	opt stack 0
  6282  0031B8                     _i2c1_driver_TXData:
  6283                           	opt stack 19
  6284                           
  6285                           ;incstack = 0
  6286                           ;i2c1_driver_TXData@d stored from wreg
  6287  0031B8  6E19               	movwf	i2c1_driver_TXData@d,c
  6288                           
  6289                           ;i2c1_driver.c: 188: SSP1BUF = d;
  6290  0031BA  C019  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  6291  0031BE  0012               	return		;funcret
  6292  0031C0                     __end_of_i2c1_driver_TXData:
  6293                           	opt stack 0
  6294                           tosu	equ	0xFFF
  6295                           tosh	equ	0xFFE
  6296                           tosl	equ	0xFFD
  6297                           pclath	equ	0xFFA
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           indf1	equ	0xFE7
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _i2c1_driver_getRXData *****************
  6318 ;; Defined at:
  6319 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      unsigned char 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6333 ;;      Params:         0       0       0       0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0
  6336 ;;      Totals:         0       0       0       0       0       0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    5
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_do_I2C_RX
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text34
  6348  003226                     __ptext34:
  6349                           	opt stack 0
  6350  003226                     _i2c1_driver_getRXData:
  6351                           	opt stack 19
  6352                           
  6353                           ;i2c1_driver.c: 173: return SSP1BUF;
  6354                           
  6355                           ;incstack = 0
  6356  003226  50C9               	movf	4041,w,c	;volatile
  6357  003228  0012               	return	
  6358  00322A                     __end_of_i2c1_driver_getRXData:
  6359                           	opt stack 0
  6360                           tosu	equ	0xFFF
  6361                           tosh	equ	0xFFE
  6362                           tosl	equ	0xFFD
  6363                           pclath	equ	0xFFA
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           indf1	equ	0xFE7
  6374                           postdec1	equ	0xFE5
  6375                           fsr1h	equ	0xFE2
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           fsr2h	equ	0xFDA
  6380                           fsr2l	equ	0xFD9
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _i2c1_driver_sendNACK *****************
  6384 ;; Defined at:
  6385 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		None
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6399 ;;      Params:         0       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0
  6402 ;;      Totals:         0       0       0       0       0       0       0
  6403 ;;Total ram usage:        0 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    5
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_do_I2C_DO_NACK_STOP
  6410 ;;		_do_I2C_DO_NACK_RESTART
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text35
  6415  003200                     __ptext35:
  6416                           	opt stack 0
  6417  003200                     _i2c1_driver_sendNACK:
  6418                           	opt stack 18
  6419                           
  6420                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6421                           
  6422                           ;incstack = 0
  6423  003200  8AC5               	bsf	4037,5,c	;volatile
  6424                           
  6425                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6426  003202  88C5               	bsf	4037,4,c	;volatile
  6427  003204  0012               	return		;funcret
  6428  003206                     __end_of_i2c1_driver_sendNACK:
  6429                           	opt stack 0
  6430                           tosu	equ	0xFFF
  6431                           tosh	equ	0xFFE
  6432                           tosl	equ	0xFFD
  6433                           pclath	equ	0xFFA
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           indf1	equ	0xFE7
  6444                           postdec1	equ	0xFE5
  6445                           fsr1h	equ	0xFE2
  6446                           fsr1l	equ	0xFE1
  6447                           indf2	equ	0xFDF
  6448                           postinc2	equ	0xFDE
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function _i2c1_driver_resetBus *****************
  6454 ;; Defined at:
  6455 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  1    wreg      void 
  6462 ;; Registers used:
  6463 ;;		None
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6469 ;;      Params:         0       0       0       0       0       0       0
  6470 ;;      Locals:         0       0       0       0       0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0
  6472 ;;      Totals:         0       0       0       0       0       0       0
  6473 ;;Total ram usage:        0 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    5
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_do_I2C_RESET
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text36
  6484  003262                     __ptext36:
  6485                           	opt stack 0
  6486  003262                     _i2c1_driver_resetBus:
  6487                           	opt stack 19
  6488                           
  6489                           ;incstack = 0
  6490  003262  0012               	return		;funcret
  6491  003264                     __end_of_i2c1_driver_resetBus:
  6492                           	opt stack 0
  6493                           tosu	equ	0xFFF
  6494                           tosh	equ	0xFFE
  6495                           tosl	equ	0xFFD
  6496                           pclath	equ	0xFFA
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           postinc0	equ	0xFEE
  6505                           wreg	equ	0xFE8
  6506                           indf1	equ	0xFE7
  6507                           postdec1	equ	0xFE5
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _i2c1_driver_startRX *****************
  6517 ;; Defined at:
  6518 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;		None
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;		None
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		None
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6532 ;;      Params:         0       0       0       0       0       0       0
  6533 ;;      Locals:         0       0       0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0
  6535 ;;      Totals:         0       0       0       0       0       0       0
  6536 ;;Total ram usage:        0 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_do_I2C_RCEN
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text37
  6547  00322A                     __ptext37:
  6548                           	opt stack 0
  6549  00322A                     _i2c1_driver_startRX:
  6550                           	opt stack 19
  6551                           
  6552                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6553                           
  6554                           ;incstack = 0
  6555  00322A  86C5               	bsf	4037,3,c	;volatile
  6556  00322C  0012               	return		;funcret
  6557  00322E                     __end_of_i2c1_driver_startRX:
  6558                           	opt stack 0
  6559                           tosu	equ	0xFFF
  6560                           tosh	equ	0xFFE
  6561                           tosl	equ	0xFFD
  6562                           pclath	equ	0xFFA
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           prodh	equ	0xFF4
  6568                           prodl	equ	0xFF3
  6569                           intcon	equ	0xFF2
  6570                           postinc0	equ	0xFEE
  6571                           wreg	equ	0xFE8
  6572                           indf1	equ	0xFE7
  6573                           postdec1	equ	0xFE5
  6574                           fsr1h	equ	0xFE2
  6575                           fsr1l	equ	0xFE1
  6576                           indf2	equ	0xFDF
  6577                           postinc2	equ	0xFDE
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _returnReset *****************
  6583 ;; Defined at:
  6584 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  p               2   24[COMRAM] PTR void 
  6587 ;;		 -> NULL(0), 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      enum E6842
  6592 ;; Registers used:
  6593 ;;		wreg
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6599 ;;      Params:         2       0       0       0       0       0       0
  6600 ;;      Locals:         0       0       0       0       0       0       0
  6601 ;;      Temps:          0       0       0       0       0       0       0
  6602 ;;      Totals:         2       0       0       0       0       0       0
  6603 ;;Total ram usage:        2 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    5
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_i2c_open
  6610 ;;		_do_I2C_DO_ADDRESS_NACK
  6611 ;;		_do_I2C_TX
  6612 ;;		_do_I2C_RX
  6613 ;;		_do_I2C_TX_EMPTY
  6614 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6615 ;;		i2_do_I2C_TX
  6616 ;;		i2_do_I2C_RX
  6617 ;;		i2_do_I2C_TX_EMPTY
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text38
  6622  00317E                     __ptext38:
  6623                           	opt stack 0
  6624  00317E                     _returnReset:
  6625                           	opt stack 0
  6626                           
  6627                           ;Skip over the trampoline to the duplicate function for level 2
  6628  00317E  B247               	btfsc	btemp,1,c
  6629  003180  EF27  F019         	goto	i2_returnReset
  6630  003184                     _returnReset$intlevel0:
  6631                           	opt stack 19
  6632                           
  6633                           ;i2c_master.c: 450: return i2c_reset_link;
  6634                           
  6635                           ;incstack = 0
  6636  003184  0E05               	movlw	5
  6637  003186  0012               	return	
  6638  003188                     __end_of_returnReset:
  6639                           	opt stack 0
  6640                           tosu	equ	0xFFF
  6641                           tosh	equ	0xFFE
  6642                           tosl	equ	0xFFD
  6643                           pclath	equ	0xFFA
  6644                           tblptru	equ	0xFF8
  6645                           tblptrh	equ	0xFF7
  6646                           tblptrl	equ	0xFF6
  6647                           tablat	equ	0xFF5
  6648                           prodh	equ	0xFF4
  6649                           prodl	equ	0xFF3
  6650                           intcon	equ	0xFF2
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           indf1	equ	0xFE7
  6654                           postdec1	equ	0xFE5
  6655                           fsr1h	equ	0xFE2
  6656                           fsr1l	equ	0xFE1
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           fsr2h	equ	0xFDA
  6660                           fsr2l	equ	0xFD9
  6661                           status	equ	0xFD8
  6662                           
  6663 ;; *************** function _returnStop *****************
  6664 ;; Defined at:
  6665 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;  p               2   24[COMRAM] PTR void 
  6668 ;;		 -> NULL(0), 
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      enum E6842
  6673 ;; Registers used:
  6674 ;;		wreg
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6680 ;;      Params:         2       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0
  6683 ;;      Totals:         2       0       0       0       0       0       0
  6684 ;;Total ram usage:        2 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    5
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_i2c_open
  6691 ;;		_setCallBack
  6692 ;;		_do_I2C_DO_ADDRESS_NACK
  6693 ;;		_do_I2C_TX
  6694 ;;		_do_I2C_RX
  6695 ;;		_do_I2C_TX_EMPTY
  6696 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6697 ;;		i2_do_I2C_TX
  6698 ;;		i2_do_I2C_RX
  6699 ;;		i2_do_I2C_TX_EMPTY
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text39
  6704  003188                     __ptext39:
  6705                           	opt stack 0
  6706  003188                     _returnStop:
  6707                           	opt stack 0
  6708                           
  6709                           ;Skip over the trampoline to the duplicate function for level 2
  6710  003188  B247               	btfsc	btemp,1,c
  6711  00318A  EF29  F019         	goto	i2_returnStop
  6712  00318E                     _returnStop$intlevel0:
  6713                           	opt stack 19
  6714                           
  6715                           ;i2c_master.c: 445: return i2c_stop;
  6716                           
  6717                           ;incstack = 0
  6718  00318E  0E01               	movlw	1
  6719  003190  0012               	return	
  6720  003192                     __end_of_returnStop:
  6721                           	opt stack 0
  6722                           tosu	equ	0xFFF
  6723                           tosh	equ	0xFFE
  6724                           tosl	equ	0xFFD
  6725                           pclath	equ	0xFFA
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           indf1	equ	0xFE7
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _i2c1_driver_stop *****************
  6746 ;; Defined at:
  6747 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      void 
  6754 ;; Registers used:
  6755 ;;		None
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6761 ;;      Params:         0       0       0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0
  6764 ;;      Totals:         0       0       0       0       0       0       0
  6765 ;;Total ram usage:        0 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    5
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_do_I2C_SEND_STOP
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text40
  6776  00322E                     __ptext40:
  6777                           	opt stack 0
  6778  00322E                     _i2c1_driver_stop:
  6779                           	opt stack 18
  6780                           
  6781                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  6782                           
  6783                           ;incstack = 0
  6784  00322E  84C5               	bsf	4037,2,c	;volatile
  6785  003230  0012               	return		;funcret
  6786  003232                     __end_of_i2c1_driver_stop:
  6787                           	opt stack 0
  6788                           tosu	equ	0xFFF
  6789                           tosh	equ	0xFFE
  6790                           tosl	equ	0xFFD
  6791                           pclath	equ	0xFFA
  6792                           tblptru	equ	0xFF8
  6793                           tblptrh	equ	0xFF7
  6794                           tblptrl	equ	0xFF6
  6795                           tablat	equ	0xFF5
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           intcon	equ	0xFF2
  6799                           postinc0	equ	0xFEE
  6800                           wreg	equ	0xFE8
  6801                           indf1	equ	0xFE7
  6802                           postdec1	equ	0xFE5
  6803                           fsr1h	equ	0xFE2
  6804                           fsr1l	equ	0xFE1
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _i2c1_driver_restart *****************
  6812 ;; Defined at:
  6813 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		None
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6827 ;;      Params:         0       0       0       0       0       0       0
  6828 ;;      Locals:         0       0       0       0       0       0       0
  6829 ;;      Temps:          0       0       0       0       0       0       0
  6830 ;;      Totals:         0       0       0       0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    5
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_do_I2C_SEND_RESTART_READ
  6838 ;;		_do_I2C_SEND_RESTART_WRITE
  6839 ;;		_do_I2C_SEND_RESTART
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text41
  6844  003232                     __ptext41:
  6845                           	opt stack 0
  6846  003232                     _i2c1_driver_restart:
  6847                           	opt stack 18
  6848                           
  6849                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  6850                           
  6851                           ;incstack = 0
  6852  003232  82C5               	bsf	4037,1,c	;volatile
  6853  003234  0012               	return		;funcret
  6854  003236                     __end_of_i2c1_driver_restart:
  6855                           	opt stack 0
  6856                           tosu	equ	0xFFF
  6857                           tosh	equ	0xFFE
  6858                           tosl	equ	0xFFD
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           postinc0	equ	0xFEE
  6868                           wreg	equ	0xFE8
  6869                           indf1	equ	0xFE7
  6870                           postdec1	equ	0xFE5
  6871                           fsr1h	equ	0xFE2
  6872                           fsr1l	equ	0xFE1
  6873                           indf2	equ	0xFDF
  6874                           postinc2	equ	0xFDE
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _i2c1_driver_sendACK *****************
  6880 ;; Defined at:
  6881 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		None
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         0       0       0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0
  6898 ;;      Totals:         0       0       0       0       0       0       0
  6899 ;;Total ram usage:        0 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    5
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_do_I2C_DO_ACK
  6906 ;;		_do_I2C_RX
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text42
  6911  003206                     __ptext42:
  6912                           	opt stack 0
  6913  003206                     _i2c1_driver_sendACK:
  6914                           	opt stack 19
  6915                           
  6916                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6917                           
  6918                           ;incstack = 0
  6919  003206  9AC5               	bcf	4037,5,c	;volatile
  6920                           
  6921                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6922  003208  88C5               	bsf	4037,4,c	;volatile
  6923  00320A  0012               	return		;funcret
  6924  00320C                     __end_of_i2c1_driver_sendACK:
  6925                           	opt stack 0
  6926                           tosu	equ	0xFFF
  6927                           tosh	equ	0xFFE
  6928                           tosl	equ	0xFFD
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           indf1	equ	0xFE7
  6940                           postdec1	equ	0xFE5
  6941                           fsr1h	equ	0xFE2
  6942                           fsr1l	equ	0xFE1
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function _i2c1_driver_start *****************
  6950 ;; Defined at:
  6951 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		None
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6965 ;;      Params:         0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_i2c_masterOperation
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text43
  6980  003236                     __ptext43:
  6981                           	opt stack 0
  6982  003236                     _i2c1_driver_start:
  6983                           	opt stack 22
  6984                           
  6985                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6986                           
  6987                           ;incstack = 0
  6988  003236  80C5               	bsf	4037,0,c	;volatile
  6989  003238  0012               	return		;funcret
  6990  00323A                     __end_of_i2c1_driver_start:
  6991                           	opt stack 0
  6992                           tosu	equ	0xFFF
  6993                           tosh	equ	0xFFE
  6994                           tosl	equ	0xFFD
  6995                           pclath	equ	0xFFA
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _printf *****************
  7016 ;; Defined at:
  7017 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  7020 ;;		 -> STR_21(21), STR_20(22), STR_19(21), STR_18(38), 
  7021 ;;		 -> STR_17(21), STR_16(36), STR_15(18), STR_14(21), 
  7022 ;;		 -> STR_13(57), STR_12(20), STR_11(35), STR_10(25), 
  7023 ;;		 -> STR_9(24), STR_8(81), STR_7(28), STR_6(49), 
  7024 ;;		 -> STR_5(26), STR_4(22), STR_3(29), STR_2(27), 
  7025 ;;		 -> STR_1(101), 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  val             4   64[BANK0 ] unsigned long 
  7028 ;;  tmpval          4   60[BANK0 ] struct .
  7029 ;;  fval            3   72[BANK0 ] struct .
  7030 ;;  prec            2   77[BANK0 ] int 
  7031 ;;  width           2   75[BANK0 ] int 
  7032 ;;  flag            2   70[BANK0 ] unsigned short 
  7033 ;;  exp             2   68[BANK0 ] int 
  7034 ;;  len             2   58[BANK0 ] unsigned int 
  7035 ;;  ap              2   56[BANK0 ] PTR void [1]
  7036 ;;		 -> ?_printf(2), 
  7037 ;;  cp              2   54[BANK0 ] PTR const unsigned char 
  7038 ;;		 -> printf@c(1), 
  7039 ;;  c               1   79[BANK0 ] char 
  7040 ;;  d               1    0        unsigned char 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  2   40[BANK0 ] int 
  7043 ;; Registers used:
  7044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7050 ;;      Params:         0       5       0       0       0       0       0
  7051 ;;      Locals:         0      29       0       0       0       0       0
  7052 ;;      Temps:          0       6       0       0       0       0       0
  7053 ;;      Totals:         0      40       0       0       0       0       0
  7054 ;;Total ram usage:       40 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    8
  7057 ;; This function calls:
  7058 ;;		___awdiv
  7059 ;;		___ftadd
  7060 ;;		___ftge
  7061 ;;		___ftmul
  7062 ;;		___ftneg
  7063 ;;		___ftsub
  7064 ;;		___fttol
  7065 ;;		___lldiv
  7066 ;;		___llmod
  7067 ;;		___lltoft
  7068 ;;		___wmul
  7069 ;;		__div_to_l_
  7070 ;;		__tdiv_to_l_
  7071 ;;		_fround
  7072 ;;		_isdigit
  7073 ;;		_putch
  7074 ;;		_scale
  7075 ;; This function is called by:
  7076 ;;		_main
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text44
  7081  00011E                     __ptext44:
  7082                           	opt stack 0
  7083  00011E                     _printf:
  7084                           	opt stack 22
  7085                           
  7086                           ;doprnt.c: 466: va_list ap;
  7087                           ;doprnt.c: 499: signed char c;
  7088                           ;doprnt.c: 501: int width;
  7089                           ;doprnt.c: 504: int prec;
  7090                           ;doprnt.c: 508: unsigned short flag;
  7091                           ;doprnt.c: 515: char d;
  7092                           ;doprnt.c: 516: double fval;
  7093                           ;doprnt.c: 517: int exp;
  7094                           ;doprnt.c: 523: union {
  7095                           ;doprnt.c: 524: unsigned long vd;
  7096                           ;doprnt.c: 525: double integ;
  7097                           ;doprnt.c: 526: } tmpval;
  7098                           ;doprnt.c: 528: unsigned long val;
  7099                           ;doprnt.c: 529: unsigned len;
  7100                           ;doprnt.c: 530: const char * cp;
  7101                           ;doprnt.c: 533: *ap = __va_start();
  7102                           
  7103                           ;incstack = 0
  7104  00011E  0E8A               	movlw	low (?_printf+2)
  7105  000120  0100               	movlb	0	; () banked
  7106  000122  6F98               	movwf	printf@ap& (0+255),b
  7107  000124  0E00               	movlw	high (?_printf+2)
  7108  000126  6F99               	movwf	(printf@ap+1)& (0+255),b
  7109                           
  7110                           ;doprnt.c: 536: while(c = *f++) {
  7111  000128  EFC1  F005         	goto	u7170
  7112  00012C                     
  7113                           ; BSR set to: 0
  7114                           ;doprnt.c: 538: if(c != '%')
  7115                           
  7116                           ; BSR set to: 0
  7117  00012C  0E25               	movlw	37
  7118  00012E  19AF               	xorwf	printf@c& (0+255),w,b
  7119  000130  B4D8               	btfsc	status,2,c
  7120  000132  D005               	goto	l986
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;doprnt.c: 540: {
  7124                           ;doprnt.c: 541: (putch(c) );
  7125  000134  51AF               	movf	printf@c& (0+255),w,b
  7126  000136  ECC9  F018         	call	_putch
  7127                           
  7128                           ;doprnt.c: 542: continue;
  7129  00013A  EFC1  F005         	goto	u7170
  7130  00013E                     l986:
  7131                           
  7132                           ;doprnt.c: 543: }
  7133                           ;doprnt.c: 546: width = 0;
  7134  00013E  0E00               	movlw	0
  7135  000140  0100               	movlb	0	; () banked
  7136  000142  6FAC               	movwf	(printf@width+1)& (0+255),b
  7137  000144  0E00               	movlw	0
  7138  000146  6FAB               	movwf	printf@width& (0+255),b
  7139                           
  7140                           ;doprnt.c: 548: flag = 0;
  7141  000148  0E00               	movlw	0
  7142  00014A  6FA7               	movwf	(printf@flag+1)& (0+255),b
  7143  00014C  0E00               	movlw	0
  7144  00014E  6FA6               	movwf	printf@flag& (0+255),b
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;doprnt.c: 551: switch(*f) {
  7148                           
  7149                           ;doprnt.c: 550: for(;;) {
  7150  000150  D004               	goto	l988
  7151  000152                     
  7152                           ;doprnt.c: 580: flag |= 0x04;
  7153                           
  7154                           ; BSR set to: 0
  7155  000152  0100               	movlb	0	; () banked
  7156  000154  85A6               	bsf	printf@flag& (0+255),2,b
  7157                           
  7158                           ;doprnt.c: 581: f++;
  7159  000156  4B88               	infsnz	printf@f& (0+255),f,b
  7160  000158  2B89               	incf	(printf@f+1)& (0+255),f,b
  7161  00015A                     l988:
  7162                           
  7163                           ; BSR set to: 0
  7164  00015A  C088  FFF6         	movff	printf@f,tblptrl
  7165  00015E  C089  FFF7         	movff	printf@f+1,tblptrh
  7166  000162                     	if	0	;tblptru may be non-zero
  7167  000162                     	endif
  7168  000162                     	if	0	;tblptru may be non-zero
  7169  000162                     	endif
  7170  000162  0008               	tblrd		*
  7171  000164  50F5               	movf	tablat,w,c
  7172                           
  7173                           ; Switch size 1, requested type "space"
  7174                           ; Number of cases is 1, Range of values is 48 to 48
  7175                           ; switch strategies available:
  7176                           ; Name         Instructions Cycles
  7177                           ; simple_byte            4     3 (average)
  7178                           ;	Chosen strategy is simple_byte
  7179  000166  0A30               	xorlw	48	; case 48
  7180  000168  B4D8               	btfsc	status,2,c
  7181  00016A  D7F3               	goto	l989
  7182                           
  7183                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7184                           
  7185                           ;doprnt.c: 586: }
  7186                           
  7187                           ;doprnt.c: 585: break;
  7188  00016C  C088  FFF6         	movff	printf@f,tblptrl
  7189  000170  C089  FFF7         	movff	printf@f+1,tblptrh
  7190  000174                     	if	0	;tblptru may be non-zero
  7191  000174                     	endif
  7192  000174                     	if	0	;tblptru may be non-zero
  7193  000174                     	endif
  7194  000174  0008               	tblrd		*
  7195  000176  50F5               	movf	tablat,w,c
  7196  000178  ECB5  F017         	call	_isdigit
  7197  00017C  A0D8               	btfss	status,0,c
  7198  00017E  D034               	goto	u6590
  7199                           
  7200                           ;doprnt.c: 598: width = 0;
  7201  000180  0E00               	movlw	0
  7202  000182  0100               	movlb	0	; () banked
  7203  000184  6FAC               	movwf	(printf@width+1)& (0+255),b
  7204  000186  0E00               	movlw	0
  7205  000188  6FAB               	movwf	printf@width& (0+255),b
  7206  00018A                     
  7207                           ;doprnt.c: 600: width *= 10;
  7208                           
  7209                           ; BSR set to: 0
  7210  00018A  C0AB  F027         	movff	printf@width,___wmul@multiplier
  7211  00018E  C0AC  F028         	movff	printf@width+1,___wmul@multiplier+1
  7212  000192  0E00               	movlw	0
  7213  000194  6E2A               	movwf	___wmul@multiplicand+1,c
  7214  000196  0E0A               	movlw	10
  7215  000198  6E29               	movwf	___wmul@multiplicand,c
  7216  00019A  EC90  F017         	call	___wmul	;wreg free
  7217  00019E  C027  F0AB         	movff	?___wmul,printf@width
  7218  0001A2  C028  F0AC         	movff	?___wmul+1,printf@width+1
  7219                           
  7220                           ;doprnt.c: 601: width += *f++ - '0';
  7221  0001A6  0ED0               	movlw	208
  7222  0001A8  0100               	movlb	0	; () banked
  7223  0001AA  6F8D               	movwf	??_printf& (0+255),b
  7224  0001AC  0EFF               	movlw	255
  7225  0001AE  6F8E               	movwf	(??_printf+1)& (0+255),b
  7226  0001B0  C088  FFF6         	movff	printf@f,tblptrl
  7227  0001B4  C089  FFF7         	movff	printf@f+1,tblptrh
  7228  0001B8                     	if	0	;tblptru may be non-zero
  7229  0001B8                     	endif
  7230  0001B8                     	if	0	;tblptru may be non-zero
  7231  0001B8                     	endif
  7232  0001B8  0008               	tblrd		*
  7233  0001BA  50F5               	movf	tablat,w,c
  7234  0001BC  6F8F               	movwf	(??_printf+2)& (0+255),b
  7235  0001BE  6B90               	clrf	(??_printf+3)& (0+255),b
  7236  0001C0  518D               	movf	??_printf& (0+255),w,b
  7237  0001C2  278F               	addwf	(??_printf+2)& (0+255),f,b
  7238  0001C4  518E               	movf	(??_printf+1)& (0+255),w,b
  7239  0001C6  2390               	addwfc	(??_printf+3)& (0+255),f,b
  7240  0001C8  518F               	movf	(??_printf+2)& (0+255),w,b
  7241  0001CA  27AB               	addwf	printf@width& (0+255),f,b
  7242  0001CC  5190               	movf	(??_printf+3)& (0+255),w,b
  7243  0001CE  23AC               	addwfc	(printf@width+1)& (0+255),f,b
  7244                           
  7245                           ; BSR set to: 0
  7246  0001D0  4B88               	infsnz	printf@f& (0+255),f,b
  7247  0001D2  2B89               	incf	(printf@f+1)& (0+255),f,b
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7251  0001D4  C088  FFF6         	movff	printf@f,tblptrl
  7252  0001D8  C089  FFF7         	movff	printf@f+1,tblptrh
  7253  0001DC                     	if	0	;tblptru may be non-zero
  7254  0001DC                     	endif
  7255  0001DC                     	if	0	;tblptru may be non-zero
  7256  0001DC                     	endif
  7257  0001DC  0008               	tblrd		*
  7258  0001DE  50F5               	movf	tablat,w,c
  7259  0001E0  ECB5  F017         	call	_isdigit
  7260  0001E4  B0D8               	btfsc	status,0,c
  7261  0001E6  D7D1               	goto	l994
  7262  0001E8                     u6590:
  7263                           
  7264                           ;doprnt.c: 608: }
  7265                           ;doprnt.c: 611: if(*f == '.') {
  7266  0001E8  C088  FFF6         	movff	printf@f,tblptrl
  7267  0001EC  C089  FFF7         	movff	printf@f+1,tblptrh
  7268  0001F0                     	if	0	;tblptru may be non-zero
  7269  0001F0                     	endif
  7270  0001F0                     	if	0	;tblptru may be non-zero
  7271  0001F0                     	endif
  7272  0001F0  0008               	tblrd		*
  7273  0001F2  50F5               	movf	tablat,w,c
  7274  0001F4  0A2E               	xorlw	46
  7275  0001F6  A4D8               	btfss	status,2,c
  7276  0001F8  D030               	goto	l996
  7277                           
  7278                           ;doprnt.c: 612: flag |= 0x4000;
  7279  0001FA  0100               	movlb	0	; () banked
  7280  0001FC  8DA7               	bsf	(printf@flag+1)& (0+255),6,b
  7281                           
  7282                           ;doprnt.c: 613: f++;
  7283  0001FE  4B88               	infsnz	printf@f& (0+255),f,b
  7284  000200  2B89               	incf	(printf@f+1)& (0+255),f,b
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;doprnt.c: 620: {
  7288                           ;doprnt.c: 621: prec = 0;
  7289  000202  0E00               	movlw	0
  7290  000204  6FAE               	movwf	(printf@prec+1)& (0+255),b
  7291  000206  0E00               	movlw	0
  7292  000208  6FAD               	movwf	printf@prec& (0+255),b
  7293                           
  7294                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7295  00020A  D01C               	goto	l997
  7296  00020C                     
  7297                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7298                           
  7299                           ; BSR set to: 0
  7300  00020C  C0AD  F027         	movff	printf@prec,___wmul@multiplier
  7301  000210  C0AE  F028         	movff	printf@prec+1,___wmul@multiplier+1
  7302  000214  0E00               	movlw	0
  7303  000216  6E2A               	movwf	___wmul@multiplicand+1,c
  7304  000218  0E0A               	movlw	10
  7305  00021A  6E29               	movwf	___wmul@multiplicand,c
  7306  00021C  EC90  F017         	call	___wmul	;wreg free
  7307  000220  C088  FFF6         	movff	printf@f,tblptrl
  7308  000224  C089  FFF7         	movff	printf@f+1,tblptrh
  7309  000228                     	if	0	;tblptru may be non-zero
  7310  000228                     	endif
  7311  000228                     	if	0	;tblptru may be non-zero
  7312  000228                     	endif
  7313  000228  0008               	tblrd		*
  7314  00022A  50F5               	movf	tablat,w,c
  7315  00022C  2627               	addwf	?___wmul,f,c
  7316  00022E  0E00               	movlw	0
  7317  000230  2228               	addwfc	?___wmul+1,f,c
  7318  000232  0ED0               	movlw	208
  7319  000234  2427               	addwf	?___wmul,w,c
  7320  000236  0100               	movlb	0	; () banked
  7321  000238  6FAD               	movwf	printf@prec& (0+255),b
  7322  00023A  0EFF               	movlw	255
  7323  00023C  2028               	addwfc	?___wmul+1,w,c
  7324  00023E  6FAE               	movwf	(printf@prec+1)& (0+255),b
  7325                           
  7326                           ; BSR set to: 0
  7327  000240  4B88               	infsnz	printf@f& (0+255),f,b
  7328  000242  2B89               	incf	(printf@f+1)& (0+255),f,b
  7329  000244                     l997:
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334  000244  C088  FFF6         	movff	printf@f,tblptrl
  7335  000248  C089  FFF7         	movff	printf@f+1,tblptrh
  7336  00024C                     	if	0	;tblptru may be non-zero
  7337  00024C                     	endif
  7338  00024C                     	if	0	;tblptru may be non-zero
  7339  00024C                     	endif
  7340  00024C  0008               	tblrd		*
  7341  00024E  50F5               	movf	tablat,w,c
  7342  000250  ECB5  F017         	call	_isdigit
  7343  000254  A0D8               	btfss	status,0,c
  7344  000256  D052               	goto	l1001
  7345  000258  D7D9               	goto	l998
  7346  00025A                     l996:
  7347                           
  7348                           ;doprnt.c: 626: prec = 0;
  7349  00025A  0E00               	movlw	0
  7350  00025C  0100               	movlb	0	; () banked
  7351  00025E  6FAE               	movwf	(printf@prec+1)& (0+255),b
  7352  000260  0E00               	movlw	0
  7353  000262  6FAD               	movwf	printf@prec& (0+255),b
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;doprnt.c: 628: flag |= 0x1000;
  7357  000264  89A7               	bsf	(printf@flag+1)& (0+255),4,b
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;doprnt.c: 630: }
  7361                           ;doprnt.c: 635: switch(c = *f++) {
  7362  000266  D04A               	goto	l1001
  7363  000268                     
  7364                           ; BSR set to: 0
  7365                           ;doprnt.c: 663: flag |= 0x400;
  7366                           
  7367                           ; BSR set to: 0
  7368  000268  85A7               	bsf	(printf@flag+1)& (0+255),2,b
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;doprnt.c: 698: case 'i':
  7372                           ;doprnt.c: 699: break;
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ;doprnt.c: 697: case 'd':
  7377                           
  7378                           ;doprnt.c: 664: break;
  7379  00026A  D05F               	goto	l1005
  7380  00026C                     
  7381                           ; BSR set to: 0
  7382                           ;doprnt.c: 753: if(prec && prec < len)
  7383                           
  7384                           ; BSR set to: 0
  7385  00026C  51AD               	movf	printf@prec& (0+255),w,b
  7386  00026E  11AE               	iorwf	(printf@prec+1)& (0+255),w,b
  7387  000270  B4D8               	btfsc	status,2,c
  7388  000272  D00A               	goto	l1009
  7389                           
  7390                           ; BSR set to: 0
  7391  000274  519A               	movf	printf@len& (0+255),w,b
  7392  000276  5DAD               	subwf	printf@prec& (0+255),w,b
  7393  000278  519B               	movf	(printf@len+1)& (0+255),w,b
  7394  00027A  59AE               	subwfb	(printf@prec+1)& (0+255),w,b
  7395  00027C  B0D8               	btfsc	status,0,c
  7396  00027E  D004               	goto	l1009
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;doprnt.c: 754: len = prec;
  7400  000280  C0AD  F09A         	movff	printf@prec,printf@len
  7401  000284  C0AE  F09B         	movff	printf@prec+1,printf@len+1
  7402  000288                     l1009:
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 757: if(width > len)
  7406                           
  7407                           ; BSR set to: 0
  7408  000288  51AB               	movf	printf@width& (0+255),w,b
  7409  00028A  5D9A               	subwf	printf@len& (0+255),w,b
  7410  00028C  51AC               	movf	(printf@width+1)& (0+255),w,b
  7411  00028E  599B               	subwfb	(printf@len+1)& (0+255),w,b
  7412  000290  B0D8               	btfsc	status,0,c
  7413  000292  D005               	goto	l1010
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;doprnt.c: 758: width -= len;
  7417  000294  519A               	movf	printf@len& (0+255),w,b
  7418  000296  5FAB               	subwf	printf@width& (0+255),f,b
  7419  000298  519B               	movf	(printf@len+1)& (0+255),w,b
  7420  00029A  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  7421  00029C  D008               	goto	l1012
  7422  00029E                     l1010:
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;doprnt.c: 759: else
  7426                           ;doprnt.c: 760: width = 0;
  7427                           
  7428                           ; BSR set to: 0
  7429  00029E  0E00               	movlw	0
  7430  0002A0  6FAC               	movwf	(printf@width+1)& (0+255),b
  7431  0002A2  0E00               	movlw	0
  7432  0002A4  6FAB               	movwf	printf@width& (0+255),b
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;doprnt.c: 764: while(width--)
  7436  0002A6  D003               	goto	l1012
  7437  0002A8                     l7198:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;doprnt.c: 765: (putch(' ') );
  7441  0002A8  0E20               	movlw	32
  7442  0002AA  ECC9  F018         	call	_putch
  7443  0002AE                     l1012:
  7444  0002AE  0100               	movlb	0	; () banked
  7445  0002B0  07AB               	decf	printf@width& (0+255),f,b
  7446  0002B2  A0D8               	btfss	status,0,c
  7447  0002B4  07AC               	decf	(printf@width+1)& (0+255),f,b
  7448  0002B6  29AB               	incf	printf@width& (0+255),w,b
  7449  0002B8  E1F7               	bnz	l7198
  7450  0002BA  29AC               	incf	(printf@width+1)& (0+255),w,b
  7451  0002BC  B4D8               	btfsc	status,2,c
  7452  0002BE  D00B               	goto	l1015
  7453  0002C0  D7F3               	goto	l1013
  7454  0002C2                     l7202:
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;doprnt.c: 768: (putch(*cp++) );
  7458  0002C2  C096  FFD9         	movff	printf@cp,fsr2l
  7459  0002C6  C097  FFDA         	movff	printf@cp+1,fsr2h
  7460  0002CA  50DF               	movf	indf2,w,c
  7461  0002CC  ECC9  F018         	call	_putch
  7462  0002D0  0100               	movlb	0	; () banked
  7463  0002D2  4B96               	infsnz	printf@cp& (0+255),f,b
  7464  0002D4  2B97               	incf	(printf@cp+1)& (0+255),f,b
  7465  0002D6                     l1015:
  7466                           
  7467                           ; BSR set to: 0
  7468                           
  7469                           ; BSR set to: 0
  7470  0002D6  079A               	decf	printf@len& (0+255),f,b
  7471  0002D8  A0D8               	btfss	status,0,c
  7472  0002DA  079B               	decf	(printf@len+1)& (0+255),f,b
  7473  0002DC  299A               	incf	printf@len& (0+255),w,b
  7474  0002DE  E1F1               	bnz	l7202
  7475  0002E0  299B               	incf	(printf@len+1)& (0+255),w,b
  7476  0002E2  B4D8               	btfsc	status,2,c
  7477  0002E4  EFC1  F005         	goto	u7170
  7478  0002E8  D7EC               	goto	l1016
  7479  0002EA                     
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 805: cp = (char *)&c;
  7482                           
  7483                           ; BSR set to: 0
  7484  0002EA  0EAF               	movlw	low printf@c
  7485  0002EC  6F96               	movwf	printf@cp& (0+255),b
  7486  0002EE  0E00               	movlw	high printf@c
  7487  0002F0  6F97               	movwf	(printf@cp+1)& (0+255),b
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;doprnt.c: 806: len = 1;
  7491  0002F2  0E00               	movlw	0
  7492  0002F4  6F9B               	movwf	(printf@len+1)& (0+255),b
  7493  0002F6  0E01               	movlw	1
  7494  0002F8  6F9A               	movwf	printf@len& (0+255),b
  7495                           
  7496                           ;doprnt.c: 807: goto dostring;
  7497  0002FA  D7B8               	goto	l1008
  7498  0002FC                     l1001:
  7499                           
  7500                           ; BSR set to: 0
  7501  0002FC  C088  FFF6         	movff	printf@f,tblptrl
  7502  000300  C089  FFF7         	movff	printf@f+1,tblptrh
  7503  000304  0100               	movlb	0	; () banked
  7504  000306  4B88               	infsnz	printf@f& (0+255),f,b
  7505  000308  2B89               	incf	(printf@f+1)& (0+255),f,b
  7506  00030A                     	if	0	;tblptru may be non-zero
  7507  00030A                     	endif
  7508  00030A                     	if	0	;tblptru may be non-zero
  7509  00030A                     	endif
  7510  00030A  0008               	tblrd		*
  7511  00030C  CFF5 F0AF          	movff	tablat,printf@c
  7512  000310  51AF               	movf	printf@c& (0+255),w,b
  7513                           
  7514                           ; Switch size 1, requested type "space"
  7515                           ; Number of cases is 4, Range of values is 0 to 105
  7516                           ; switch strategies available:
  7517                           ; Name         Instructions Cycles
  7518                           ; simple_byte           13     7 (average)
  7519                           ;	Chosen strategy is simple_byte
  7520  000312  0A00               	xorlw	0	; case 0
  7521  000314  B4D8               	btfsc	status,2,c
  7522  000316  0012               	return	
  7523  000318  0A64               	xorlw	100	; case 100
  7524  00031A  B4D8               	btfsc	status,2,c
  7525  00031C  D006               	goto	l1005
  7526  00031E  0A02               	xorlw	2	; case 102
  7527  000320  B4D8               	btfsc	status,2,c
  7528  000322  D7A2               	goto	l1004
  7529  000324  0A0F               	xorlw	15	; case 105
  7530  000326  A4D8               	btfss	status,2,c
  7531  000328  D7E0               	goto	l1018
  7532  00032A                     l1005:
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;doprnt.c: 825: if(flag & (0x700)) {
  7536                           
  7537                           ; BSR set to: 0
  7538  00032A  0E07               	movlw	7
  7539  00032C  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  7540  00032E  B4D8               	btfsc	status,2,c
  7541  000330  D305               	goto	l1019
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;doprnt.c: 827: if(flag & 0x1000)
  7545  000332  A9A7               	btfss	(printf@flag+1)& (0+255),4,b
  7546  000334  D004               	goto	l1020
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;doprnt.c: 829: prec = 6;
  7550  000336  0E00               	movlw	0
  7551  000338  6FAE               	movwf	(printf@prec+1)& (0+255),b
  7552  00033A  0E06               	movlw	6
  7553  00033C  6FAD               	movwf	printf@prec& (0+255),b
  7554  00033E                     l1020:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7558                           
  7559                           ; BSR set to: 0
  7560  00033E  C098  FFD9         	movff	printf@ap,fsr2l
  7561  000342  C099  FFDA         	movff	printf@ap+1,fsr2h
  7562  000346  CFDE F0A8          	movff	postinc2,printf@fval
  7563  00034A  CFDE F0A9          	movff	postinc2,printf@fval+1
  7564  00034E  CFDD F0AA          	movff	postdec2,printf@fval+2
  7565                           
  7566                           ; BSR set to: 0
  7567  000352  0E03               	movlw	3
  7568  000354  2798               	addwf	printf@ap& (0+255),f,b
  7569  000356  0E00               	movlw	0
  7570  000358  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;doprnt.c: 831: if(fval < 0.0) {
  7574  00035A  AFAA               	btfss	(printf@fval+2)& (0+255),7,b
  7575  00035C  D011               	goto	l1021
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;doprnt.c: 832: fval = -fval;
  7579  00035E  C0A8  F019         	movff	printf@fval,___ftneg@f1
  7580  000362  C0A9  F01A         	movff	printf@fval+1,___ftneg@f1+1
  7581  000366  C0AA  F01B         	movff	printf@fval+2,___ftneg@f1+2
  7582  00036A  ECA3  F017         	call	___ftneg	;wreg free
  7583  00036E  C019  F0A8         	movff	?___ftneg,printf@fval
  7584  000372  C01A  F0A9         	movff	?___ftneg+1,printf@fval+1
  7585  000376  C01B  F0AA         	movff	?___ftneg+2,printf@fval+2
  7586                           
  7587                           ;doprnt.c: 833: flag |= 0x03;
  7588  00037A  0E03               	movlw	3
  7589  00037C  0100               	movlb	0	; () banked
  7590  00037E  13A6               	iorwf	printf@flag& (0+255),f,b
  7591  000380                     l1021:
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;doprnt.c: 834: }
  7595                           ;doprnt.c: 835: exp = 0;
  7596                           
  7597                           ; BSR set to: 0
  7598  000380  0E00               	movlw	0
  7599  000382  6FA5               	movwf	(printf@exp+1)& (0+255),b
  7600  000384  0E00               	movlw	0
  7601  000386  6FA4               	movwf	printf@exp& (0+255),b
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;doprnt.c: 836: if( fval!=0) {
  7605  000388  51A8               	movf	printf@fval& (0+255),w,b
  7606  00038A  11A9               	iorwf	(printf@fval+1)& (0+255),w,b
  7607  00038C  11AA               	iorwf	(printf@fval+2)& (0+255),w,b
  7608  00038E  B4D8               	btfsc	status,2,c
  7609  000390  D087               	goto	l1026
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7613  000392  0E82               	movlw	130
  7614  000394  6F8D               	movwf	??_printf& (0+255),b
  7615  000396  0EFF               	movlw	255
  7616  000398  6F8E               	movwf	(??_printf+1)& (0+255),b
  7617  00039A  C0A8  F08F         	movff	printf@fval,??_printf+2
  7618  00039E  C0A9  F090         	movff	printf@fval+1,??_printf+3
  7619  0003A2  C0AA  F091         	movff	printf@fval+2,??_printf+4
  7620  0003A6  C0AB  F092         	movff	printf@fval+3,??_printf+5
  7621  0003AA  0E10               	movlw	16
  7622  0003AC  D005               	goto	u6710
  7623  0003AE                     u6715:
  7624  0003AE  90D8               	bcf	status,0,c
  7625  0003B0  3392               	rrcf	(??_printf+5)& (0+255),f,b
  7626  0003B2  3391               	rrcf	(??_printf+4)& (0+255),f,b
  7627  0003B4  3390               	rrcf	(??_printf+3)& (0+255),f,b
  7628  0003B6  338F               	rrcf	(??_printf+2)& (0+255),f,b
  7629  0003B8                     u6710:
  7630  0003B8  2EE8               	decfsz	wreg,f,c
  7631  0003BA  D7F9               	goto	u6715
  7632  0003BC  518F               	movf	(??_printf+2)& (0+255),w,b
  7633  0003BE  258D               	addwf	??_printf& (0+255),w,b
  7634  0003C0  6FA4               	movwf	printf@exp& (0+255),b
  7635  0003C2  0E00               	movlw	0
  7636  0003C4  218E               	addwfc	(??_printf+1)& (0+255),w,b
  7637  0003C6  6FA5               	movwf	(printf@exp+1)& (0+255),b
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;doprnt.c: 838: exp--;
  7641  0003C8  07A4               	decf	printf@exp& (0+255),f,b
  7642  0003CA  A0D8               	btfss	status,0,c
  7643  0003CC  07A5               	decf	(printf@exp+1)& (0+255),f,b
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;doprnt.c: 839: exp *= 3;
  7647  0003CE  C0A4  F027         	movff	printf@exp,___wmul@multiplier
  7648  0003D2  C0A5  F028         	movff	printf@exp+1,___wmul@multiplier+1
  7649  0003D6  0E00               	movlw	0
  7650  0003D8  6E2A               	movwf	___wmul@multiplicand+1,c
  7651  0003DA  0E03               	movlw	3
  7652  0003DC  6E29               	movwf	___wmul@multiplicand,c
  7653  0003DE  EC90  F017         	call	___wmul	;wreg free
  7654  0003E2  C027  F0A4         	movff	?___wmul,printf@exp
  7655  0003E6  C028  F0A5         	movff	?___wmul+1,printf@exp+1
  7656                           
  7657                           ;doprnt.c: 840: exp /= 10;
  7658  0003EA  C0A4  F01F         	movff	printf@exp,___awdiv@dividend
  7659  0003EE  C0A5  F020         	movff	printf@exp+1,___awdiv@dividend+1
  7660  0003F2  0E00               	movlw	0
  7661  0003F4  6E22               	movwf	___awdiv@divisor+1,c
  7662  0003F6  0E0A               	movlw	10
  7663  0003F8  6E21               	movwf	___awdiv@divisor,c
  7664  0003FA  ECDE  F012         	call	___awdiv	;wreg free
  7665  0003FE  C01F  F0A4         	movff	?___awdiv,printf@exp
  7666  000402  C020  F0A5         	movff	?___awdiv+1,printf@exp+1
  7667                           
  7668                           ;doprnt.c: 841: if(exp < 0)
  7669  000406  0100               	movlb	0	; () banked
  7670  000408  AFA5               	btfss	(printf@exp+1)& (0+255),7,b
  7671  00040A  D003               	goto	l1023
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;doprnt.c: 842: exp--;
  7675  00040C  07A4               	decf	printf@exp& (0+255),f,b
  7676  00040E  A0D8               	btfss	status,0,c
  7677  000410  07A5               	decf	(printf@exp+1)& (0+255),f,b
  7678  000412                     l1023:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7682                           
  7683                           ; BSR set to: 0
  7684  000412  51A4               	movf	printf@exp& (0+255),w,b
  7685  000414  0800               	sublw	0
  7686  000416  EC46  F00A         	call	_scale
  7687  00041A  C06C  F09C         	movff	?_scale,printf@tmpval
  7688  00041E  C06D  F09D         	movff	?_scale+1,printf@tmpval+1
  7689  000422  C06E  F09E         	movff	?_scale+2,printf@tmpval+2
  7690                           
  7691                           ;doprnt.c: 847: tmpval.integ *= fval;
  7692  000426  C09C  F060         	movff	printf@tmpval,___ftmul@f1
  7693  00042A  C09D  F061         	movff	printf@tmpval+1,___ftmul@f1+1
  7694  00042E  C09E  F062         	movff	printf@tmpval+2,___ftmul@f1+2
  7695  000432  C0A8  F063         	movff	printf@fval,___ftmul@f2
  7696  000436  C0A9  F064         	movff	printf@fval+1,___ftmul@f2+1
  7697  00043A  C0AA  F065         	movff	printf@fval+2,___ftmul@f2+2
  7698  00043E  EC05  F010         	call	___ftmul	;wreg free
  7699  000442  C060  F09C         	movff	?___ftmul,printf@tmpval
  7700  000446  C061  F09D         	movff	?___ftmul+1,printf@tmpval+1
  7701  00044A  C062  F09E         	movff	?___ftmul+2,printf@tmpval+2
  7702                           
  7703                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7704  00044E  C09C  F066         	movff	printf@tmpval,___ftge@ff1
  7705  000452  C09D  F067         	movff	printf@tmpval+1,___ftge@ff1+1
  7706  000456  C09E  F068         	movff	printf@tmpval+2,___ftge@ff1+2
  7707  00045A  0E00               	movlw	0
  7708  00045C  0100               	movlb	0	; () banked
  7709  00045E  6F69               	movwf	___ftge@ff2& (0+255),b
  7710  000460  0E80               	movlw	128
  7711  000462  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  7712  000464  0E3F               	movlw	63
  7713  000466  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  7714  000468  EC4D  F012         	call	___ftge	;wreg free
  7715  00046C  0100               	movlb	0	; () banked
  7716  00046E  B0D8               	btfsc	status,0,c
  7717  000470  D004               	goto	l1024
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;doprnt.c: 849: exp--;
  7721  000472  07A4               	decf	printf@exp& (0+255),f,b
  7722  000474  A0D8               	btfss	status,0,c
  7723  000476  07A5               	decf	(printf@exp+1)& (0+255),f,b
  7724  000478  D013               	goto	l1026
  7725  00047A                     l1024:
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7729                           
  7730                           ; BSR set to: 0
  7731  00047A  C09C  F066         	movff	printf@tmpval,___ftge@ff1
  7732  00047E  C09D  F067         	movff	printf@tmpval+1,___ftge@ff1+1
  7733  000482  C09E  F068         	movff	printf@tmpval+2,___ftge@ff1+2
  7734  000486  0E00               	movlw	0
  7735  000488  6F69               	movwf	___ftge@ff2& (0+255),b
  7736  00048A  0E20               	movlw	32
  7737  00048C  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  7738  00048E  0E41               	movlw	65
  7739  000490  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  7740  000492  EC4D  F012         	call	___ftge	;wreg free
  7741  000496  0100               	movlb	0	; () banked
  7742  000498  A0D8               	btfss	status,0,c
  7743  00049A  D002               	goto	l1026
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;doprnt.c: 851: exp++;
  7747  00049C  4BA4               	infsnz	printf@exp& (0+255),f,b
  7748  00049E  2BA5               	incf	(printf@exp+1)& (0+255),f,b
  7749  0004A0                     l1026:
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;doprnt.c: 852: }
  7753                           ;doprnt.c: 1112: if(prec <= 12)
  7754                           
  7755                           ; BSR set to: 0
  7756                           
  7757                           ; BSR set to: 0
  7758                           
  7759                           ; BSR set to: 0
  7760  0004A0  BFAE               	btfsc	(printf@prec+1)& (0+255),7,b
  7761  0004A2  D006               	goto	u6750
  7762  0004A4  51AE               	movf	(printf@prec+1)& (0+255),w,b
  7763  0004A6  E11B               	bnz	l7264
  7764  0004A8  0E0D               	movlw	13
  7765  0004AA  5DAD               	subwf	printf@prec& (0+255),w,b
  7766  0004AC  B0D8               	btfsc	status,0,c
  7767  0004AE  D017               	goto	l1027
  7768  0004B0                     u6750:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;doprnt.c: 1113: fval += fround(prec);
  7772  0004B0  C0A8  F076         	movff	printf@fval,___ftadd@f1
  7773  0004B4  C0A9  F077         	movff	printf@fval+1,___ftadd@f1+1
  7774  0004B8  C0AA  F078         	movff	printf@fval+2,___ftadd@f1+2
  7775  0004BC  51AD               	movf	printf@prec& (0+255),w,b
  7776  0004BE  EC56  F00C         	call	_fround
  7777  0004C2  C06C  F079         	movff	?_fround,___ftadd@f2
  7778  0004C6  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  7779  0004CA  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  7780  0004CE  EC85  F00D         	call	___ftadd	;wreg free
  7781  0004D2  C076  F0A8         	movff	?___ftadd,printf@fval
  7782  0004D6  C077  F0A9         	movff	?___ftadd+1,printf@fval+1
  7783  0004DA  C078  F0AA         	movff	?___ftadd+2,printf@fval+2
  7784  0004DE                     l1027:
  7785  0004DE                     l7264:
  7786                           
  7787                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7788  0004DE  0100               	movlb	0	; () banked
  7789  0004E0  BFA5               	btfsc	(printf@exp+1)& (0+255),7,b
  7790  0004E2  D006               	goto	u6760
  7791  0004E4  51A5               	movf	(printf@exp+1)& (0+255),w,b
  7792  0004E6  E11F               	bnz	l7272
  7793  0004E8  0E0A               	movlw	10
  7794  0004EA  5DA4               	subwf	printf@exp& (0+255),w,b
  7795  0004EC  B0D8               	btfsc	status,0,c
  7796  0004EE  D01B               	goto	u6790
  7797  0004F0                     u6760:
  7798                           
  7799                           ; BSR set to: 0
  7800  0004F0  51A8               	movf	printf@fval& (0+255),w,b
  7801  0004F2  11A9               	iorwf	(printf@fval+1)& (0+255),w,b
  7802  0004F4  11AA               	iorwf	(printf@fval+2)& (0+255),w,b
  7803  0004F6  B4D8               	btfsc	status,2,c
  7804  0004F8  D054               	goto	l1028
  7805                           
  7806                           ; BSR set to: 0
  7807  0004FA  C0A8  F073         	movff	printf@fval,___fttol@f1
  7808  0004FE  C0A9  F074         	movff	printf@fval+1,___fttol@f1+1
  7809  000502  C0AA  F075         	movff	printf@fval+2,___fttol@f1+2
  7810  000506  EC89  F00F         	call	___fttol	;wreg free
  7811  00050A  0100               	movlb	0	; () banked
  7812  00050C  5173               	movf	?___fttol& (0+255),w,b
  7813  00050E  1174               	iorwf	(?___fttol+1)& (0+255),w,b
  7814  000510  1175               	iorwf	(?___fttol+2)& (0+255),w,b
  7815  000512  1176               	iorwf	(?___fttol+3)& (0+255),w,b
  7816  000514  B4D8               	btfsc	status,2,c
  7817                           
  7818                           ; BSR set to: 0
  7819  000516  BFA5               	btfsc	(printf@exp+1)& (0+255),7,b
  7820  000518  D044               	goto	l1028
  7821  00051A  51A5               	movf	(printf@exp+1)& (0+255),w,b
  7822  00051C  E104               	bnz	l7272
  7823  00051E  0E02               	movlw	2
  7824  000520  5DA4               	subwf	printf@exp& (0+255),w,b
  7825  000522  A0D8               	btfss	status,0,c
  7826  000524  D03E               	goto	l1028
  7827  000526                     u6790:
  7828  000526                     l7272:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7832  000526  C09C  F066         	movff	printf@tmpval,___ftge@ff1
  7833  00052A  C09D  F067         	movff	printf@tmpval+1,___ftge@ff1+1
  7834  00052E  C09E  F068         	movff	printf@tmpval+2,___ftge@ff1+2
  7835  000532  0E70               	movlw	112
  7836  000534  6F69               	movwf	___ftge@ff2& (0+255),b
  7837  000536  0E89               	movlw	137
  7838  000538  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
  7839  00053A  0E40               	movlw	64
  7840  00053C  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
  7841  00053E  EC4D  F012         	call	___ftge	;wreg free
  7842  000542  0100               	movlb	0	; () banked
  7843  000544  B0D8               	btfsc	status,0,c
  7844  000546  D002               	goto	l1031
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7848  000548  0EF7               	movlw	247
  7849  00054A  D001               	goto	L8
  7850  00054C                     l1031:
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7854                           
  7855                           ; BSR set to: 0
  7856  00054C  0EF8               	movlw	248
  7857  00054E                     L8:
  7858  00054E  27A4               	addwf	printf@exp& (0+255),f,b
  7859  000550  0EFF               	movlw	255
  7860  000552  23A5               	addwfc	(printf@exp+1)& (0+255),f,b
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;doprnt.c: 1124: }
  7864                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7865                           
  7866                           ; BSR set to: 0
  7867  000554  51A4               	movf	printf@exp& (0+255),w,b
  7868  000556  EC46  F00A         	call	_scale
  7869  00055A  C06C  F09C         	movff	?_scale,printf@tmpval
  7870  00055E  C06D  F09D         	movff	?_scale+1,printf@tmpval+1
  7871  000562  C06E  F09E         	movff	?_scale+2,printf@tmpval+2
  7872                           
  7873                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7874  000566  C0A8  F019         	movff	printf@fval,__tdiv_to_l_@f1
  7875  00056A  C0A9  F01A         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7876  00056E  C0AA  F01B         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7877  000572  C09C  F01C         	movff	printf@tmpval,__tdiv_to_l_@f2
  7878  000576  C09D  F01D         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7879  00057A  C09E  F01E         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7880  00057E  EC5C  F00E         	call	__tdiv_to_l_	;wreg free
  7881  000582  C019  F0A0         	movff	?__tdiv_to_l_,printf@val
  7882  000586  C01A  F0A1         	movff	?__tdiv_to_l_+1,printf@val+1
  7883  00058A  C01B  F0A2         	movff	?__tdiv_to_l_+2,printf@val+2
  7884  00058E  C01C  F0A3         	movff	?__tdiv_to_l_+3,printf@val+3
  7885                           
  7886                           ;doprnt.c: 1129: fval = 0.0;
  7887  000592  0E00               	movlw	0
  7888  000594  0100               	movlb	0	; () banked
  7889  000596  6FA8               	movwf	printf@fval& (0+255),b
  7890  000598  0E00               	movlw	0
  7891  00059A  6FA9               	movwf	(printf@fval+1)& (0+255),b
  7892  00059C  0E00               	movlw	0
  7893  00059E  6FAA               	movwf	(printf@fval+2)& (0+255),b
  7894                           
  7895                           ;doprnt.c: 1130: } else {
  7896  0005A0  D033               	goto	l1037
  7897  0005A2                     l1028:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7901                           
  7902                           ; BSR set to: 0
  7903  0005A2  C0A8  F073         	movff	printf@fval,___fttol@f1
  7904  0005A6  C0A9  F074         	movff	printf@fval+1,___fttol@f1+1
  7905  0005AA  C0AA  F075         	movff	printf@fval+2,___fttol@f1+2
  7906  0005AE  EC89  F00F         	call	___fttol	;wreg free
  7907  0005B2  C073  F0A0         	movff	?___fttol,printf@val
  7908  0005B6  C074  F0A1         	movff	?___fttol+1,printf@val+1
  7909  0005BA  C075  F0A2         	movff	?___fttol+2,printf@val+2
  7910  0005BE  C076  F0A3         	movff	?___fttol+3,printf@val+3
  7911                           
  7912                           ;doprnt.c: 1132: fval -= (double)val;
  7913  0005C2  C0A8  F082         	movff	printf@fval,___ftsub@f1
  7914  0005C6  C0A9  F083         	movff	printf@fval+1,___ftsub@f1+1
  7915  0005CA  C0AA  F084         	movff	printf@fval+2,___ftsub@f1+2
  7916  0005CE  C0A0  F021         	movff	printf@val,___lltoft@c
  7917  0005D2  C0A1  F022         	movff	printf@val+1,___lltoft@c+1
  7918  0005D6  C0A2  F023         	movff	printf@val+2,___lltoft@c+2
  7919  0005DA  C0A3  F024         	movff	printf@val+3,___lltoft@c+3
  7920  0005DE  EC04  F015         	call	___lltoft	;wreg free
  7921  0005E2  C021  F085         	movff	?___lltoft,___ftsub@f2
  7922  0005E6  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  7923  0005EA  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  7924  0005EE  EC95  F016         	call	___ftsub	;wreg free
  7925  0005F2  C082  F0A8         	movff	?___ftsub,printf@fval
  7926  0005F6  C083  F0A9         	movff	?___ftsub+1,printf@fval+1
  7927  0005FA  C084  F0AA         	movff	?___ftsub+2,printf@fval+2
  7928                           
  7929                           ;doprnt.c: 1133: exp = 0;
  7930  0005FE  0E00               	movlw	0
  7931  000600  0100               	movlb	0	; () banked
  7932  000602  6FA5               	movwf	(printf@exp+1)& (0+255),b
  7933  000604  0E00               	movlw	0
  7934  000606  6FA4               	movwf	printf@exp& (0+255),b
  7935  000608                     l1037:
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;doprnt.c: 1134: }
  7939                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7940                           
  7941                           ; BSR set to: 0
  7942  000608  0E01               	movlw	1
  7943  00060A  6FAF               	movwf	printf@c& (0+255),b
  7944  00060C                     l7292:
  7945                           
  7946                           ; BSR set to: 0
  7947  00060C  0E0A               	movlw	10
  7948  00060E  19AF               	xorwf	printf@c& (0+255),w,b
  7949  000610  B4D8               	btfsc	status,2,c
  7950  000612  D018               	goto	u6830
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;doprnt.c: 1137: if(val < dpowers[c])
  7954                           
  7955                           ; BSR set to: 0
  7956                           
  7957                           ; BSR set to: 0
  7958  000614  51AF               	movf	printf@c& (0+255),w,b
  7959  000616  0D04               	mullw	4
  7960  000618  0EF5               	movlw	low _dpowers
  7961  00061A  24F3               	addwf	prodl,w,c
  7962  00061C  6EF6               	movwf	tblptrl,c
  7963  00061E  0E7C               	movlw	high _dpowers
  7964  000620  20F4               	addwfc	prodh,w,c
  7965  000622  6EF7               	movwf	tblptrh,c
  7966  000624                     	if	0	;There are less than 3 active tblptr bytes
  7967  000624                     	endif
  7968  000624  0009               	tblrd		*+
  7969  000626  50F5               	movf	tablat,w,c
  7970  000628  5DA0               	subwf	printf@val& (0+255),w,b
  7971  00062A  0009               	tblrd		*+
  7972  00062C  50F5               	movf	tablat,w,c
  7973  00062E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  7974  000630  0009               	tblrd		*+
  7975  000632  50F5               	movf	tablat,w,c
  7976  000634  59A2               	subwfb	(printf@val+2)& (0+255),w,b
  7977  000636  0009               	tblrd		*+
  7978  000638  50F5               	movf	tablat,w,c
  7979  00063A  59A3               	subwfb	(printf@val+3)& (0+255),w,b
  7980  00063C  A0D8               	btfss	status,0,c
  7981  00063E  D002               	goto	u6830
  7982                           
  7983                           ; BSR set to: 0
  7984                           
  7985                           ; BSR set to: 0
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;doprnt.c: 1138: break;
  7989  000640  2BAF               	incf	printf@c& (0+255),f,b
  7990  000642  D7E4               	goto	l7292
  7991  000644                     u6830:
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;doprnt.c: 1142: width -= prec + c + exp;
  7995                           
  7996                           ; BSR set to: 0
  7997  000644  C0AF  F08D         	movff	printf@c,??_printf
  7998  000648  6B8E               	clrf	(??_printf+1)& (0+255),b
  7999  00064A  BF8D               	btfsc	??_printf& (0+255),7,b
  8000  00064C  078E               	decf	(??_printf+1)& (0+255),f,b
  8001  00064E  51AD               	movf	printf@prec& (0+255),w,b
  8002  000650  278D               	addwf	??_printf& (0+255),f,b
  8003  000652  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8004  000654  238E               	addwfc	(??_printf+1)& (0+255),f,b
  8005  000656  51A4               	movf	printf@exp& (0+255),w,b
  8006  000658  278D               	addwf	??_printf& (0+255),f,b
  8007  00065A  51A5               	movf	(printf@exp+1)& (0+255),w,b
  8008  00065C  238E               	addwfc	(??_printf+1)& (0+255),f,b
  8009  00065E  518D               	movf	??_printf& (0+255),w,b
  8010  000660  5FAB               	subwf	printf@width& (0+255),f,b
  8011  000662  518E               	movf	(??_printf+1)& (0+255),w,b
  8012  000664  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  8013                           
  8014                           ;doprnt.c: 1143: if(
  8015                           ;doprnt.c: 1147: prec)
  8016  000666  51AD               	movf	printf@prec& (0+255),w,b
  8017  000668  11AE               	iorwf	(printf@prec+1)& (0+255),w,b
  8018  00066A  B4D8               	btfsc	status,2,c
  8019  00066C  D003               	goto	l1041
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;doprnt.c: 1148: width--;
  8023  00066E  07AB               	decf	printf@width& (0+255),f,b
  8024  000670  A0D8               	btfss	status,0,c
  8025  000672  07AC               	decf	(printf@width+1)& (0+255),f,b
  8026  000674                     l1041:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;doprnt.c: 1149: if(flag & 0x03)
  8030                           
  8031                           ; BSR set to: 0
  8032  000674  0E03               	movlw	3
  8033  000676  15A6               	andwf	printf@flag& (0+255),w,b
  8034  000678  6F8D               	movwf	??_printf& (0+255),b
  8035  00067A  0E00               	movlw	0
  8036  00067C  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8037  00067E  6F8E               	movwf	(??_printf+1)& (0+255),b
  8038  000680  518D               	movf	??_printf& (0+255),w,b
  8039  000682  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8040  000684  B4D8               	btfsc	status,2,c
  8041  000686  D003               	goto	l1042
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;doprnt.c: 1150: width--;
  8045  000688  07AB               	decf	printf@width& (0+255),f,b
  8046  00068A  A0D8               	btfss	status,0,c
  8047  00068C  07AC               	decf	(printf@width+1)& (0+255),f,b
  8048  00068E                     l1042:
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;doprnt.c: 1153: if(flag & 0x04) {
  8052                           
  8053                           ; BSR set to: 0
  8054  00068E  A5A6               	btfss	printf@flag& (0+255),2,b
  8055  000690  D025               	goto	l1049
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;doprnt.c: 1157: if(flag & 0x03)
  8059  000692  0E03               	movlw	3
  8060  000694  15A6               	andwf	printf@flag& (0+255),w,b
  8061  000696  6F8D               	movwf	??_printf& (0+255),b
  8062  000698  0E00               	movlw	0
  8063  00069A  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8064  00069C  6F8E               	movwf	(??_printf+1)& (0+255),b
  8065  00069E  518D               	movf	??_printf& (0+255),w,b
  8066  0006A0  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8067  0006A2  B4D8               	btfsc	status,2,c
  8068  0006A4  D00B               	goto	l1045
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;doprnt.c: 1159: (putch('-') );
  8072  0006A6  0E2D               	movlw	45
  8073  0006A8  ECC9  F018         	call	_putch
  8074                           
  8075                           ;doprnt.c: 1168: while(width > 0) {
  8076  0006AC  D007               	goto	l1045
  8077  0006AE                     l7318:
  8078                           
  8079                           ;doprnt.c: 1169: (putch('0') );
  8080  0006AE  0E30               	movlw	48
  8081  0006B0  ECC9  F018         	call	_putch
  8082                           
  8083                           ;doprnt.c: 1170: width--;
  8084  0006B4  0100               	movlb	0	; () banked
  8085  0006B6  07AB               	decf	printf@width& (0+255),f,b
  8086  0006B8  A0D8               	btfss	status,0,c
  8087  0006BA  07AC               	decf	(printf@width+1)& (0+255),f,b
  8088  0006BC                     l1045:
  8089                           
  8090                           ; BSR set to: 0
  8091  0006BC  0100               	movlb	0	; () banked
  8092  0006BE  BFAC               	btfsc	(printf@width+1)& (0+255),7,b
  8093  0006C0  D068               	goto	l1053
  8094  0006C2  51AC               	movf	(printf@width+1)& (0+255),w,b
  8095  0006C4  E1F4               	bnz	l7318
  8096  0006C6  05AB               	decf	printf@width& (0+255),w,b
  8097  0006C8  A0D8               	btfss	status,0,c
  8098  0006CA  D063               	goto	l1053
  8099  0006CC  D7F0               	goto	l1046
  8100  0006CE                     l7324:
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;doprnt.c: 1181: (putch(' ') );
  8104  0006CE  0E20               	movlw	32
  8105  0006D0  ECC9  F018         	call	_putch
  8106                           
  8107                           ;doprnt.c: 1182: width--;
  8108  0006D4  0100               	movlb	0	; () banked
  8109  0006D6  07AB               	decf	printf@width& (0+255),f,b
  8110  0006D8  A0D8               	btfss	status,0,c
  8111  0006DA  07AC               	decf	(printf@width+1)& (0+255),f,b
  8112  0006DC                     l1049:
  8113                           
  8114                           ; BSR set to: 0
  8115                           
  8116                           ; BSR set to: 0
  8117  0006DC  BFAC               	btfsc	(printf@width+1)& (0+255),7,b
  8118  0006DE  D005               	goto	u6890
  8119  0006E0  51AC               	movf	(printf@width+1)& (0+255),w,b
  8120  0006E2  E1F5               	bnz	l7324
  8121  0006E4  05AB               	decf	printf@width& (0+255),w,b
  8122  0006E6  B0D8               	btfsc	status,0,c
  8123  0006E8  D7F2               	goto	l1050
  8124  0006EA                     u6890:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;doprnt.c: 1183: }
  8128                           ;doprnt.c: 1188: if(flag & 0x03)
  8129                           
  8130                           ; BSR set to: 0
  8131  0006EA  0E03               	movlw	3
  8132  0006EC  15A6               	andwf	printf@flag& (0+255),w,b
  8133  0006EE  6F8D               	movwf	??_printf& (0+255),b
  8134  0006F0  0E00               	movlw	0
  8135  0006F2  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8136  0006F4  6F8E               	movwf	(??_printf+1)& (0+255),b
  8137  0006F6  518D               	movf	??_printf& (0+255),w,b
  8138  0006F8  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8139  0006FA  B4D8               	btfsc	status,2,c
  8140  0006FC  D04A               	goto	l1053
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;doprnt.c: 1190: (putch('-') );
  8144  0006FE  0E2D               	movlw	45
  8145  000700  ECC9  F018         	call	_putch
  8146                           
  8147                           ;doprnt.c: 1195: }
  8148                           ;doprnt.c: 1196: while(c--) {
  8149  000704  D046               	goto	l1053
  8150  000706                     
  8151                           ;doprnt.c: 1200: {
  8152                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8153  000706  C0A0  F019         	movff	printf@val,___lldiv@dividend
  8154  00070A  C0A1  F01A         	movff	printf@val+1,___lldiv@dividend+1
  8155  00070E  C0A2  F01B         	movff	printf@val+2,___lldiv@dividend+2
  8156  000712  C0A3  F01C         	movff	printf@val+3,___lldiv@dividend+3
  8157  000716  0100               	movlb	0	; () banked
  8158  000718  51AF               	movf	printf@c& (0+255),w,b
  8159  00071A  0D04               	mullw	4
  8160  00071C  0EF5               	movlw	low _dpowers
  8161  00071E  24F3               	addwf	prodl,w,c
  8162  000720  6EF6               	movwf	tblptrl,c
  8163  000722  0E7C               	movlw	high _dpowers
  8164  000724  20F4               	addwfc	prodh,w,c
  8165  000726  6EF7               	movwf	tblptrh,c
  8166  000728                     	if	0	;There are less than 3 active tblptr bytes
  8167  000728                     	endif
  8168  000728  0009               	tblrd		*+
  8169  00072A  CFF5 F01D          	movff	tablat,___lldiv@divisor
  8170  00072E  0009               	tblrd		*+
  8171  000730  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  8172  000734  0009               	tblrd		*+
  8173  000736  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  8174  00073A  000A               	tblrd		*-
  8175  00073C  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  8176  000740  EC20  F013         	call	___lldiv	;wreg free
  8177  000744  C019  F09C         	movff	?___lldiv,printf@tmpval
  8178  000748  C01A  F09D         	movff	?___lldiv+1,printf@tmpval+1
  8179  00074C  C01B  F09E         	movff	?___lldiv+2,printf@tmpval+2
  8180  000750  C01C  F09F         	movff	?___lldiv+3,printf@tmpval+3
  8181                           
  8182                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8183  000754  C09C  F026         	movff	printf@tmpval,___llmod@dividend
  8184  000758  C09D  F027         	movff	printf@tmpval+1,___llmod@dividend+1
  8185  00075C  C09E  F028         	movff	printf@tmpval+2,___llmod@dividend+2
  8186  000760  C09F  F029         	movff	printf@tmpval+3,___llmod@dividend+3
  8187  000764  0E0A               	movlw	10
  8188  000766  6E2A               	movwf	___llmod@divisor,c
  8189  000768  0E00               	movlw	0
  8190  00076A  6E2B               	movwf	___llmod@divisor+1,c
  8191  00076C  0E00               	movlw	0
  8192  00076E  6E2C               	movwf	___llmod@divisor+2,c
  8193  000770  0E00               	movlw	0
  8194  000772  6E2D               	movwf	___llmod@divisor+3,c
  8195  000774  EC44  F014         	call	___llmod	;wreg free
  8196  000778  C026  F09C         	movff	?___llmod,printf@tmpval
  8197  00077C  C027  F09D         	movff	?___llmod+1,printf@tmpval+1
  8198  000780  C028  F09E         	movff	?___llmod+2,printf@tmpval+2
  8199  000784  C029  F09F         	movff	?___llmod+3,printf@tmpval+3
  8200                           
  8201                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8202  000788  0100               	movlb	0	; () banked
  8203  00078A  519C               	movf	printf@tmpval& (0+255),w,b
  8204  00078C  0F30               	addlw	48
  8205  00078E  ECC9  F018         	call	_putch
  8206  000792                     l1053:
  8207  000792  0100               	movlb	0	; () banked
  8208  000794  07AF               	decf	printf@c& (0+255),f,b
  8209  000796  29AF               	incf	printf@c& (0+255),w,b
  8210  000798  B4D8               	btfsc	status,2,c
  8211  00079A  D008               	goto	l1056
  8212  00079C  D7B4               	goto	l1054
  8213  00079E                     l7342:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;doprnt.c: 1208: (putch('0') );
  8217  00079E  0E30               	movlw	48
  8218  0007A0  ECC9  F018         	call	_putch
  8219                           
  8220                           ;doprnt.c: 1209: exp--;
  8221  0007A4  0100               	movlb	0	; () banked
  8222  0007A6  07A4               	decf	printf@exp& (0+255),f,b
  8223  0007A8  A0D8               	btfss	status,0,c
  8224  0007AA  07A5               	decf	(printf@exp+1)& (0+255),f,b
  8225  0007AC                     l1056:
  8226                           
  8227                           ; BSR set to: 0
  8228                           
  8229                           ; BSR set to: 0
  8230  0007AC  BFA5               	btfsc	(printf@exp+1)& (0+255),7,b
  8231  0007AE  D005               	goto	u6920
  8232  0007B0  51A5               	movf	(printf@exp+1)& (0+255),w,b
  8233  0007B2  E1F5               	bnz	l7342
  8234  0007B4  05A4               	decf	printf@exp& (0+255),w,b
  8235  0007B6  B0D8               	btfsc	status,0,c
  8236  0007B8  D7F2               	goto	l1057
  8237  0007BA                     u6920:
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;doprnt.c: 1210: }
  8241                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8242                           
  8243                           ; BSR set to: 0
  8244  0007BA  BFAE               	btfsc	(printf@prec+1)& (0+255),7,b
  8245  0007BC  D009               	goto	l1059
  8246  0007BE  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8247  0007C0  E104               	bnz	u6930
  8248  0007C2  0E09               	movlw	9
  8249  0007C4  5DAD               	subwf	printf@prec& (0+255),w,b
  8250  0007C6  A0D8               	btfss	status,0,c
  8251  0007C8  D003               	goto	l1059
  8252  0007CA                     u6930:
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8256  0007CA  0E08               	movlw	8
  8257  0007CC  6FAF               	movwf	printf@c& (0+255),b
  8258  0007CE  D002               	goto	l1060
  8259  0007D0                     l1059:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;doprnt.c: 1213: else
  8263                           ;doprnt.c: 1214: c = prec;
  8264  0007D0  C0AD  F0AF         	movff	printf@prec,printf@c
  8265  0007D4                     l1060:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;doprnt.c: 1215: prec -= c;
  8269                           
  8270                           ; BSR set to: 0
  8271  0007D4  51AF               	movf	printf@c& (0+255),w,b
  8272  0007D6  5FAD               	subwf	printf@prec& (0+255),f,b
  8273  0007D8  0E00               	movlw	0
  8274  0007DA  BFAF               	btfsc	printf@c& (0+255),7,b
  8275  0007DC  0EFF               	movlw	255
  8276  0007DE  5BAE               	subwfb	(printf@prec+1)& (0+255),f,b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;doprnt.c: 1219: if(c)
  8280  0007E0  51AF               	movf	printf@c& (0+255),w,b
  8281  0007E2  B4D8               	btfsc	status,2,c
  8282  0007E4  D003               	goto	l1061
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;doprnt.c: 1221: (putch('.') );
  8286  0007E6  0E2E               	movlw	46
  8287  0007E8  ECC9  F018         	call	_putch
  8288  0007EC                     l1061:
  8289                           
  8290                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8291  0007EC  0100               	movlb	0	; () banked
  8292  0007EE  51AF               	movf	printf@c& (0+255),w,b
  8293  0007F0  EC46  F00A         	call	_scale
  8294  0007F4  C06C  F093         	movff	?_scale,_printf$2861
  8295  0007F8  C06D  F094         	movff	?_scale+1,_printf$2861+1
  8296  0007FC  C06E  F095         	movff	?_scale+2,_printf$2861+2
  8297                           
  8298                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8299  000800  C0A8  F063         	movff	printf@fval,___ftmul@f2
  8300  000804  C0A9  F064         	movff	printf@fval+1,___ftmul@f2+1
  8301  000808  C0AA  F065         	movff	printf@fval+2,___ftmul@f2+2
  8302  00080C  C093  F060         	movff	_printf$2861,___ftmul@f1
  8303  000810  C094  F061         	movff	_printf$2861+1,___ftmul@f1+1
  8304  000814  C095  F062         	movff	_printf$2861+2,___ftmul@f1+2
  8305  000818  EC05  F010         	call	___ftmul	;wreg free
  8306  00081C  C060  F073         	movff	?___ftmul,___fttol@f1
  8307  000820  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  8308  000824  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  8309  000828  EC89  F00F         	call	___fttol	;wreg free
  8310  00082C  C073  F0A0         	movff	?___fttol,printf@val
  8311  000830  C074  F0A1         	movff	?___fttol+1,printf@val+1
  8312  000834  C075  F0A2         	movff	?___fttol+2,printf@val+2
  8313  000838  C076  F0A3         	movff	?___fttol+3,printf@val+3
  8314                           
  8315                           ;doprnt.c: 1228: while(c--) {
  8316  00083C  D06D               	goto	l1062
  8317  00083E                     
  8318                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8319  00083E  C0A0  F019         	movff	printf@val,___lldiv@dividend
  8320  000842  C0A1  F01A         	movff	printf@val+1,___lldiv@dividend+1
  8321  000846  C0A2  F01B         	movff	printf@val+2,___lldiv@dividend+2
  8322  00084A  C0A3  F01C         	movff	printf@val+3,___lldiv@dividend+3
  8323  00084E  0100               	movlb	0	; () banked
  8324  000850  51AF               	movf	printf@c& (0+255),w,b
  8325  000852  0D04               	mullw	4
  8326  000854  0EF5               	movlw	low _dpowers
  8327  000856  24F3               	addwf	prodl,w,c
  8328  000858  6EF6               	movwf	tblptrl,c
  8329  00085A  0E7C               	movlw	high _dpowers
  8330  00085C  20F4               	addwfc	prodh,w,c
  8331  00085E  6EF7               	movwf	tblptrh,c
  8332  000860                     	if	0	;There are less than 3 active tblptr bytes
  8333  000860                     	endif
  8334  000860  0009               	tblrd		*+
  8335  000862  CFF5 F01D          	movff	tablat,___lldiv@divisor
  8336  000866  0009               	tblrd		*+
  8337  000868  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  8338  00086C  0009               	tblrd		*+
  8339  00086E  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  8340  000872  000A               	tblrd		*-
  8341  000874  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  8342  000878  EC20  F013         	call	___lldiv	;wreg free
  8343  00087C  C019  F09C         	movff	?___lldiv,printf@tmpval
  8344  000880  C01A  F09D         	movff	?___lldiv+1,printf@tmpval+1
  8345  000884  C01B  F09E         	movff	?___lldiv+2,printf@tmpval+2
  8346  000888  C01C  F09F         	movff	?___lldiv+3,printf@tmpval+3
  8347                           
  8348                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8349  00088C  C09C  F026         	movff	printf@tmpval,___llmod@dividend
  8350  000890  C09D  F027         	movff	printf@tmpval+1,___llmod@dividend+1
  8351  000894  C09E  F028         	movff	printf@tmpval+2,___llmod@dividend+2
  8352  000898  C09F  F029         	movff	printf@tmpval+3,___llmod@dividend+3
  8353  00089C  0E0A               	movlw	10
  8354  00089E  6E2A               	movwf	___llmod@divisor,c
  8355  0008A0  0E00               	movlw	0
  8356  0008A2  6E2B               	movwf	___llmod@divisor+1,c
  8357  0008A4  0E00               	movlw	0
  8358  0008A6  6E2C               	movwf	___llmod@divisor+2,c
  8359  0008A8  0E00               	movlw	0
  8360  0008AA  6E2D               	movwf	___llmod@divisor+3,c
  8361  0008AC  EC44  F014         	call	___llmod	;wreg free
  8362  0008B0  C026  F09C         	movff	?___llmod,printf@tmpval
  8363  0008B4  C027  F09D         	movff	?___llmod+1,printf@tmpval+1
  8364  0008B8  C028  F09E         	movff	?___llmod+2,printf@tmpval+2
  8365  0008BC  C029  F09F         	movff	?___llmod+3,printf@tmpval+3
  8366                           
  8367                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  8368  0008C0  0100               	movlb	0	; () banked
  8369  0008C2  519C               	movf	printf@tmpval& (0+255),w,b
  8370  0008C4  0F30               	addlw	48
  8371  0008C6  ECC9  F018         	call	_putch
  8372                           
  8373                           ;doprnt.c: 1232: val %= dpowers[c];
  8374  0008CA  C0A0  F026         	movff	printf@val,___llmod@dividend
  8375  0008CE  C0A1  F027         	movff	printf@val+1,___llmod@dividend+1
  8376  0008D2  C0A2  F028         	movff	printf@val+2,___llmod@dividend+2
  8377  0008D6  C0A3  F029         	movff	printf@val+3,___llmod@dividend+3
  8378  0008DA  0100               	movlb	0	; () banked
  8379  0008DC  51AF               	movf	printf@c& (0+255),w,b
  8380  0008DE  0D04               	mullw	4
  8381  0008E0  0EF5               	movlw	low _dpowers
  8382  0008E2  24F3               	addwf	prodl,w,c
  8383  0008E4  6EF6               	movwf	tblptrl,c
  8384  0008E6  0E7C               	movlw	high _dpowers
  8385  0008E8  20F4               	addwfc	prodh,w,c
  8386  0008EA  6EF7               	movwf	tblptrh,c
  8387  0008EC                     	if	0	;There are less than 3 active tblptr bytes
  8388  0008EC                     	endif
  8389  0008EC  0009               	tblrd		*+
  8390  0008EE  CFF5 F02A          	movff	tablat,___llmod@divisor
  8391  0008F2  0009               	tblrd		*+
  8392  0008F4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  8393  0008F8  0009               	tblrd		*+
  8394  0008FA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  8395  0008FE  000A               	tblrd		*-
  8396  000900  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  8397  000904  EC44  F014         	call	___llmod	;wreg free
  8398  000908  C026  F0A0         	movff	?___llmod,printf@val
  8399  00090C  C027  F0A1         	movff	?___llmod+1,printf@val+1
  8400  000910  C028  F0A2         	movff	?___llmod+2,printf@val+2
  8401  000914  C029  F0A3         	movff	?___llmod+3,printf@val+3
  8402  000918                     l1062:
  8403  000918  0100               	movlb	0	; () banked
  8404  00091A  07AF               	decf	printf@c& (0+255),f,b
  8405  00091C  29AF               	incf	printf@c& (0+255),w,b
  8406  00091E  B4D8               	btfsc	status,2,c
  8407  000920  D008               	goto	l1065
  8408  000922  D78D               	goto	l1063
  8409  000924                     
  8410                           ; BSR set to: 0
  8411                           ;doprnt.c: 1236: (putch('0') );
  8412                           
  8413                           ; BSR set to: 0
  8414  000924  0E30               	movlw	48
  8415  000926  ECC9  F018         	call	_putch
  8416                           
  8417                           ;doprnt.c: 1237: prec--;
  8418  00092A  0100               	movlb	0	; () banked
  8419  00092C  07AD               	decf	printf@prec& (0+255),f,b
  8420  00092E  A0D8               	btfss	status,0,c
  8421  000930  07AE               	decf	(printf@prec+1)& (0+255),f,b
  8422  000932                     l1065:
  8423                           
  8424                           ; BSR set to: 0
  8425                           
  8426                           ; BSR set to: 0
  8427  000932  51AD               	movf	printf@prec& (0+255),w,b
  8428  000934  11AE               	iorwf	(printf@prec+1)& (0+255),w,b
  8429  000936  B4D8               	btfsc	status,2,c
  8430  000938  D124               	goto	u7170
  8431  00093A  D7F4               	goto	l1066
  8432  00093C                     l1019:
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;doprnt.c: 1246: }
  8436                           ;doprnt.c: 1253: {
  8437                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  8438                           
  8439                           ; BSR set to: 0
  8440  00093C  C098  FFD9         	movff	printf@ap,fsr2l
  8441  000940  C099  FFDA         	movff	printf@ap+1,fsr2h
  8442  000944  CFDE F0A0          	movff	postinc2,printf@val
  8443  000948  CFDD F0A1          	movff	postdec2,printf@val+1
  8444  00094C  0E00               	movlw	0
  8445  00094E  BFA1               	btfsc	(printf@val+1)& (0+255),7,b
  8446  000950  0EFF               	movlw	-1
  8447  000952  6FA2               	movwf	(printf@val+2)& (0+255),b
  8448  000954  6FA3               	movwf	(printf@val+3)& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451  000956  0E02               	movlw	2
  8452  000958  2798               	addwf	printf@ap& (0+255),f,b
  8453  00095A  0E00               	movlw	0
  8454  00095C  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;doprnt.c: 1261: if((long)val < 0) {
  8458  00095E  AFA3               	btfss	(printf@val+3)& (0+255),7,b
  8459  000960  D00A               	goto	l1068
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;doprnt.c: 1262: flag |= 0x03;
  8463  000962  0E03               	movlw	3
  8464  000964  13A6               	iorwf	printf@flag& (0+255),f,b
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;doprnt.c: 1263: val = -val;
  8468  000966  1FA3               	comf	(printf@val+3)& (0+255),f,b
  8469  000968  1FA2               	comf	(printf@val+2)& (0+255),f,b
  8470  00096A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  8471  00096C  6DA0               	negf	printf@val& (0+255),b
  8472  00096E  0E00               	movlw	0
  8473  000970  23A1               	addwfc	(printf@val+1)& (0+255),f,b
  8474  000972  23A2               	addwfc	(printf@val+2)& (0+255),f,b
  8475  000974  23A3               	addwfc	(printf@val+3)& (0+255),f,b
  8476  000976                     l1068:
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;doprnt.c: 1264: }
  8480                           ;doprnt.c: 1266: }
  8481                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8482                           
  8483                           ; BSR set to: 0
  8484  000976  51AD               	movf	printf@prec& (0+255),w,b
  8485  000978  11AE               	iorwf	(printf@prec+1)& (0+255),w,b
  8486  00097A  A4D8               	btfss	status,2,c
  8487  00097C  D008               	goto	l1069
  8488                           
  8489                           ; BSR set to: 0
  8490  00097E  51A0               	movf	printf@val& (0+255),w,b
  8491  000980  11A1               	iorwf	(printf@val+1)& (0+255),w,b
  8492  000982  11A2               	iorwf	(printf@val+2)& (0+255),w,b
  8493  000984  11A3               	iorwf	(printf@val+3)& (0+255),w,b
  8494  000986  A4D8               	btfss	status,2,c
  8495  000988  D002               	goto	l1069
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;doprnt.c: 1291: prec++;
  8499  00098A  4BAD               	infsnz	printf@prec& (0+255),f,b
  8500  00098C  2BAE               	incf	(printf@prec+1)& (0+255),f,b
  8501  00098E                     l1069:
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8505                           
  8506                           ; BSR set to: 0
  8507  00098E  0E01               	movlw	1
  8508  000990  6FAF               	movwf	printf@c& (0+255),b
  8509  000992                     l7396:
  8510                           
  8511                           ; BSR set to: 0
  8512  000992  0E0A               	movlw	10
  8513  000994  19AF               	xorwf	printf@c& (0+255),w,b
  8514  000996  B4D8               	btfsc	status,2,c
  8515  000998  D018               	goto	u7020
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;doprnt.c: 1306: if(val < dpowers[c])
  8519                           
  8520                           ; BSR set to: 0
  8521                           
  8522                           ; BSR set to: 0
  8523  00099A  51AF               	movf	printf@c& (0+255),w,b
  8524  00099C  0D04               	mullw	4
  8525  00099E  0EF5               	movlw	low _dpowers
  8526  0009A0  24F3               	addwf	prodl,w,c
  8527  0009A2  6EF6               	movwf	tblptrl,c
  8528  0009A4  0E7C               	movlw	high _dpowers
  8529  0009A6  20F4               	addwfc	prodh,w,c
  8530  0009A8  6EF7               	movwf	tblptrh,c
  8531  0009AA                     	if	0	;There are less than 3 active tblptr bytes
  8532  0009AA                     	endif
  8533  0009AA  0009               	tblrd		*+
  8534  0009AC  50F5               	movf	tablat,w,c
  8535  0009AE  5DA0               	subwf	printf@val& (0+255),w,b
  8536  0009B0  0009               	tblrd		*+
  8537  0009B2  50F5               	movf	tablat,w,c
  8538  0009B4  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  8539  0009B6  0009               	tblrd		*+
  8540  0009B8  50F5               	movf	tablat,w,c
  8541  0009BA  59A2               	subwfb	(printf@val+2)& (0+255),w,b
  8542  0009BC  0009               	tblrd		*+
  8543  0009BE  50F5               	movf	tablat,w,c
  8544  0009C0  59A3               	subwfb	(printf@val+3)& (0+255),w,b
  8545  0009C2  A0D8               	btfss	status,0,c
  8546  0009C4  D002               	goto	u7020
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;doprnt.c: 1307: break;
  8554  0009C6  2BAF               	incf	printf@c& (0+255),f,b
  8555  0009C8  D7E4               	goto	l7396
  8556  0009CA                     u7020:
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;doprnt.c: 1339: if(c < prec)
  8560                           
  8561                           ; BSR set to: 0
  8562  0009CA  0E80               	movlw	128
  8563  0009CC  BFAF               	btfsc	printf@c& (0+255),7,b
  8564  0009CE  0E7F               	movlw	127
  8565  0009D0  6F8D               	movwf	??_printf& (0+255),b
  8566  0009D2  51AD               	movf	printf@prec& (0+255),w,b
  8567  0009D4  5DAF               	subwf	printf@c& (0+255),w,b
  8568  0009D6  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8569  0009D8  0A80               	xorlw	128
  8570  0009DA  598D               	subwfb	??_printf& (0+255),w,b
  8571  0009DC  B0D8               	btfsc	status,0,c
  8572  0009DE  D003               	goto	l1073
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;doprnt.c: 1340: c = prec;
  8576  0009E0  C0AD  F0AF         	movff	printf@prec,printf@c
  8577  0009E4  D010               	goto	l1075
  8578  0009E6                     l1073:
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;doprnt.c: 1341: else if(prec < c)
  8582                           
  8583                           ; BSR set to: 0
  8584  0009E6  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8585  0009E8  0A80               	xorlw	128
  8586  0009EA  6F8D               	movwf	??_printf& (0+255),b
  8587  0009EC  51AF               	movf	printf@c& (0+255),w,b
  8588  0009EE  5DAD               	subwf	printf@prec& (0+255),w,b
  8589  0009F0  0E80               	movlw	128
  8590  0009F2  BFAF               	btfsc	printf@c& (0+255),7,b
  8591  0009F4  0E7F               	movlw	127
  8592  0009F6  598D               	subwfb	??_printf& (0+255),w,b
  8593  0009F8  B0D8               	btfsc	status,0,c
  8594  0009FA  D005               	goto	l1075
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;doprnt.c: 1342: prec = c;
  8598  0009FC  51AF               	movf	printf@c& (0+255),w,b
  8599  0009FE  6FAD               	movwf	printf@prec& (0+255),b
  8600  000A00  6BAE               	clrf	(printf@prec+1)& (0+255),b
  8601  000A02  BFAD               	btfsc	printf@prec& (0+255),7,b
  8602  000A04  07AE               	decf	(printf@prec+1)& (0+255),f,b
  8603  000A06                     l1075:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8607                           
  8608                           ; BSR set to: 0
  8609                           
  8610                           ; BSR set to: 0
  8611  000A06  51AB               	movf	printf@width& (0+255),w,b
  8612  000A08  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  8613  000A0A  B4D8               	btfsc	status,2,c
  8614  000A0C  D00D               	goto	l1076
  8615                           
  8616                           ; BSR set to: 0
  8617  000A0E  0E03               	movlw	3
  8618  000A10  15A6               	andwf	printf@flag& (0+255),w,b
  8619  000A12  6F8D               	movwf	??_printf& (0+255),b
  8620  000A14  0E00               	movlw	0
  8621  000A16  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8622  000A18  6F8E               	movwf	(??_printf+1)& (0+255),b
  8623  000A1A  518D               	movf	??_printf& (0+255),w,b
  8624  000A1C  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8625  000A1E  B4D8               	btfsc	status,2,c
  8626  000A20  D003               	goto	l1076
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;doprnt.c: 1346: width--;
  8630  000A22  07AB               	decf	printf@width& (0+255),f,b
  8631  000A24  A0D8               	btfss	status,0,c
  8632  000A26  07AC               	decf	(printf@width+1)& (0+255),f,b
  8633  000A28                     l1076:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8637                           
  8638                           ; BSR set to: 0
  8639  000A28  ADA7               	btfss	(printf@flag+1)& (0+255),6,b
  8640  000A2A  D013               	goto	l1079
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;doprnt.c: 1349: if(width > prec)
  8644  000A2C  51AB               	movf	printf@width& (0+255),w,b
  8645  000A2E  5DAD               	subwf	printf@prec& (0+255),w,b
  8646  000A30  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8647  000A32  0A80               	xorlw	128
  8648  000A34  6F8D               	movwf	??_printf& (0+255),b
  8649  000A36  51AC               	movf	(printf@width+1)& (0+255),w,b
  8650  000A38  0A80               	xorlw	128
  8651  000A3A  598D               	subwfb	??_printf& (0+255),w,b
  8652  000A3C  B0D8               	btfsc	status,0,c
  8653  000A3E  D005               	goto	l1078
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;doprnt.c: 1350: width -= prec;
  8657  000A40  51AD               	movf	printf@prec& (0+255),w,b
  8658  000A42  5FAB               	subwf	printf@width& (0+255),f,b
  8659  000A44  51AE               	movf	(printf@prec+1)& (0+255),w,b
  8660  000A46  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  8661  000A48  D004               	goto	l1079
  8662  000A4A                     l1078:
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;doprnt.c: 1351: else
  8666                           ;doprnt.c: 1352: width = 0;
  8667                           
  8668                           ; BSR set to: 0
  8669  000A4A  0E00               	movlw	0
  8670  000A4C  6FAC               	movwf	(printf@width+1)& (0+255),b
  8671  000A4E  0E00               	movlw	0
  8672  000A50  6FAB               	movwf	printf@width& (0+255),b
  8673  000A52                     l1079:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;doprnt.c: 1353: }
  8677                           ;doprnt.c: 1381: if(width > c)
  8678                           
  8679                           ; BSR set to: 0
  8680                           
  8681                           ; BSR set to: 0
  8682  000A52  0E80               	movlw	128
  8683  000A54  BFAF               	btfsc	printf@c& (0+255),7,b
  8684  000A56  0E7F               	movlw	127
  8685  000A58  6F8D               	movwf	??_printf& (0+255),b
  8686  000A5A  51AB               	movf	printf@width& (0+255),w,b
  8687  000A5C  5DAF               	subwf	printf@c& (0+255),w,b
  8688  000A5E  51AC               	movf	(printf@width+1)& (0+255),w,b
  8689  000A60  0A80               	xorlw	128
  8690  000A62  598D               	subwfb	??_printf& (0+255),w,b
  8691  000A64  B0D8               	btfsc	status,0,c
  8692  000A66  D007               	goto	l1080
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;doprnt.c: 1382: width -= c;
  8696  000A68  51AF               	movf	printf@c& (0+255),w,b
  8697  000A6A  5FAB               	subwf	printf@width& (0+255),f,b
  8698  000A6C  0E00               	movlw	0
  8699  000A6E  BFAF               	btfsc	printf@c& (0+255),7,b
  8700  000A70  0EFF               	movlw	255
  8701  000A72  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  8702  000A74  D004               	goto	l1081
  8703  000A76                     l1080:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;doprnt.c: 1383: else
  8707                           ;doprnt.c: 1384: width = 0;
  8708                           
  8709                           ; BSR set to: 0
  8710  000A76  0E00               	movlw	0
  8711  000A78  6FAC               	movwf	(printf@width+1)& (0+255),b
  8712  000A7A  0E00               	movlw	0
  8713  000A7C  6FAB               	movwf	printf@width& (0+255),b
  8714  000A7E                     l1081:
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;doprnt.c: 1387: if(flag & 0x04) {
  8718                           
  8719                           ; BSR set to: 0
  8720  000A7E  A5A6               	btfss	printf@flag& (0+255),2,b
  8721  000A80  D01A               	goto	l1082
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;doprnt.c: 1392: if(flag & 0x03)
  8725  000A82  0E03               	movlw	3
  8726  000A84  15A6               	andwf	printf@flag& (0+255),w,b
  8727  000A86  6F8D               	movwf	??_printf& (0+255),b
  8728  000A88  0E00               	movlw	0
  8729  000A8A  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8730  000A8C  6F8E               	movwf	(??_printf+1)& (0+255),b
  8731  000A8E  518D               	movf	??_printf& (0+255),w,b
  8732  000A90  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8733  000A92  B4D8               	btfsc	status,2,c
  8734  000A94  D003               	goto	l1083
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;doprnt.c: 1393: (putch('-') );
  8738  000A96  0E2D               	movlw	45
  8739  000A98  ECC9  F018         	call	_putch
  8740  000A9C                     l1083:
  8741                           
  8742                           ;doprnt.c: 1415: if(width)
  8743  000A9C  0100               	movlb	0	; () banked
  8744  000A9E  51AB               	movf	printf@width& (0+255),w,b
  8745  000AA0  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  8746  000AA2  B4D8               	btfsc	status,2,c
  8747  000AA4  D065               	goto	l1092
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;doprnt.c: 1417: (putch('0') );
  8751                           
  8752                           ; BSR set to: 0
  8753                           
  8754                           ;doprnt.c: 1416: do
  8755  000AA6  0E30               	movlw	48
  8756  000AA8  ECC9  F018         	call	_putch
  8757                           
  8758                           ;doprnt.c: 1418: while(--width);
  8759  000AAC  0100               	movlb	0	; () banked
  8760  000AAE  07AB               	decf	printf@width& (0+255),f,b
  8761  000AB0  A0D8               	btfss	status,0,c
  8762  000AB2  07AC               	decf	(printf@width+1)& (0+255),f,b
  8763  000AB4  D7F4               	goto	L13
  8764  000AB6                     l1082:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;doprnt.c: 1422: {
  8768                           ;doprnt.c: 1424: if(width
  8769                           ;doprnt.c: 1428: )
  8770                           
  8771                           ; BSR set to: 0
  8772  000AB6  51AB               	movf	printf@width& (0+255),w,b
  8773  000AB8  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  8774  000ABA  B4D8               	btfsc	status,2,c
  8775  000ABC  D00B               	goto	u7150
  8776  000ABE                     u7140:
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;doprnt.c: 1430: (putch(' ') );
  8780                           
  8781                           ; BSR set to: 0
  8782                           
  8783                           ;doprnt.c: 1429: do
  8784  000ABE  0E20               	movlw	32
  8785  000AC0  ECC9  F018         	call	_putch
  8786                           
  8787                           ;doprnt.c: 1431: while(--width);
  8788  000AC4  0100               	movlb	0	; () banked
  8789  000AC6  07AB               	decf	printf@width& (0+255),f,b
  8790  000AC8  A0D8               	btfss	status,0,c
  8791  000ACA  07AC               	decf	(printf@width+1)& (0+255),f,b
  8792  000ACC  51AB               	movf	printf@width& (0+255),w,b
  8793  000ACE  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  8794  000AD0  A4D8               	btfss	status,2,c
  8795  000AD2  D7F5               	goto	u7140
  8796  000AD4                     u7150:
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;doprnt.c: 1438: if(flag & 0x03)
  8800                           
  8801                           ; BSR set to: 0
  8802                           
  8803                           ; BSR set to: 0
  8804  000AD4  0E03               	movlw	3
  8805  000AD6  15A6               	andwf	printf@flag& (0+255),w,b
  8806  000AD8  6F8D               	movwf	??_printf& (0+255),b
  8807  000ADA  0E00               	movlw	0
  8808  000ADC  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  8809  000ADE  6F8E               	movwf	(??_printf+1)& (0+255),b
  8810  000AE0  518D               	movf	??_printf& (0+255),w,b
  8811  000AE2  118E               	iorwf	(??_printf+1)& (0+255),w,b
  8812  000AE4  B4D8               	btfsc	status,2,c
  8813  000AE6  D044               	goto	l1092
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;doprnt.c: 1439: (putch('-') );
  8817  000AE8  0E2D               	movlw	45
  8818  000AEA  ECC9  F018         	call	_putch
  8819                           
  8820                           ;doprnt.c: 1469: }
  8821                           ;doprnt.c: 1474: while(prec--) {
  8822  000AEE  D040               	goto	l1092
  8823  000AF0                     l7458:
  8824                           
  8825                           ;doprnt.c: 1478: {
  8826                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8827  000AF0  C0AD  F08D         	movff	printf@prec,??_printf
  8828  000AF4  C0AE  F08E         	movff	printf@prec+1,??_printf+1
  8829  000AF8  0100               	movlb	0	; () banked
  8830  000AFA  90D8               	bcf	status,0,c
  8831  000AFC  378D               	rlcf	??_printf& (0+255),f,b
  8832  000AFE  378E               	rlcf	(??_printf+1)& (0+255),f,b
  8833  000B00  90D8               	bcf	status,0,c
  8834  000B02  378D               	rlcf	??_printf& (0+255),f,b
  8835  000B04  378E               	rlcf	(??_printf+1)& (0+255),f,b
  8836  000B06  0EF5               	movlw	low _dpowers
  8837  000B08  258D               	addwf	??_printf& (0+255),w,b
  8838  000B0A  6EF6               	movwf	tblptrl,c
  8839  000B0C  0E7C               	movlw	high _dpowers
  8840  000B0E  218E               	addwfc	(??_printf+1)& (0+255),w,b
  8841  000B10  6EF7               	movwf	tblptrh,c
  8842  000B12                     	if	0	;There are less than 3 active tblptr bytes
  8843  000B12                     	endif
  8844  000B12  0009               	tblrd		*+
  8845  000B14  CFF5 F01D          	movff	tablat,___lldiv@divisor
  8846  000B18  0009               	tblrd		*+
  8847  000B1A  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  8848  000B1E  0009               	tblrd		*+
  8849  000B20  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  8850  000B24  000A               	tblrd		*-
  8851  000B26  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  8852  000B2A  C0A0  F019         	movff	printf@val,___lldiv@dividend
  8853  000B2E  C0A1  F01A         	movff	printf@val+1,___lldiv@dividend+1
  8854  000B32  C0A2  F01B         	movff	printf@val+2,___lldiv@dividend+2
  8855  000B36  C0A3  F01C         	movff	printf@val+3,___lldiv@dividend+3
  8856  000B3A  EC20  F013         	call	___lldiv	;wreg free
  8857  000B3E  C019  F026         	movff	?___lldiv,___llmod@dividend
  8858  000B42  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  8859  000B46  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  8860  000B4A  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  8861  000B4E  0E0A               	movlw	10
  8862  000B50  6E2A               	movwf	___llmod@divisor,c
  8863  000B52  0E00               	movlw	0
  8864  000B54  6E2B               	movwf	___llmod@divisor+1,c
  8865  000B56  0E00               	movlw	0
  8866  000B58  6E2C               	movwf	___llmod@divisor+2,c
  8867  000B5A  0E00               	movlw	0
  8868  000B5C  6E2D               	movwf	___llmod@divisor+3,c
  8869  000B5E  EC44  F014         	call	___llmod	;wreg free
  8870  000B62  5026               	movf	?___llmod,w,c
  8871  000B64  0F30               	addlw	48
  8872  000B66  0100               	movlb	0	; () banked
  8873  000B68  6FAF               	movwf	printf@c& (0+255),b
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;doprnt.c: 1523: }
  8877                           ;doprnt.c: 1524: (putch(c) );
  8878  000B6A  51AF               	movf	printf@c& (0+255),w,b
  8879  000B6C  ECC9  F018         	call	_putch
  8880  000B70                     l1092:
  8881  000B70  0100               	movlb	0	; () banked
  8882  000B72  07AD               	decf	printf@prec& (0+255),f,b
  8883  000B74  A0D8               	btfss	status,0,c
  8884  000B76  07AE               	decf	(printf@prec+1)& (0+255),f,b
  8885  000B78  29AD               	incf	printf@prec& (0+255),w,b
  8886  000B7A  E1BA               	bnz	l7458
  8887  000B7C  29AE               	incf	(printf@prec+1)& (0+255),w,b
  8888  000B7E  A4D8               	btfss	status,2,c
  8889  000B80  D7B7               	goto	l1093
  8890  000B82                     u7170:
  8891                           
  8892                           ; BSR set to: 0
  8893                           
  8894                           ; BSR set to: 0
  8895  000B82  C088  FFF6         	movff	printf@f,tblptrl
  8896  000B86  C089  FFF7         	movff	printf@f+1,tblptrh
  8897  000B8A  0100               	movlb	0	; () banked
  8898  000B8C  4B88               	infsnz	printf@f& (0+255),f,b
  8899  000B8E  2B89               	incf	(printf@f+1)& (0+255),f,b
  8900  000B90                     	if	0	;tblptru may be non-zero
  8901  000B90                     	endif
  8902  000B90                     	if	0	;tblptru may be non-zero
  8903  000B90                     	endif
  8904  000B90  0008               	tblrd		*
  8905  000B92  CFF5 F0AF          	movff	tablat,printf@c
  8906  000B96  51AF               	movf	printf@c& (0+255),w,b
  8907  000B98  B4D8               	btfsc	status,2,c
  8908  000B9A  0012               	return	
  8909  000B9C  EF96  F000         	goto	l985
  8910  000BA0                     __end_of_printf:
  8911                           	opt stack 0
  8912                           tosu	equ	0xFFF
  8913                           tosh	equ	0xFFE
  8914                           tosl	equ	0xFFD
  8915                           pclath	equ	0xFFA
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodh	equ	0xFF4
  8921                           prodl	equ	0xFF3
  8922                           intcon	equ	0xFF2
  8923                           postinc0	equ	0xFEE
  8924                           wreg	equ	0xFE8
  8925                           indf1	equ	0xFE7
  8926                           postdec1	equ	0xFE5
  8927                           fsr1h	equ	0xFE2
  8928                           fsr1l	equ	0xFE1
  8929                           indf2	equ	0xFDF
  8930                           postinc2	equ	0xFDE
  8931                           postdec2	equ	0xFDD
  8932                           fsr2h	equ	0xFDA
  8933                           fsr2l	equ	0xFD9
  8934                           status	equ	0xFD8
  8935                           
  8936 ;; *************** function _scale *****************
  8937 ;; Defined at:
  8938 ;;		line 425 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  scl             1    wreg     char 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  scl             1   18[BANK0 ] char 
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  3   12[BANK0 ] char 
  8945 ;; Registers used:
  8946 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8952 ;;      Params:         0       3       0       0       0       0       0
  8953 ;;      Locals:         0       4       0       0       0       0       0
  8954 ;;      Temps:          0       0       0       0       0       0       0
  8955 ;;      Totals:         0       7       0       0       0       0       0
  8956 ;;Total ram usage:        7 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    7
  8959 ;; This function calls:
  8960 ;;		___awdiv
  8961 ;;		___awmod
  8962 ;;		___ftmul
  8963 ;;		___wmul
  8964 ;; This function is called by:
  8965 ;;		_printf
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           	psect	text45
  8970  00148C                     __ptext45:
  8971                           	opt stack 0
  8972  00148C                     _scale:
  8973                           	opt stack 22
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;incstack = 0
  8977                           ;scale@scl stored from wreg
  8978  00148C  0100               	movlb	0	; () banked
  8979  00148E  6F72               	movwf	scale@scl& (0+255),b
  8980                           
  8981                           ;doprnt.c: 428: if(scl < 0) {
  8982  001490  0100               	movlb	0	; () banked
  8983  001492  AF72               	btfss	scale@scl& (0+255),7,b
  8984  001494  D106               	goto	l974
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;doprnt.c: 429: scl = -scl;
  8988  001496  6D72               	negf	scale@scl& (0+255),b
  8989                           
  8990                           ;doprnt.c: 430: if(scl>=110)
  8991  001498  5172               	movf	scale@scl& (0+255),w,b
  8992  00149A  0A80               	xorlw	128
  8993  00149C  0F12               	addlw	-238
  8994  00149E  A0D8               	btfss	status,0,c
  8995  0014A0  D093               	goto	l975
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8999  0014A2  0E00               	movlw	0
  9000  0014A4  6E2A               	movwf	___wmul@multiplicand+1,c
  9001  0014A6  0E03               	movlw	3
  9002  0014A8  6E29               	movwf	___wmul@multiplicand,c
  9003  0014AA  0E00               	movlw	0
  9004  0014AC  6E22               	movwf	___awdiv@divisor+1,c
  9005  0014AE  0E0A               	movlw	10
  9006  0014B0  6E21               	movwf	___awdiv@divisor,c
  9007  0014B2  0E00               	movlw	0
  9008  0014B4  6E1C               	movwf	___awmod@divisor+1,c
  9009  0014B6  0E64               	movlw	100
  9010  0014B8  6E1B               	movwf	___awmod@divisor,c
  9011  0014BA  5172               	movf	scale@scl& (0+255),w,b
  9012  0014BC  6E19               	movwf	___awmod@dividend,c
  9013  0014BE  6A1A               	clrf	___awmod@dividend+1,c
  9014  0014C0  BE19               	btfsc	___awmod@dividend,7,c
  9015  0014C2  061A               	decf	___awmod@dividend+1,f,c
  9016  0014C4  ECD8  F013         	call	___awmod	;wreg free
  9017  0014C8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  9018  0014CC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  9019  0014D0  ECDE  F012         	call	___awdiv	;wreg free
  9020  0014D4  0E09               	movlw	9
  9021  0014D6  241F               	addwf	?___awdiv,w,c
  9022  0014D8  6E27               	movwf	___wmul@multiplier,c
  9023  0014DA  0E00               	movlw	0
  9024  0014DC  2020               	addwfc	?___awdiv+1,w,c
  9025  0014DE  6E28               	movwf	___wmul@multiplier+1,c
  9026  0014E0  EC90  F017         	call	___wmul	;wreg free
  9027  0014E4  0E44               	movlw	low __npowers_
  9028  0014E6  2427               	addwf	?___wmul,w,c
  9029  0014E8  6EF6               	movwf	tblptrl,c
  9030  0014EA  0E7D               	movlw	high __npowers_
  9031  0014EC  2028               	addwfc	?___wmul+1,w,c
  9032  0014EE  6EF7               	movwf	tblptrh,c
  9033  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  9034  0014F0                     	endif
  9035  0014F0  0009               	tblrd		*+
  9036  0014F2  CFF5 F063          	movff	tablat,___ftmul@f2
  9037  0014F6  0009               	tblrd		*+
  9038  0014F8  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9039  0014FC  000A               	tblrd		*-
  9040  0014FE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9041  001502  0E00               	movlw	0
  9042  001504  6E22               	movwf	___awdiv@divisor+1,c
  9043  001506  0E64               	movlw	100
  9044  001508  6E21               	movwf	___awdiv@divisor,c
  9045  00150A  0100               	movlb	0	; () banked
  9046  00150C  5172               	movf	scale@scl& (0+255),w,b
  9047  00150E  6E1F               	movwf	___awdiv@dividend,c
  9048  001510  6A20               	clrf	___awdiv@dividend+1,c
  9049  001512  BE1F               	btfsc	___awdiv@dividend,7,c
  9050  001514  0620               	decf	___awdiv@dividend+1,f,c
  9051  001516  ECDE  F012         	call	___awdiv	;wreg free
  9052  00151A  0E12               	movlw	18
  9053  00151C  241F               	addwf	?___awdiv,w,c
  9054  00151E  6E27               	movwf	___wmul@multiplier,c
  9055  001520  0E00               	movlw	0
  9056  001522  2020               	addwfc	?___awdiv+1,w,c
  9057  001524  6E28               	movwf	___wmul@multiplier+1,c
  9058  001526  0E00               	movlw	0
  9059  001528  6E2A               	movwf	___wmul@multiplicand+1,c
  9060  00152A  0E03               	movlw	3
  9061  00152C  6E29               	movwf	___wmul@multiplicand,c
  9062  00152E  EC90  F017         	call	___wmul	;wreg free
  9063  001532  0E44               	movlw	low __npowers_
  9064  001534  2427               	addwf	?___wmul,w,c
  9065  001536  6EF6               	movwf	tblptrl,c
  9066  001538  0E7D               	movlw	high __npowers_
  9067  00153A  2028               	addwfc	?___wmul+1,w,c
  9068  00153C  6EF7               	movwf	tblptrh,c
  9069  00153E                     	if	0	;There are less than 3 active tblptr bytes
  9070  00153E                     	endif
  9071  00153E  0009               	tblrd		*+
  9072  001540  CFF5 F060          	movff	tablat,___ftmul@f1
  9073  001544  0009               	tblrd		*+
  9074  001546  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9075  00154A  000A               	tblrd		*-
  9076  00154C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9077  001550  EC05  F010         	call	___ftmul	;wreg free
  9078  001554  C060  F06F         	movff	?___ftmul,_scale$2860
  9079  001558  C061  F070         	movff	?___ftmul+1,_scale$2860+1
  9080  00155C  C062  F071         	movff	?___ftmul+2,_scale$2860+2
  9081                           
  9082                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9083  001560  C06F  F060         	movff	_scale$2860,___ftmul@f1
  9084  001564  C070  F061         	movff	_scale$2860+1,___ftmul@f1+1
  9085  001568  C071  F062         	movff	_scale$2860+2,___ftmul@f1+2
  9086  00156C  0E00               	movlw	0
  9087  00156E  6E2A               	movwf	___wmul@multiplicand+1,c
  9088  001570  0E03               	movlw	3
  9089  001572  6E29               	movwf	___wmul@multiplicand,c
  9090  001574  0E00               	movlw	0
  9091  001576  6E1C               	movwf	___awmod@divisor+1,c
  9092  001578  0E0A               	movlw	10
  9093  00157A  6E1B               	movwf	___awmod@divisor,c
  9094  00157C  0100               	movlb	0	; () banked
  9095  00157E  5172               	movf	scale@scl& (0+255),w,b
  9096  001580  6E19               	movwf	___awmod@dividend,c
  9097  001582  6A1A               	clrf	___awmod@dividend+1,c
  9098  001584  BE19               	btfsc	___awmod@dividend,7,c
  9099  001586  061A               	decf	___awmod@dividend+1,f,c
  9100  001588  ECD8  F013         	call	___awmod	;wreg free
  9101  00158C  C019  F027         	movff	?___awmod,___wmul@multiplier
  9102  001590  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9103  001594  EC90  F017         	call	___wmul	;wreg free
  9104  001598  0E44               	movlw	low __npowers_
  9105  00159A  2427               	addwf	?___wmul,w,c
  9106  00159C  6EF6               	movwf	tblptrl,c
  9107  00159E  0E7D               	movlw	high __npowers_
  9108  0015A0  2028               	addwfc	?___wmul+1,w,c
  9109  0015A2  6EF7               	movwf	tblptrh,c
  9110  0015A4                     	if	0	;There are less than 3 active tblptr bytes
  9111  0015A4                     	endif
  9112  0015A4  0009               	tblrd		*+
  9113  0015A6  CFF5 F063          	movff	tablat,___ftmul@f2
  9114  0015AA  0009               	tblrd		*+
  9115  0015AC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9116  0015B0  000A               	tblrd		*-
  9117  0015B2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9118  0015B6  EC05  F010         	call	___ftmul	;wreg free
  9119  0015BA  C060  F06C         	movff	?___ftmul,?_scale
  9120  0015BE  C061  F06D         	movff	?___ftmul+1,?_scale+1
  9121  0015C2  C062  F06E         	movff	?___ftmul+2,?_scale+2
  9122  0015C6  0012               	return	
  9123  0015C8                     l975:
  9124                           
  9125                           ;doprnt.c: 432: else if(scl > 10)
  9126  0015C8  0100               	movlb	0	; () banked
  9127  0015CA  5172               	movf	scale@scl& (0+255),w,b
  9128  0015CC  0A80               	xorlw	128
  9129  0015CE  0F75               	addlw	-139
  9130  0015D0  A0D8               	btfss	status,0,c
  9131  0015D2  D054               	goto	l978
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9135  0015D4  0E00               	movlw	0
  9136  0015D6  6E22               	movwf	___awdiv@divisor+1,c
  9137  0015D8  0E0A               	movlw	10
  9138  0015DA  6E21               	movwf	___awdiv@divisor,c
  9139  0015DC  5172               	movf	scale@scl& (0+255),w,b
  9140  0015DE  6E1F               	movwf	___awdiv@dividend,c
  9141  0015E0  6A20               	clrf	___awdiv@dividend+1,c
  9142  0015E2  BE1F               	btfsc	___awdiv@dividend,7,c
  9143  0015E4  0620               	decf	___awdiv@dividend+1,f,c
  9144  0015E6  ECDE  F012         	call	___awdiv	;wreg free
  9145  0015EA  0E09               	movlw	9
  9146  0015EC  241F               	addwf	?___awdiv,w,c
  9147  0015EE  6E27               	movwf	___wmul@multiplier,c
  9148  0015F0  0E00               	movlw	0
  9149  0015F2  2020               	addwfc	?___awdiv+1,w,c
  9150  0015F4  6E28               	movwf	___wmul@multiplier+1,c
  9151  0015F6  0E00               	movlw	0
  9152  0015F8  6E2A               	movwf	___wmul@multiplicand+1,c
  9153  0015FA  0E03               	movlw	3
  9154  0015FC  6E29               	movwf	___wmul@multiplicand,c
  9155  0015FE  EC90  F017         	call	___wmul	;wreg free
  9156  001602  0E44               	movlw	low __npowers_
  9157  001604  2427               	addwf	?___wmul,w,c
  9158  001606  6EF6               	movwf	tblptrl,c
  9159  001608  0E7D               	movlw	high __npowers_
  9160  00160A  2028               	addwfc	?___wmul+1,w,c
  9161  00160C  6EF7               	movwf	tblptrh,c
  9162  00160E                     	if	0	;There are less than 3 active tblptr bytes
  9163  00160E                     	endif
  9164  00160E  0009               	tblrd		*+
  9165  001610  CFF5 F060          	movff	tablat,___ftmul@f1
  9166  001614  0009               	tblrd		*+
  9167  001616  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9168  00161A  000A               	tblrd		*-
  9169  00161C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9170  001620  0E00               	movlw	0
  9171  001622  6E2A               	movwf	___wmul@multiplicand+1,c
  9172  001624  0E03               	movlw	3
  9173  001626  6E29               	movwf	___wmul@multiplicand,c
  9174  001628  0E00               	movlw	0
  9175  00162A  6E1C               	movwf	___awmod@divisor+1,c
  9176  00162C  0E0A               	movlw	10
  9177  00162E  6E1B               	movwf	___awmod@divisor,c
  9178  001630  0100               	movlb	0	; () banked
  9179  001632  5172               	movf	scale@scl& (0+255),w,b
  9180  001634  6E19               	movwf	___awmod@dividend,c
  9181  001636  6A1A               	clrf	___awmod@dividend+1,c
  9182  001638  BE19               	btfsc	___awmod@dividend,7,c
  9183  00163A  061A               	decf	___awmod@dividend+1,f,c
  9184  00163C  ECD8  F013         	call	___awmod	;wreg free
  9185  001640  C019  F027         	movff	?___awmod,___wmul@multiplier
  9186  001644  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9187  001648  EC90  F017         	call	___wmul	;wreg free
  9188  00164C  0E44               	movlw	low __npowers_
  9189  00164E  2427               	addwf	?___wmul,w,c
  9190  001650  6EF6               	movwf	tblptrl,c
  9191  001652  0E7D               	movlw	high __npowers_
  9192  001654  2028               	addwfc	?___wmul+1,w,c
  9193  001656  6EF7               	movwf	tblptrh,c
  9194  001658                     	if	0	;There are less than 3 active tblptr bytes
  9195  001658                     	endif
  9196  001658  0009               	tblrd		*+
  9197  00165A  CFF5 F063          	movff	tablat,___ftmul@f2
  9198  00165E  0009               	tblrd		*+
  9199  001660  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9200  001664  000A               	tblrd		*-
  9201  001666  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9202  00166A  EC05  F010         	call	___ftmul	;wreg free
  9203  00166E  C060  F06C         	movff	?___ftmul,?_scale
  9204  001672  C061  F06D         	movff	?___ftmul+1,?_scale+1
  9205  001676  C062  F06E         	movff	?___ftmul+2,?_scale+2
  9206  00167A  0012               	return	
  9207  00167C                     l978:
  9208                           
  9209                           ;doprnt.c: 434: return _npowers_[scl];
  9210  00167C  0100               	movlb	0	; () banked
  9211  00167E  5172               	movf	scale@scl& (0+255),w,b
  9212  001680  0D03               	mullw	3
  9213  001682  0E44               	movlw	low __npowers_
  9214  001684  24F3               	addwf	prodl,w,c
  9215  001686  6EF6               	movwf	tblptrl,c
  9216  001688  0E7D               	movlw	high __npowers_
  9217  00168A  20F4               	addwfc	prodh,w,c
  9218  00168C  6EF7               	movwf	tblptrh,c
  9219  00168E                     	if	0	;There are less than 3 active tblptr bytes
  9220  00168E                     	endif
  9221  00168E  0009               	tblrd		*+
  9222  001690  CFF5 F06C          	movff	tablat,?_scale
  9223  001694  0009               	tblrd		*+
  9224  001696  CFF5 F06D          	movff	tablat,?_scale+1
  9225  00169A  000A               	tblrd		*-
  9226  00169C  CFF5 F06E          	movff	tablat,?_scale+2
  9227                           
  9228                           ; BSR set to: 0
  9229  0016A0  0012               	return	
  9230  0016A2                     l974:
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;doprnt.c: 435: }
  9234                           ;doprnt.c: 436: if(scl>=110)
  9235                           
  9236                           ; BSR set to: 0
  9237  0016A2  5172               	movf	scale@scl& (0+255),w,b
  9238  0016A4  0A80               	xorlw	128
  9239  0016A6  0F12               	addlw	-238
  9240  0016A8  A0D8               	btfss	status,0,c
  9241  0016AA  D093               	goto	l979
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9245  0016AC  0E00               	movlw	0
  9246  0016AE  6E2A               	movwf	___wmul@multiplicand+1,c
  9247  0016B0  0E03               	movlw	3
  9248  0016B2  6E29               	movwf	___wmul@multiplicand,c
  9249  0016B4  0E00               	movlw	0
  9250  0016B6  6E22               	movwf	___awdiv@divisor+1,c
  9251  0016B8  0E0A               	movlw	10
  9252  0016BA  6E21               	movwf	___awdiv@divisor,c
  9253  0016BC  0E00               	movlw	0
  9254  0016BE  6E1C               	movwf	___awmod@divisor+1,c
  9255  0016C0  0E64               	movlw	100
  9256  0016C2  6E1B               	movwf	___awmod@divisor,c
  9257  0016C4  5172               	movf	scale@scl& (0+255),w,b
  9258  0016C6  6E19               	movwf	___awmod@dividend,c
  9259  0016C8  6A1A               	clrf	___awmod@dividend+1,c
  9260  0016CA  BE19               	btfsc	___awmod@dividend,7,c
  9261  0016CC  061A               	decf	___awmod@dividend+1,f,c
  9262  0016CE  ECD8  F013         	call	___awmod	;wreg free
  9263  0016D2  C019  F01F         	movff	?___awmod,___awdiv@dividend
  9264  0016D6  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  9265  0016DA  ECDE  F012         	call	___awdiv	;wreg free
  9266  0016DE  0E09               	movlw	9
  9267  0016E0  241F               	addwf	?___awdiv,w,c
  9268  0016E2  6E27               	movwf	___wmul@multiplier,c
  9269  0016E4  0E00               	movlw	0
  9270  0016E6  2020               	addwfc	?___awdiv+1,w,c
  9271  0016E8  6E28               	movwf	___wmul@multiplier+1,c
  9272  0016EA  EC90  F017         	call	___wmul	;wreg free
  9273  0016EE  0E1D               	movlw	low __powers_
  9274  0016F0  2427               	addwf	?___wmul,w,c
  9275  0016F2  6EF6               	movwf	tblptrl,c
  9276  0016F4  0E7D               	movlw	high __powers_
  9277  0016F6  2028               	addwfc	?___wmul+1,w,c
  9278  0016F8  6EF7               	movwf	tblptrh,c
  9279  0016FA                     	if	0	;There are less than 3 active tblptr bytes
  9280  0016FA                     	endif
  9281  0016FA  0009               	tblrd		*+
  9282  0016FC  CFF5 F063          	movff	tablat,___ftmul@f2
  9283  001700  0009               	tblrd		*+
  9284  001702  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9285  001706  000A               	tblrd		*-
  9286  001708  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9287  00170C  0E00               	movlw	0
  9288  00170E  6E22               	movwf	___awdiv@divisor+1,c
  9289  001710  0E64               	movlw	100
  9290  001712  6E21               	movwf	___awdiv@divisor,c
  9291  001714  0100               	movlb	0	; () banked
  9292  001716  5172               	movf	scale@scl& (0+255),w,b
  9293  001718  6E1F               	movwf	___awdiv@dividend,c
  9294  00171A  6A20               	clrf	___awdiv@dividend+1,c
  9295  00171C  BE1F               	btfsc	___awdiv@dividend,7,c
  9296  00171E  0620               	decf	___awdiv@dividend+1,f,c
  9297  001720  ECDE  F012         	call	___awdiv	;wreg free
  9298  001724  0E12               	movlw	18
  9299  001726  241F               	addwf	?___awdiv,w,c
  9300  001728  6E27               	movwf	___wmul@multiplier,c
  9301  00172A  0E00               	movlw	0
  9302  00172C  2020               	addwfc	?___awdiv+1,w,c
  9303  00172E  6E28               	movwf	___wmul@multiplier+1,c
  9304  001730  0E00               	movlw	0
  9305  001732  6E2A               	movwf	___wmul@multiplicand+1,c
  9306  001734  0E03               	movlw	3
  9307  001736  6E29               	movwf	___wmul@multiplicand,c
  9308  001738  EC90  F017         	call	___wmul	;wreg free
  9309  00173C  0E1D               	movlw	low __powers_
  9310  00173E  2427               	addwf	?___wmul,w,c
  9311  001740  6EF6               	movwf	tblptrl,c
  9312  001742  0E7D               	movlw	high __powers_
  9313  001744  2028               	addwfc	?___wmul+1,w,c
  9314  001746  6EF7               	movwf	tblptrh,c
  9315  001748                     	if	0	;There are less than 3 active tblptr bytes
  9316  001748                     	endif
  9317  001748  0009               	tblrd		*+
  9318  00174A  CFF5 F060          	movff	tablat,___ftmul@f1
  9319  00174E  0009               	tblrd		*+
  9320  001750  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9321  001754  000A               	tblrd		*-
  9322  001756  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9323  00175A  EC05  F010         	call	___ftmul	;wreg free
  9324  00175E  C060  F06F         	movff	?___ftmul,_scale$2860
  9325  001762  C061  F070         	movff	?___ftmul+1,_scale$2860+1
  9326  001766  C062  F071         	movff	?___ftmul+2,_scale$2860+2
  9327                           
  9328                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9329  00176A  C06F  F060         	movff	_scale$2860,___ftmul@f1
  9330  00176E  C070  F061         	movff	_scale$2860+1,___ftmul@f1+1
  9331  001772  C071  F062         	movff	_scale$2860+2,___ftmul@f1+2
  9332  001776  0E00               	movlw	0
  9333  001778  6E2A               	movwf	___wmul@multiplicand+1,c
  9334  00177A  0E03               	movlw	3
  9335  00177C  6E29               	movwf	___wmul@multiplicand,c
  9336  00177E  0E00               	movlw	0
  9337  001780  6E1C               	movwf	___awmod@divisor+1,c
  9338  001782  0E0A               	movlw	10
  9339  001784  6E1B               	movwf	___awmod@divisor,c
  9340  001786  0100               	movlb	0	; () banked
  9341  001788  5172               	movf	scale@scl& (0+255),w,b
  9342  00178A  6E19               	movwf	___awmod@dividend,c
  9343  00178C  6A1A               	clrf	___awmod@dividend+1,c
  9344  00178E  BE19               	btfsc	___awmod@dividend,7,c
  9345  001790  061A               	decf	___awmod@dividend+1,f,c
  9346  001792  ECD8  F013         	call	___awmod	;wreg free
  9347  001796  C019  F027         	movff	?___awmod,___wmul@multiplier
  9348  00179A  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9349  00179E  EC90  F017         	call	___wmul	;wreg free
  9350  0017A2  0E1D               	movlw	low __powers_
  9351  0017A4  2427               	addwf	?___wmul,w,c
  9352  0017A6  6EF6               	movwf	tblptrl,c
  9353  0017A8  0E7D               	movlw	high __powers_
  9354  0017AA  2028               	addwfc	?___wmul+1,w,c
  9355  0017AC  6EF7               	movwf	tblptrh,c
  9356  0017AE                     	if	0	;There are less than 3 active tblptr bytes
  9357  0017AE                     	endif
  9358  0017AE  0009               	tblrd		*+
  9359  0017B0  CFF5 F063          	movff	tablat,___ftmul@f2
  9360  0017B4  0009               	tblrd		*+
  9361  0017B6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9362  0017BA  000A               	tblrd		*-
  9363  0017BC  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9364  0017C0  EC05  F010         	call	___ftmul	;wreg free
  9365  0017C4  C060  F06C         	movff	?___ftmul,?_scale
  9366  0017C8  C061  F06D         	movff	?___ftmul+1,?_scale+1
  9367  0017CC  C062  F06E         	movff	?___ftmul+2,?_scale+2
  9368  0017D0  0012               	return	
  9369  0017D2                     l979:
  9370                           
  9371                           ;doprnt.c: 438: else if(scl > 10)
  9372  0017D2  0100               	movlb	0	; () banked
  9373  0017D4  5172               	movf	scale@scl& (0+255),w,b
  9374  0017D6  0A80               	xorlw	128
  9375  0017D8  0F75               	addlw	-139
  9376  0017DA  A0D8               	btfss	status,0,c
  9377  0017DC  D054               	goto	l981
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9381  0017DE  0E00               	movlw	0
  9382  0017E0  6E22               	movwf	___awdiv@divisor+1,c
  9383  0017E2  0E0A               	movlw	10
  9384  0017E4  6E21               	movwf	___awdiv@divisor,c
  9385  0017E6  5172               	movf	scale@scl& (0+255),w,b
  9386  0017E8  6E1F               	movwf	___awdiv@dividend,c
  9387  0017EA  6A20               	clrf	___awdiv@dividend+1,c
  9388  0017EC  BE1F               	btfsc	___awdiv@dividend,7,c
  9389  0017EE  0620               	decf	___awdiv@dividend+1,f,c
  9390  0017F0  ECDE  F012         	call	___awdiv	;wreg free
  9391  0017F4  0E09               	movlw	9
  9392  0017F6  241F               	addwf	?___awdiv,w,c
  9393  0017F8  6E27               	movwf	___wmul@multiplier,c
  9394  0017FA  0E00               	movlw	0
  9395  0017FC  2020               	addwfc	?___awdiv+1,w,c
  9396  0017FE  6E28               	movwf	___wmul@multiplier+1,c
  9397  001800  0E00               	movlw	0
  9398  001802  6E2A               	movwf	___wmul@multiplicand+1,c
  9399  001804  0E03               	movlw	3
  9400  001806  6E29               	movwf	___wmul@multiplicand,c
  9401  001808  EC90  F017         	call	___wmul	;wreg free
  9402  00180C  0E1D               	movlw	low __powers_
  9403  00180E  2427               	addwf	?___wmul,w,c
  9404  001810  6EF6               	movwf	tblptrl,c
  9405  001812  0E7D               	movlw	high __powers_
  9406  001814  2028               	addwfc	?___wmul+1,w,c
  9407  001816  6EF7               	movwf	tblptrh,c
  9408  001818                     	if	0	;There are less than 3 active tblptr bytes
  9409  001818                     	endif
  9410  001818  0009               	tblrd		*+
  9411  00181A  CFF5 F060          	movff	tablat,___ftmul@f1
  9412  00181E  0009               	tblrd		*+
  9413  001820  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9414  001824  000A               	tblrd		*-
  9415  001826  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9416  00182A  0E00               	movlw	0
  9417  00182C  6E2A               	movwf	___wmul@multiplicand+1,c
  9418  00182E  0E03               	movlw	3
  9419  001830  6E29               	movwf	___wmul@multiplicand,c
  9420  001832  0E00               	movlw	0
  9421  001834  6E1C               	movwf	___awmod@divisor+1,c
  9422  001836  0E0A               	movlw	10
  9423  001838  6E1B               	movwf	___awmod@divisor,c
  9424  00183A  0100               	movlb	0	; () banked
  9425  00183C  5172               	movf	scale@scl& (0+255),w,b
  9426  00183E  6E19               	movwf	___awmod@dividend,c
  9427  001840  6A1A               	clrf	___awmod@dividend+1,c
  9428  001842  BE19               	btfsc	___awmod@dividend,7,c
  9429  001844  061A               	decf	___awmod@dividend+1,f,c
  9430  001846  ECD8  F013         	call	___awmod	;wreg free
  9431  00184A  C019  F027         	movff	?___awmod,___wmul@multiplier
  9432  00184E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9433  001852  EC90  F017         	call	___wmul	;wreg free
  9434  001856  0E1D               	movlw	low __powers_
  9435  001858  2427               	addwf	?___wmul,w,c
  9436  00185A  6EF6               	movwf	tblptrl,c
  9437  00185C  0E7D               	movlw	high __powers_
  9438  00185E  2028               	addwfc	?___wmul+1,w,c
  9439  001860  6EF7               	movwf	tblptrh,c
  9440  001862                     	if	0	;There are less than 3 active tblptr bytes
  9441  001862                     	endif
  9442  001862  0009               	tblrd		*+
  9443  001864  CFF5 F063          	movff	tablat,___ftmul@f2
  9444  001868  0009               	tblrd		*+
  9445  00186A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9446  00186E  000A               	tblrd		*-
  9447  001870  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9448  001874  EC05  F010         	call	___ftmul	;wreg free
  9449  001878  C060  F06C         	movff	?___ftmul,?_scale
  9450  00187C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  9451  001880  C062  F06E         	movff	?___ftmul+2,?_scale+2
  9452  001884  0012               	return	
  9453  001886                     l981:
  9454                           
  9455                           ;doprnt.c: 440: return _powers_[scl];
  9456  001886  0100               	movlb	0	; () banked
  9457  001888  5172               	movf	scale@scl& (0+255),w,b
  9458  00188A  0D03               	mullw	3
  9459  00188C  0E1D               	movlw	low __powers_
  9460  00188E  24F3               	addwf	prodl,w,c
  9461  001890  6EF6               	movwf	tblptrl,c
  9462  001892  0E7D               	movlw	high __powers_
  9463  001894  20F4               	addwfc	prodh,w,c
  9464  001896  6EF7               	movwf	tblptrh,c
  9465  001898                     	if	0	;There are less than 3 active tblptr bytes
  9466  001898                     	endif
  9467  001898  0009               	tblrd		*+
  9468  00189A  CFF5 F06C          	movff	tablat,?_scale
  9469  00189E  0009               	tblrd		*+
  9470  0018A0  CFF5 F06D          	movff	tablat,?_scale+1
  9471  0018A4  000A               	tblrd		*-
  9472  0018A6  CFF5 F06E          	movff	tablat,?_scale+2
  9473  0018AA  0012               	return	
  9474  0018AC                     __end_of_scale:
  9475                           	opt stack 0
  9476                           tosu	equ	0xFFF
  9477                           tosh	equ	0xFFE
  9478                           tosl	equ	0xFFD
  9479                           pclath	equ	0xFFA
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           indf1	equ	0xFE7
  9490                           postdec1	equ	0xFE5
  9491                           fsr1h	equ	0xFE2
  9492                           fsr1l	equ	0xFE1
  9493                           indf2	equ	0xFDF
  9494                           postinc2	equ	0xFDE
  9495                           postdec2	equ	0xFDD
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function _putch *****************
  9501 ;; Defined at:
  9502 ;;		line 138 in file "mcc_generated_files/eusart1.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  txData          1    wreg     unsigned char 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  txData          1   25[COMRAM] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  1    wreg      void 
  9509 ;; Registers used:
  9510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9516 ;;      Params:         0       0       0       0       0       0       0
  9517 ;;      Locals:         1       0       0       0       0       0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0
  9519 ;;      Totals:         1       0       0       0       0       0       0
  9520 ;;Total ram usage:        1 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    6
  9523 ;; This function calls:
  9524 ;;		_EUSART1_Write
  9525 ;; This function is called by:
  9526 ;;		_printf
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text46
  9531  003192                     __ptext46:
  9532                           	opt stack 0
  9533  003192                     _putch:
  9534                           	opt stack 23
  9535                           
  9536                           ;incstack = 0
  9537                           ;putch@txData stored from wreg
  9538  003192  6E1A               	movwf	putch@txData,c
  9539                           
  9540                           ;eusart1.c: 140: EUSART1_Write(txData);
  9541  003194  501A               	movf	putch@txData,w,c
  9542  003196  ECB6  F016         	call	_EUSART1_Write
  9543  00319A  0012               	return		;funcret
  9544  00319C                     __end_of_putch:
  9545                           	opt stack 0
  9546                           tosu	equ	0xFFF
  9547                           tosh	equ	0xFFE
  9548                           tosl	equ	0xFFD
  9549                           pclath	equ	0xFFA
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodh	equ	0xFF4
  9555                           prodl	equ	0xFF3
  9556                           intcon	equ	0xFF2
  9557                           postinc0	equ	0xFEE
  9558                           wreg	equ	0xFE8
  9559                           indf1	equ	0xFE7
  9560                           postdec1	equ	0xFE5
  9561                           fsr1h	equ	0xFE2
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function _fround *****************
  9571 ;; Defined at:
  9572 ;;		line 409 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  prec            1    wreg     unsigned char 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  prec            1   21[BANK0 ] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  3   12[BANK0 ] unsigned char 
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9586 ;;      Params:         0       3       0       0       0       0       0
  9587 ;;      Locals:         0       7       0       0       0       0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0
  9589 ;;      Totals:         0      10       0       0       0       0       0
  9590 ;;Total ram usage:       10 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    7
  9593 ;; This function calls:
  9594 ;;		___awdiv
  9595 ;;		___awmod
  9596 ;;		___ftmul
  9597 ;;		___wmul
  9598 ;; This function is called by:
  9599 ;;		_printf
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           	psect	text47
  9604  0018AC                     __ptext47:
  9605                           	opt stack 0
  9606  0018AC                     _fround:
  9607                           	opt stack 22
  9608                           
  9609                           ;incstack = 0
  9610                           ;fround@prec stored from wreg
  9611  0018AC  0100               	movlb	0	; () banked
  9612  0018AE  6F75               	movwf	fround@prec& (0+255),b
  9613                           
  9614                           ;doprnt.c: 413: if(prec>=110)
  9615  0018B0  0E6D               	movlw	109
  9616  0018B2  0100               	movlb	0	; () banked
  9617  0018B4  6575               	cpfsgt	fround@prec& (0+255),b
  9618  0018B6  D0A0               	goto	l968
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9622  0018B8  0E00               	movlw	0
  9623  0018BA  6E2A               	movwf	___wmul@multiplicand+1,c
  9624  0018BC  0E03               	movlw	3
  9625  0018BE  6E29               	movwf	___wmul@multiplicand,c
  9626  0018C0  0E00               	movlw	0
  9627  0018C2  6E22               	movwf	___awdiv@divisor+1,c
  9628  0018C4  0E0A               	movlw	10
  9629  0018C6  6E21               	movwf	___awdiv@divisor,c
  9630  0018C8  0E00               	movlw	0
  9631  0018CA  6E1C               	movwf	___awmod@divisor+1,c
  9632  0018CC  0E64               	movlw	100
  9633  0018CE  6E1B               	movwf	___awmod@divisor,c
  9634  0018D0  C075  F019         	movff	fround@prec,___awmod@dividend
  9635  0018D4  6A1A               	clrf	___awmod@dividend+1,c
  9636  0018D6  ECD8  F013         	call	___awmod	;wreg free
  9637  0018DA  C019  F01F         	movff	?___awmod,___awdiv@dividend
  9638  0018DE  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  9639  0018E2  ECDE  F012         	call	___awdiv	;wreg free
  9640  0018E6  0E09               	movlw	9
  9641  0018E8  241F               	addwf	?___awdiv,w,c
  9642  0018EA  6E27               	movwf	___wmul@multiplier,c
  9643  0018EC  0E00               	movlw	0
  9644  0018EE  2020               	addwfc	?___awdiv+1,w,c
  9645  0018F0  6E28               	movwf	___wmul@multiplier+1,c
  9646  0018F2  EC90  F017         	call	___wmul	;wreg free
  9647  0018F6  0E44               	movlw	low __npowers_
  9648  0018F8  2427               	addwf	?___wmul,w,c
  9649  0018FA  6EF6               	movwf	tblptrl,c
  9650  0018FC  0E7D               	movlw	high __npowers_
  9651  0018FE  2028               	addwfc	?___wmul+1,w,c
  9652  001900  6EF7               	movwf	tblptrh,c
  9653  001902                     	if	0	;There are less than 3 active tblptr bytes
  9654  001902                     	endif
  9655  001902  0009               	tblrd		*+
  9656  001904  CFF5 F063          	movff	tablat,___ftmul@f2
  9657  001908  0009               	tblrd		*+
  9658  00190A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9659  00190E  000A               	tblrd		*-
  9660  001910  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9661  001914  0E00               	movlw	0
  9662  001916  6E22               	movwf	___awdiv@divisor+1,c
  9663  001918  0E64               	movlw	100
  9664  00191A  6E21               	movwf	___awdiv@divisor,c
  9665  00191C  C075  F01F         	movff	fround@prec,___awdiv@dividend
  9666  001920  6A20               	clrf	___awdiv@dividend+1,c
  9667  001922  ECDE  F012         	call	___awdiv	;wreg free
  9668  001926  0E12               	movlw	18
  9669  001928  241F               	addwf	?___awdiv,w,c
  9670  00192A  6E27               	movwf	___wmul@multiplier,c
  9671  00192C  0E00               	movlw	0
  9672  00192E  2020               	addwfc	?___awdiv+1,w,c
  9673  001930  6E28               	movwf	___wmul@multiplier+1,c
  9674  001932  0E00               	movlw	0
  9675  001934  6E2A               	movwf	___wmul@multiplicand+1,c
  9676  001936  0E03               	movlw	3
  9677  001938  6E29               	movwf	___wmul@multiplicand,c
  9678  00193A  EC90  F017         	call	___wmul	;wreg free
  9679  00193E  0E44               	movlw	low __npowers_
  9680  001940  2427               	addwf	?___wmul,w,c
  9681  001942  6EF6               	movwf	tblptrl,c
  9682  001944  0E7D               	movlw	high __npowers_
  9683  001946  2028               	addwfc	?___wmul+1,w,c
  9684  001948  6EF7               	movwf	tblptrh,c
  9685  00194A                     	if	0	;There are less than 3 active tblptr bytes
  9686  00194A                     	endif
  9687  00194A  0009               	tblrd		*+
  9688  00194C  CFF5 F060          	movff	tablat,___ftmul@f1
  9689  001950  0009               	tblrd		*+
  9690  001952  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9691  001956  000A               	tblrd		*-
  9692  001958  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9693  00195C  EC05  F010         	call	___ftmul	;wreg free
  9694  001960  C060  F072         	movff	?___ftmul,_fround$2858
  9695  001964  C061  F073         	movff	?___ftmul+1,_fround$2858+1
  9696  001968  C062  F074         	movff	?___ftmul+2,_fround$2858+2
  9697                           
  9698                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9699  00196C  0E00               	movlw	0
  9700  00196E  6E2A               	movwf	___wmul@multiplicand+1,c
  9701  001970  0E03               	movlw	3
  9702  001972  6E29               	movwf	___wmul@multiplicand,c
  9703  001974  0E00               	movlw	0
  9704  001976  6E1C               	movwf	___awmod@divisor+1,c
  9705  001978  0E0A               	movlw	10
  9706  00197A  6E1B               	movwf	___awmod@divisor,c
  9707  00197C  C075  F019         	movff	fround@prec,___awmod@dividend
  9708  001980  6A1A               	clrf	___awmod@dividend+1,c
  9709  001982  ECD8  F013         	call	___awmod	;wreg free
  9710  001986  C019  F027         	movff	?___awmod,___wmul@multiplier
  9711  00198A  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9712  00198E  EC90  F017         	call	___wmul	;wreg free
  9713  001992  0E44               	movlw	low __npowers_
  9714  001994  2427               	addwf	?___wmul,w,c
  9715  001996  6EF6               	movwf	tblptrl,c
  9716  001998  0E7D               	movlw	high __npowers_
  9717  00199A  2028               	addwfc	?___wmul+1,w,c
  9718  00199C  6EF7               	movwf	tblptrh,c
  9719  00199E                     	if	0	;There are less than 3 active tblptr bytes
  9720  00199E                     	endif
  9721  00199E  0009               	tblrd		*+
  9722  0019A0  CFF5 F063          	movff	tablat,___ftmul@f2
  9723  0019A4  0009               	tblrd		*+
  9724  0019A6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9725  0019AA  000A               	tblrd		*-
  9726  0019AC  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9727  0019B0  C072  F060         	movff	_fround$2858,___ftmul@f1
  9728  0019B4  C073  F061         	movff	_fround$2858+1,___ftmul@f1+1
  9729  0019B8  C074  F062         	movff	_fround$2858+2,___ftmul@f1+2
  9730  0019BC  EC05  F010         	call	___ftmul	;wreg free
  9731  0019C0  C060  F06F         	movff	?___ftmul,_fround$2859
  9732  0019C4  C061  F070         	movff	?___ftmul+1,_fround$2859+1
  9733  0019C8  C062  F071         	movff	?___ftmul+2,_fround$2859+2
  9734                           
  9735                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9736  0019CC  C06F  F060         	movff	_fround$2859,___ftmul@f1
  9737  0019D0  C070  F061         	movff	_fround$2859+1,___ftmul@f1+1
  9738  0019D4  C071  F062         	movff	_fround$2859+2,___ftmul@f1+2
  9739  0019D8  0E00               	movlw	0
  9740  0019DA  0100               	movlb	0	; () banked
  9741  0019DC  6F63               	movwf	___ftmul@f2& (0+255),b
  9742  0019DE  0E00               	movlw	0
  9743  0019E0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  9744  0019E2  0E3F               	movlw	63
  9745  0019E4  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  9746  0019E6  EC05  F010         	call	___ftmul	;wreg free
  9747  0019EA  C060  F06C         	movff	?___ftmul,?_fround
  9748  0019EE  C061  F06D         	movff	?___ftmul+1,?_fround+1
  9749  0019F2  C062  F06E         	movff	?___ftmul+2,?_fround+2
  9750  0019F6  0012               	return	
  9751  0019F8                     l968:
  9752                           
  9753                           ;doprnt.c: 415: else if(prec > 10)
  9754  0019F8  0E0A               	movlw	10
  9755  0019FA  0100               	movlb	0	; () banked
  9756  0019FC  6575               	cpfsgt	fround@prec& (0+255),b
  9757  0019FE  D064               	goto	l971
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9761  001A00  0E00               	movlw	0
  9762  001A02  6E2A               	movwf	___wmul@multiplicand+1,c
  9763  001A04  0E03               	movlw	3
  9764  001A06  6E29               	movwf	___wmul@multiplicand,c
  9765  001A08  0E00               	movlw	0
  9766  001A0A  6E1C               	movwf	___awmod@divisor+1,c
  9767  001A0C  0E0A               	movlw	10
  9768  001A0E  6E1B               	movwf	___awmod@divisor,c
  9769  001A10  C075  F019         	movff	fround@prec,___awmod@dividend
  9770  001A14  6A1A               	clrf	___awmod@dividend+1,c
  9771  001A16  ECD8  F013         	call	___awmod	;wreg free
  9772  001A1A  C019  F027         	movff	?___awmod,___wmul@multiplier
  9773  001A1E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  9774  001A22  EC90  F017         	call	___wmul	;wreg free
  9775  001A26  0E44               	movlw	low __npowers_
  9776  001A28  2427               	addwf	?___wmul,w,c
  9777  001A2A  6EF6               	movwf	tblptrl,c
  9778  001A2C  0E7D               	movlw	high __npowers_
  9779  001A2E  2028               	addwfc	?___wmul+1,w,c
  9780  001A30  6EF7               	movwf	tblptrh,c
  9781  001A32                     	if	0	;There are less than 3 active tblptr bytes
  9782  001A32                     	endif
  9783  001A32  0009               	tblrd		*+
  9784  001A34  CFF5 F063          	movff	tablat,___ftmul@f2
  9785  001A38  0009               	tblrd		*+
  9786  001A3A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  9787  001A3E  000A               	tblrd		*-
  9788  001A40  CFF5 F065          	movff	tablat,___ftmul@f2+2
  9789  001A44  0E00               	movlw	0
  9790  001A46  6E22               	movwf	___awdiv@divisor+1,c
  9791  001A48  0E0A               	movlw	10
  9792  001A4A  6E21               	movwf	___awdiv@divisor,c
  9793  001A4C  C075  F01F         	movff	fround@prec,___awdiv@dividend
  9794  001A50  6A20               	clrf	___awdiv@dividend+1,c
  9795  001A52  ECDE  F012         	call	___awdiv	;wreg free
  9796  001A56  0E09               	movlw	9
  9797  001A58  241F               	addwf	?___awdiv,w,c
  9798  001A5A  6E27               	movwf	___wmul@multiplier,c
  9799  001A5C  0E00               	movlw	0
  9800  001A5E  2020               	addwfc	?___awdiv+1,w,c
  9801  001A60  6E28               	movwf	___wmul@multiplier+1,c
  9802  001A62  0E00               	movlw	0
  9803  001A64  6E2A               	movwf	___wmul@multiplicand+1,c
  9804  001A66  0E03               	movlw	3
  9805  001A68  6E29               	movwf	___wmul@multiplicand,c
  9806  001A6A  EC90  F017         	call	___wmul	;wreg free
  9807  001A6E  0E44               	movlw	low __npowers_
  9808  001A70  2427               	addwf	?___wmul,w,c
  9809  001A72  6EF6               	movwf	tblptrl,c
  9810  001A74  0E7D               	movlw	high __npowers_
  9811  001A76  2028               	addwfc	?___wmul+1,w,c
  9812  001A78  6EF7               	movwf	tblptrh,c
  9813  001A7A                     	if	0	;There are less than 3 active tblptr bytes
  9814  001A7A                     	endif
  9815  001A7A  0009               	tblrd		*+
  9816  001A7C  CFF5 F060          	movff	tablat,___ftmul@f1
  9817  001A80  0009               	tblrd		*+
  9818  001A82  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9819  001A86  000A               	tblrd		*-
  9820  001A88  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9821  001A8C  EC05  F010         	call	___ftmul	;wreg free
  9822  001A90  C060  F072         	movff	?___ftmul,_fround$2858
  9823  001A94  C061  F073         	movff	?___ftmul+1,_fround$2858+1
  9824  001A98  C062  F074         	movff	?___ftmul+2,_fround$2858+2
  9825                           
  9826                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9827  001A9C  C072  F060         	movff	_fround$2858,___ftmul@f1
  9828  001AA0  C073  F061         	movff	_fround$2858+1,___ftmul@f1+1
  9829  001AA4  C074  F062         	movff	_fround$2858+2,___ftmul@f1+2
  9830  001AA8  0E00               	movlw	0
  9831  001AAA  0100               	movlb	0	; () banked
  9832  001AAC  6F63               	movwf	___ftmul@f2& (0+255),b
  9833  001AAE  0E00               	movlw	0
  9834  001AB0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  9835  001AB2  0E3F               	movlw	63
  9836  001AB4  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  9837  001AB6  EC05  F010         	call	___ftmul	;wreg free
  9838  001ABA  C060  F06C         	movff	?___ftmul,?_fround
  9839  001ABE  C061  F06D         	movff	?___ftmul+1,?_fround+1
  9840  001AC2  C062  F06E         	movff	?___ftmul+2,?_fround+2
  9841  001AC6  0012               	return	
  9842  001AC8                     l971:
  9843                           
  9844                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9845  001AC8  0100               	movlb	0	; () banked
  9846  001ACA  5175               	movf	fround@prec& (0+255),w,b
  9847  001ACC  0D03               	mullw	3
  9848  001ACE  0E44               	movlw	low __npowers_
  9849  001AD0  24F3               	addwf	prodl,w,c
  9850  001AD2  6EF6               	movwf	tblptrl,c
  9851  001AD4  0E7D               	movlw	high __npowers_
  9852  001AD6  20F4               	addwfc	prodh,w,c
  9853  001AD8  6EF7               	movwf	tblptrh,c
  9854  001ADA                     	if	0	;There are less than 3 active tblptr bytes
  9855  001ADA                     	endif
  9856  001ADA  0009               	tblrd		*+
  9857  001ADC  CFF5 F060          	movff	tablat,___ftmul@f1
  9858  001AE0  0009               	tblrd		*+
  9859  001AE2  CFF5 F061          	movff	tablat,___ftmul@f1+1
  9860  001AE6  000A               	tblrd		*-
  9861  001AE8  CFF5 F062          	movff	tablat,___ftmul@f1+2
  9862  001AEC  0E00               	movlw	0
  9863  001AEE  6F63               	movwf	___ftmul@f2& (0+255),b
  9864  001AF0  0E00               	movlw	0
  9865  001AF2  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  9866  001AF4  0E3F               	movlw	63
  9867  001AF6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  9868  001AF8  EC05  F010         	call	___ftmul	;wreg free
  9869  001AFC  C060  F06C         	movff	?___ftmul,?_fround
  9870  001B00  C061  F06D         	movff	?___ftmul+1,?_fround+1
  9871  001B04  C062  F06E         	movff	?___ftmul+2,?_fround+2
  9872  001B08  0012               	return	
  9873  001B0A                     __end_of_fround:
  9874                           	opt stack 0
  9875                           tosu	equ	0xFFF
  9876                           tosh	equ	0xFFE
  9877                           tosl	equ	0xFFD
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           postinc0	equ	0xFEE
  9887                           wreg	equ	0xFE8
  9888                           indf1	equ	0xFE7
  9889                           postdec1	equ	0xFE5
  9890                           fsr1h	equ	0xFE2
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function ___ftmul *****************
  9900 ;; Defined at:
  9901 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;  f1              3    0[BANK0 ] float 
  9904 ;;  f2              3    3[BANK0 ] float 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  9907 ;;  sign            1   11[BANK0 ] unsigned char 
  9908 ;;  cntr            1   10[BANK0 ] unsigned char 
  9909 ;;  exp             1    6[BANK0 ] unsigned char 
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  3    0[BANK0 ] float 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2, status,0, cstack
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9919 ;;      Params:         0       6       0       0       0       0       0
  9920 ;;      Locals:         0       6       0       0       0       0       0
  9921 ;;      Temps:          3       0       0       0       0       0       0
  9922 ;;      Totals:         3      12       0       0       0       0       0
  9923 ;;Total ram usage:       15 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    6
  9926 ;; This function calls:
  9927 ;;		___ftpack
  9928 ;; This function is called by:
  9929 ;;		_main
  9930 ;;		_fround
  9931 ;;		_scale
  9932 ;;		_printf
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text48
  9937  00200A                     __ptext48:
  9938                           	opt stack 0
  9939  00200A                     ___ftmul:
  9940                           	opt stack 22
  9941                           
  9942                           ;incstack = 0
  9943  00200A  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  9944  00200E  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  9945  002010  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  9946  002012  0100               	movlb	0	; () banked
  9947  002014  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9948  002016  362D               	rlcf	??___ftmul& (0+255),f,c
  9949  002018  E301               	bnc	u5821
  9950  00201A  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  9951  00201C                     u5821:
  9952  00201C  502D               	movf	??___ftmul,w,c
  9953  00201E  6F66               	movwf	___ftmul@exp& (0+255),b
  9954  002020  5166               	movf	___ftmul@exp& (0+255),w,b
  9955  002022  A4D8               	btfss	status,2,c
  9956  002024  D007               	goto	l1439
  9957                           
  9958                           ; BSR set to: 0
  9959  002026  0E00               	movlw	0
  9960  002028  6F60               	movwf	?___ftmul& (0+255),b
  9961  00202A  0E00               	movlw	0
  9962  00202C  6F61               	movwf	(?___ftmul+1)& (0+255),b
  9963  00202E  0E00               	movlw	0
  9964  002030  6F62               	movwf	(?___ftmul+2)& (0+255),b
  9965                           
  9966                           ; BSR set to: 0
  9967  002032  0012               	return	
  9968  002034                     l1439:
  9969                           
  9970                           ; BSR set to: 0
  9971                           
  9972                           ; BSR set to: 0
  9973  002034  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  9974  002038  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  9975  00203A  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  9976  00203C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9977  00203E  362D               	rlcf	??___ftmul& (0+255),f,c
  9978  002040  E301               	bnc	u5841
  9979  002042  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  9980  002044                     u5841:
  9981  002044  502D               	movf	??___ftmul,w,c
  9982  002046  6F6B               	movwf	___ftmul@sign& (0+255),b
  9983  002048  516B               	movf	___ftmul@sign& (0+255),w,b
  9984  00204A  A4D8               	btfss	status,2,c
  9985  00204C  D007               	goto	l1441
  9986                           
  9987                           ; BSR set to: 0
  9988  00204E  0E00               	movlw	0
  9989  002050  6F60               	movwf	?___ftmul& (0+255),b
  9990  002052  0E00               	movlw	0
  9991  002054  6F61               	movwf	(?___ftmul+1)& (0+255),b
  9992  002056  0E00               	movlw	0
  9993  002058  6F62               	movwf	(?___ftmul+2)& (0+255),b
  9994                           
  9995                           ; BSR set to: 0
  9996  00205A  0012               	return	
  9997  00205C                     l1441:
  9998                           
  9999                           ; BSR set to: 0
 10000                           
 10001                           ; BSR set to: 0
 10002  00205C  516B               	movf	___ftmul@sign& (0+255),w,b
 10003  00205E  0F7B               	addlw	123
 10004  002060  2766               	addwf	___ftmul@exp& (0+255),f,b
 10005                           
 10006                           ; BSR set to: 0
 10007  002062  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
 10008  002066  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10009  002068  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
 10010  00206A  0E80               	movlw	128
 10011  00206C  176B               	andwf	___ftmul@sign& (0+255),f,b
 10012                           
 10013                           ; BSR set to: 0
 10014  00206E  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10015                           
 10016                           ; BSR set to: 0
 10017  002070  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10018                           
 10019                           ; BSR set to: 0
 10020  002072  0EFF               	movlw	255
 10021  002074  1763               	andwf	___ftmul@f2& (0+255),f,b
 10022  002076  0EFF               	movlw	255
 10023  002078  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10024  00207A  0E00               	movlw	0
 10025  00207C  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10026                           
 10027                           ; BSR set to: 0
 10028  00207E  0E00               	movlw	0
 10029  002080  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
 10030  002082  0E00               	movlw	0
 10031  002084  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10032  002086  0E00               	movlw	0
 10033  002088  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10034                           
 10035                           ; BSR set to: 0
 10036  00208A  0E07               	movlw	7
 10037  00208C  6F6A               	movwf	___ftmul@cntr& (0+255),b
 10038  00208E                     
 10039                           ; BSR set to: 0
 10040                           
 10041                           ; BSR set to: 0
 10042  00208E  A160               	btfss	___ftmul@f1& (0+255),0,b
 10043  002090  D006               	goto	l1443
 10044                           
 10045                           ; BSR set to: 0
 10046  002092  5163               	movf	___ftmul@f2& (0+255),w,b
 10047  002094  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10048  002096  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10049  002098  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10050  00209A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10051  00209C  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10052  00209E                     l1443:
 10053                           
 10054                           ; BSR set to: 0
 10055                           
 10056                           ; BSR set to: 0
 10057  00209E  90D8               	bcf	status,0,c
 10058  0020A0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10059  0020A2  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10060  0020A4  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10061  0020A6  90D8               	bcf	status,0,c
 10062  0020A8  3763               	rlcf	___ftmul@f2& (0+255),f,b
 10063  0020AA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10064  0020AC  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10065                           
 10066                           ; BSR set to: 0
 10067  0020AE  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
 10068  0020B0  D7EE               	goto	l1442
 10069                           
 10070                           ; BSR set to: 0
 10071                           
 10072                           ; BSR set to: 0
 10073  0020B2  0E09               	movlw	9
 10074  0020B4  6F6A               	movwf	___ftmul@cntr& (0+255),b
 10075  0020B6                     
 10076                           ; BSR set to: 0
 10077                           
 10078                           ; BSR set to: 0
 10079  0020B6  A160               	btfss	___ftmul@f1& (0+255),0,b
 10080  0020B8  D006               	goto	l1446
 10081                           
 10082                           ; BSR set to: 0
 10083  0020BA  5163               	movf	___ftmul@f2& (0+255),w,b
 10084  0020BC  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10085  0020BE  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10086  0020C0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10087  0020C2  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10088  0020C4  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10089  0020C6                     l1446:
 10090                           
 10091                           ; BSR set to: 0
 10092                           
 10093                           ; BSR set to: 0
 10094  0020C6  90D8               	bcf	status,0,c
 10095  0020C8  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10096  0020CA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10097  0020CC  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10098  0020CE  90D8               	bcf	status,0,c
 10099  0020D0  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10100  0020D2  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10101  0020D4  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10102                           
 10103                           ; BSR set to: 0
 10104  0020D6  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
 10105  0020D8  D7EE               	goto	l1445
 10106                           
 10107                           ; BSR set to: 0
 10108                           
 10109                           ; BSR set to: 0
 10110  0020DA  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
 10111  0020DE  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10112  0020E2  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10113  0020E6  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
 10114  0020EA  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
 10115  0020EE  EC5E  F011         	call	___ftpack	;wreg free
 10116  0020F2  C019  F060         	movff	?___ftpack,?___ftmul
 10117  0020F6  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
 10118  0020FA  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
 10119  0020FE  0012               	return	
 10120  002100                     __end_of___ftmul:
 10121                           	opt stack 0
 10122                           tosu	equ	0xFFF
 10123                           tosh	equ	0xFFE
 10124                           tosl	equ	0xFFD
 10125                           pclath	equ	0xFFA
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon	equ	0xFF2
 10133                           postinc0	equ	0xFEE
 10134                           wreg	equ	0xFE8
 10135                           indf1	equ	0xFE7
 10136                           postdec1	equ	0xFE5
 10137                           fsr1h	equ	0xFE2
 10138                           fsr1l	equ	0xFE1
 10139                           indf2	equ	0xFDF
 10140                           postinc2	equ	0xFDE
 10141                           postdec2	equ	0xFDD
 10142                           fsr2h	equ	0xFDA
 10143                           fsr2l	equ	0xFD9
 10144                           status	equ	0xFD8
 10145                           
 10146 ;; *************** function ___awmod *****************
 10147 ;; Defined at:
 10148 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  dividend        2   24[COMRAM] int 
 10151 ;;  divisor         2   26[COMRAM] int 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  sign            1   29[COMRAM] unsigned char 
 10154 ;;  counter         1   28[COMRAM] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  2   24[COMRAM] int 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10164 ;;      Params:         4       0       0       0       0       0       0
 10165 ;;      Locals:         2       0       0       0       0       0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0
 10167 ;;      Totals:         6       0       0       0       0       0       0
 10168 ;;Total ram usage:        6 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    5
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_fround
 10175 ;;		_scale
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text49
 10180  0027B0                     __ptext49:
 10181                           	opt stack 0
 10182  0027B0                     ___awmod:
 10183                           	opt stack 23
 10184                           
 10185                           ;incstack = 0
 10186  0027B0  0E00               	movlw	0
 10187  0027B2  6E1E               	movwf	___awmod@sign,c
 10188  0027B4  AE1A               	btfss	___awmod@dividend+1,7,c
 10189  0027B6  D006               	goto	l1292
 10190  0027B8  6C19               	negf	___awmod@dividend,c
 10191  0027BA  1E1A               	comf	___awmod@dividend+1,f,c
 10192  0027BC  B0D8               	btfsc	status,0,c
 10193  0027BE  2A1A               	incf	___awmod@dividend+1,f,c
 10194  0027C0  0E01               	movlw	1
 10195  0027C2  6E1E               	movwf	___awmod@sign,c
 10196  0027C4                     l1292:
 10197  0027C4  AE1C               	btfss	___awmod@divisor+1,7,c
 10198  0027C6  D004               	goto	l1293
 10199  0027C8  6C1B               	negf	___awmod@divisor,c
 10200  0027CA  1E1C               	comf	___awmod@divisor+1,f,c
 10201  0027CC  B0D8               	btfsc	status,0,c
 10202  0027CE  2A1C               	incf	___awmod@divisor+1,f,c
 10203  0027D0                     l1293:
 10204  0027D0  501B               	movf	___awmod@divisor,w,c
 10205  0027D2  101C               	iorwf	___awmod@divisor+1,w,c
 10206  0027D4  B4D8               	btfsc	status,2,c
 10207  0027D6  D018               	goto	l1300
 10208  0027D8  0E01               	movlw	1
 10209  0027DA  6E1D               	movwf	___awmod@counter,c
 10210  0027DC  D004               	goto	l1295
 10211  0027DE  90D8               	bcf	status,0,c
 10212  0027E0  361B               	rlcf	___awmod@divisor,f,c
 10213  0027E2  361C               	rlcf	___awmod@divisor+1,f,c
 10214  0027E4  2A1D               	incf	___awmod@counter,f,c
 10215  0027E6                     l1295:
 10216  0027E6  AE1C               	btfss	___awmod@divisor+1,7,c
 10217  0027E8  D7FA               	goto	l1296
 10218  0027EA                     u5970:
 10219  0027EA  501B               	movf	___awmod@divisor,w,c
 10220  0027EC  5C19               	subwf	___awmod@dividend,w,c
 10221  0027EE  501C               	movf	___awmod@divisor+1,w,c
 10222  0027F0  581A               	subwfb	___awmod@dividend+1,w,c
 10223  0027F2  A0D8               	btfss	status,0,c
 10224  0027F4  D004               	goto	l1299
 10225  0027F6  501B               	movf	___awmod@divisor,w,c
 10226  0027F8  5E19               	subwf	___awmod@dividend,f,c
 10227  0027FA  501C               	movf	___awmod@divisor+1,w,c
 10228  0027FC  5A1A               	subwfb	___awmod@dividend+1,f,c
 10229  0027FE                     l1299:
 10230  0027FE  90D8               	bcf	status,0,c
 10231  002800  321C               	rrcf	___awmod@divisor+1,f,c
 10232  002802  321B               	rrcf	___awmod@divisor,f,c
 10233  002804  2E1D               	decfsz	___awmod@counter,f,c
 10234  002806  D7F1               	goto	u5970
 10235  002808                     l1300:
 10236  002808  501E               	movf	___awmod@sign,w,c
 10237  00280A  B4D8               	btfsc	status,2,c
 10238  00280C  D004               	goto	l1301
 10239  00280E  6C19               	negf	___awmod@dividend,c
 10240  002810  1E1A               	comf	___awmod@dividend+1,f,c
 10241  002812  B0D8               	btfsc	status,0,c
 10242  002814  2A1A               	incf	___awmod@dividend+1,f,c
 10243  002816                     l1301:
 10244  002816  C019  F019         	movff	___awmod@dividend,?___awmod
 10245  00281A  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
 10246  00281E  0012               	return	
 10247  002820                     __end_of___awmod:
 10248                           	opt stack 0
 10249                           tosu	equ	0xFFF
 10250                           tosh	equ	0xFFE
 10251                           tosl	equ	0xFFD
 10252                           pclath	equ	0xFFA
 10253                           tblptru	equ	0xFF8
 10254                           tblptrh	equ	0xFF7
 10255                           tblptrl	equ	0xFF6
 10256                           tablat	equ	0xFF5
 10257                           prodh	equ	0xFF4
 10258                           prodl	equ	0xFF3
 10259                           intcon	equ	0xFF2
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           indf1	equ	0xFE7
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function ___awdiv *****************
 10274 ;; Defined at:
 10275 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  dividend        2   30[COMRAM] int 
 10278 ;;  divisor         2   32[COMRAM] int 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  quotient        2   36[COMRAM] int 
 10281 ;;  sign            1   35[COMRAM] unsigned char 
 10282 ;;  counter         1   34[COMRAM] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  2   30[COMRAM] int 
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10292 ;;      Params:         4       0       0       0       0       0       0
 10293 ;;      Locals:         4       0       0       0       0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0
 10295 ;;      Totals:         8       0       0       0       0       0       0
 10296 ;;Total ram usage:        8 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    5
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_fround
 10303 ;;		_scale
 10304 ;;		_printf
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text50
 10309  0025BC                     __ptext50:
 10310                           	opt stack 0
 10311  0025BC                     ___awdiv:
 10312                           	opt stack 23
 10313                           
 10314                           ;incstack = 0
 10315  0025BC  0E00               	movlw	0
 10316  0025BE  6E24               	movwf	___awdiv@sign,c
 10317  0025C0  AE22               	btfss	___awdiv@divisor+1,7,c
 10318  0025C2  D006               	goto	l1279
 10319  0025C4  6C21               	negf	___awdiv@divisor,c
 10320  0025C6  1E22               	comf	___awdiv@divisor+1,f,c
 10321  0025C8  B0D8               	btfsc	status,0,c
 10322  0025CA  2A22               	incf	___awdiv@divisor+1,f,c
 10323  0025CC  0E01               	movlw	1
 10324  0025CE  6E24               	movwf	___awdiv@sign,c
 10325  0025D0                     l1279:
 10326  0025D0  AE20               	btfss	___awdiv@dividend+1,7,c
 10327  0025D2  D006               	goto	l1280
 10328  0025D4  6C1F               	negf	___awdiv@dividend,c
 10329  0025D6  1E20               	comf	___awdiv@dividend+1,f,c
 10330  0025D8  B0D8               	btfsc	status,0,c
 10331  0025DA  2A20               	incf	___awdiv@dividend+1,f,c
 10332  0025DC  0E01               	movlw	1
 10333  0025DE  1A24               	xorwf	___awdiv@sign,f,c
 10334  0025E0                     l1280:
 10335  0025E0  0E00               	movlw	0
 10336  0025E2  6E26               	movwf	___awdiv@quotient+1,c
 10337  0025E4  0E00               	movlw	0
 10338  0025E6  6E25               	movwf	___awdiv@quotient,c
 10339  0025E8  5021               	movf	___awdiv@divisor,w,c
 10340  0025EA  1022               	iorwf	___awdiv@divisor+1,w,c
 10341  0025EC  B4D8               	btfsc	status,2,c
 10342  0025EE  D01C               	goto	l1287
 10343  0025F0  0E01               	movlw	1
 10344  0025F2  6E23               	movwf	___awdiv@counter,c
 10345  0025F4  D004               	goto	l1282
 10346  0025F6  90D8               	bcf	status,0,c
 10347  0025F8  3621               	rlcf	___awdiv@divisor,f,c
 10348  0025FA  3622               	rlcf	___awdiv@divisor+1,f,c
 10349  0025FC  2A23               	incf	___awdiv@counter,f,c
 10350  0025FE                     l1282:
 10351  0025FE  AE22               	btfss	___awdiv@divisor+1,7,c
 10352  002600  D7FA               	goto	l1283
 10353  002602                     u5910:
 10354  002602  90D8               	bcf	status,0,c
 10355  002604  3625               	rlcf	___awdiv@quotient,f,c
 10356  002606  3626               	rlcf	___awdiv@quotient+1,f,c
 10357  002608  5021               	movf	___awdiv@divisor,w,c
 10358  00260A  5C1F               	subwf	___awdiv@dividend,w,c
 10359  00260C  5022               	movf	___awdiv@divisor+1,w,c
 10360  00260E  5820               	subwfb	___awdiv@dividend+1,w,c
 10361  002610  A0D8               	btfss	status,0,c
 10362  002612  D005               	goto	l1286
 10363  002614  5021               	movf	___awdiv@divisor,w,c
 10364  002616  5E1F               	subwf	___awdiv@dividend,f,c
 10365  002618  5022               	movf	___awdiv@divisor+1,w,c
 10366  00261A  5A20               	subwfb	___awdiv@dividend+1,f,c
 10367  00261C  8025               	bsf	___awdiv@quotient,0,c
 10368  00261E                     l1286:
 10369  00261E  90D8               	bcf	status,0,c
 10370  002620  3222               	rrcf	___awdiv@divisor+1,f,c
 10371  002622  3221               	rrcf	___awdiv@divisor,f,c
 10372  002624  2E23               	decfsz	___awdiv@counter,f,c
 10373  002626  D7ED               	goto	u5910
 10374  002628                     l1287:
 10375  002628  5024               	movf	___awdiv@sign,w,c
 10376  00262A  B4D8               	btfsc	status,2,c
 10377  00262C  D004               	goto	l1288
 10378  00262E  6C25               	negf	___awdiv@quotient,c
 10379  002630  1E26               	comf	___awdiv@quotient+1,f,c
 10380  002632  B0D8               	btfsc	status,0,c
 10381  002634  2A26               	incf	___awdiv@quotient+1,f,c
 10382  002636                     l1288:
 10383  002636  C025  F01F         	movff	___awdiv@quotient,?___awdiv
 10384  00263A  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
 10385  00263E  0012               	return	
 10386  002640                     __end_of___awdiv:
 10387                           	opt stack 0
 10388                           tosu	equ	0xFFF
 10389                           tosh	equ	0xFFE
 10390                           tosl	equ	0xFFD
 10391                           pclath	equ	0xFFA
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           postinc0	equ	0xFEE
 10400                           wreg	equ	0xFE8
 10401                           indf1	equ	0xFE7
 10402                           postdec1	equ	0xFE5
 10403                           fsr1h	equ	0xFE2
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function __tdiv_to_l_ *****************
 10413 ;; Defined at:
 10414 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdivl.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;  f1              3   24[COMRAM] float 
 10417 ;;  f2              3   27[COMRAM] float 
 10418 ;; Auto vars:     Size  Location     Type
 10419 ;;  quot            4   33[COMRAM] unsigned long 
 10420 ;;  exp1            1   38[COMRAM] unsigned char 
 10421 ;;  cntr            1   37[COMRAM] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  4   24[COMRAM] unsigned long 
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10431 ;;      Params:         6       0       0       0       0       0       0
 10432 ;;      Locals:         6       0       0       0       0       0       0
 10433 ;;      Temps:          3       0       0       0       0       0       0
 10434 ;;      Totals:        15       0       0       0       0       0       0
 10435 ;;Total ram usage:       15 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    5
 10438 ;; This function calls:
 10439 ;;		Nothing
 10440 ;; This function is called by:
 10441 ;;		_printf
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           	psect	text51
 10446  001CB8                     __ptext51:
 10447                           	opt stack 0
 10448  001CB8                     __tdiv_to_l_:
 10449                           	opt stack 24
 10450                           
 10451                           ;incstack = 0
 10452  001CB8  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10453  001CBC  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10454  001CBE  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10455  001CC0  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
 10456  001CC2  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10457  001CC4  E301               	bnc	u6111
 10458  001CC6  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10459  001CC8                     u6111:
 10460  001CC8  501F               	movf	??__tdiv_to_l_,w,c
 10461  001CCA  6E27               	movwf	__tdiv_to_l_@exp1,c
 10462  001CCC  5027               	movf	__tdiv_to_l_@exp1,w,c
 10463  001CCE  A4D8               	btfss	status,2,c
 10464  001CD0  D009               	goto	l1415
 10465  001CD2  0E00               	movlw	0
 10466  001CD4  6E19               	movwf	?__tdiv_to_l_,c
 10467  001CD6  0E00               	movlw	0
 10468  001CD8  6E1A               	movwf	?__tdiv_to_l_+1,c
 10469  001CDA  0E00               	movlw	0
 10470  001CDC  6E1B               	movwf	?__tdiv_to_l_+2,c
 10471  001CDE  0E00               	movlw	0
 10472  001CE0  6E1C               	movwf	?__tdiv_to_l_+3,c
 10473  001CE2  0012               	return	
 10474  001CE4                     l1415:
 10475  001CE4  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10476  001CE8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10477  001CEA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10478  001CEC  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
 10479  001CEE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10480  001CF0  E301               	bnc	u6131
 10481  001CF2  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10482  001CF4                     u6131:
 10483  001CF4  501F               	movf	??__tdiv_to_l_,w,c
 10484  001CF6  6E26               	movwf	__tdiv_to_l_@cntr,c
 10485  001CF8  5026               	movf	__tdiv_to_l_@cntr,w,c
 10486  001CFA  A4D8               	btfss	status,2,c
 10487  001CFC  D009               	goto	l1417
 10488  001CFE  0E00               	movlw	0
 10489  001D00  6E19               	movwf	?__tdiv_to_l_,c
 10490  001D02  0E00               	movlw	0
 10491  001D04  6E1A               	movwf	?__tdiv_to_l_+1,c
 10492  001D06  0E00               	movlw	0
 10493  001D08  6E1B               	movwf	?__tdiv_to_l_+2,c
 10494  001D0A  0E00               	movlw	0
 10495  001D0C  6E1C               	movwf	?__tdiv_to_l_+3,c
 10496  001D0E  0012               	return	
 10497  001D10                     l1417:
 10498  001D10  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
 10499  001D12  0EFF               	movlw	255
 10500  001D14  1619               	andwf	__tdiv_to_l_@f1,f,c
 10501  001D16  0EFF               	movlw	255
 10502  001D18  161A               	andwf	__tdiv_to_l_@f1+1,f,c
 10503  001D1A  0E00               	movlw	0
 10504  001D1C  161B               	andwf	__tdiv_to_l_@f1+2,f,c
 10505  001D1E  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
 10506  001D20  0EFF               	movlw	255
 10507  001D22  161C               	andwf	__tdiv_to_l_@f2,f,c
 10508  001D24  0EFF               	movlw	255
 10509  001D26  161D               	andwf	__tdiv_to_l_@f2+1,f,c
 10510  001D28  0E00               	movlw	0
 10511  001D2A  161E               	andwf	__tdiv_to_l_@f2+2,f,c
 10512  001D2C  0E00               	movlw	0
 10513  001D2E  6E22               	movwf	__tdiv_to_l_@quot,c
 10514  001D30  0E00               	movlw	0
 10515  001D32  6E23               	movwf	__tdiv_to_l_@quot+1,c
 10516  001D34  0E00               	movlw	0
 10517  001D36  6E24               	movwf	__tdiv_to_l_@quot+2,c
 10518  001D38  0E00               	movlw	0
 10519  001D3A  6E25               	movwf	__tdiv_to_l_@quot+3,c
 10520  001D3C  0E7F               	movlw	127
 10521  001D3E  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 10522  001D40  5026               	movf	__tdiv_to_l_@cntr,w,c
 10523  001D42  0F98               	addlw	152
 10524  001D44  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 10525  001D46  0E18               	movlw	24
 10526  001D48  6E26               	movwf	__tdiv_to_l_@cntr,c
 10527  001D4A                     l1418:
 10528  001D4A  90D8               	bcf	status,0,c
 10529  001D4C  3622               	rlcf	__tdiv_to_l_@quot,f,c
 10530  001D4E  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 10531  001D50  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 10532  001D52  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 10533  001D54  501C               	movf	__tdiv_to_l_@f2,w,c
 10534  001D56  5C19               	subwf	__tdiv_to_l_@f1,w,c
 10535  001D58  501D               	movf	__tdiv_to_l_@f2+1,w,c
 10536  001D5A  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
 10537  001D5C  501E               	movf	__tdiv_to_l_@f2+2,w,c
 10538  001D5E  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
 10539  001D60  A0D8               	btfss	status,0,c
 10540  001D62  D007               	goto	l1419
 10541  001D64  501C               	movf	__tdiv_to_l_@f2,w,c
 10542  001D66  5E19               	subwf	__tdiv_to_l_@f1,f,c
 10543  001D68  501D               	movf	__tdiv_to_l_@f2+1,w,c
 10544  001D6A  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
 10545  001D6C  501E               	movf	__tdiv_to_l_@f2+2,w,c
 10546  001D6E  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
 10547  001D70  8022               	bsf	__tdiv_to_l_@quot,0,c
 10548  001D72                     l1419:
 10549  001D72  90D8               	bcf	status,0,c
 10550  001D74  3619               	rlcf	__tdiv_to_l_@f1,f,c
 10551  001D76  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
 10552  001D78  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
 10553  001D7A  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
 10554  001D7C  D7E6               	goto	l1418
 10555  001D7E  AE27               	btfss	__tdiv_to_l_@exp1,7,c
 10556  001D80  D016               	goto	l1421
 10557  001D82  5027               	movf	__tdiv_to_l_@exp1,w,c
 10558  001D84  0A80               	xorlw	128
 10559  001D86  0F97               	addlw	151
 10560  001D88  B0D8               	btfsc	status,0,c
 10561  001D8A  D009               	goto	l1422
 10562  001D8C  0E00               	movlw	0
 10563  001D8E  6E19               	movwf	?__tdiv_to_l_,c
 10564  001D90  0E00               	movlw	0
 10565  001D92  6E1A               	movwf	?__tdiv_to_l_+1,c
 10566  001D94  0E00               	movlw	0
 10567  001D96  6E1B               	movwf	?__tdiv_to_l_+2,c
 10568  001D98  0E00               	movlw	0
 10569  001D9A  6E1C               	movwf	?__tdiv_to_l_+3,c
 10570  001D9C  0012               	return	
 10571  001D9E                     l1422:
 10572  001D9E  90D8               	bcf	status,0,c
 10573  001DA0  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
 10574  001DA2  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
 10575  001DA4  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
 10576  001DA6  3222               	rrcf	__tdiv_to_l_@quot,f,c
 10577  001DA8  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
 10578  001DAA  D7F9               	goto	l1422
 10579  001DAC  D015               	goto	u6190
 10580  001DAE                     l1421:
 10581  001DAE  0E17               	movlw	23
 10582  001DB0  6427               	cpfsgt	__tdiv_to_l_@exp1,c
 10583  001DB2  D00F               	goto	l1427
 10584  001DB4  0E00               	movlw	0
 10585  001DB6  6E19               	movwf	?__tdiv_to_l_,c
 10586  001DB8  0E00               	movlw	0
 10587  001DBA  6E1A               	movwf	?__tdiv_to_l_+1,c
 10588  001DBC  0E00               	movlw	0
 10589  001DBE  6E1B               	movwf	?__tdiv_to_l_+2,c
 10590  001DC0  0E00               	movlw	0
 10591  001DC2  6E1C               	movwf	?__tdiv_to_l_+3,c
 10592  001DC4  0012               	return	
 10593  001DC6  90D8               	bcf	status,0,c
 10594  001DC8  3622               	rlcf	__tdiv_to_l_@quot,f,c
 10595  001DCA  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 10596  001DCC  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 10597  001DCE  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 10598  001DD0  0627               	decf	__tdiv_to_l_@exp1,f,c
 10599  001DD2                     l1427:
 10600  001DD2  5027               	movf	__tdiv_to_l_@exp1,w,c
 10601  001DD4  A4D8               	btfss	status,2,c
 10602  001DD6  D7F7               	goto	l1428
 10603  001DD8                     u6190:
 10604  001DD8  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10605  001DDC  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10606  001DE0  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10607  001DE4  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10608  001DE8  0012               	return		;funcret
 10609  001DEA                     __end_of__tdiv_to_l_:
 10610                           	opt stack 0
 10611                           tosu	equ	0xFFF
 10612                           tosh	equ	0xFFE
 10613                           tosl	equ	0xFFD
 10614                           pclath	equ	0xFFA
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           postinc0	equ	0xFEE
 10623                           wreg	equ	0xFE8
 10624                           indf1	equ	0xFE7
 10625                           postdec1	equ	0xFE5
 10626                           fsr1h	equ	0xFE2
 10627                           fsr1l	equ	0xFE1
 10628                           indf2	equ	0xFDF
 10629                           postinc2	equ	0xFDE
 10630                           postdec2	equ	0xFDD
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function __div_to_l_ *****************
 10636 ;; Defined at:
 10637 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/fldivl.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  f1              3   24[COMRAM] unsigned long 
 10640 ;;  f2              3   27[COMRAM] unsigned long 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  quot            4   30[COMRAM] unsigned long 
 10643 ;;  exp1            1   35[COMRAM] unsigned char 
 10644 ;;  cntr            1   34[COMRAM] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  4   24[COMRAM] unsigned long 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10654 ;;      Params:         6       0       0       0       0       0       0
 10655 ;;      Locals:         6       0       0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0
 10657 ;;      Totals:        12       0       0       0       0       0       0
 10658 ;;Total ram usage:       12 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    5
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		_printf
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text52
 10669  001DEA                     __ptext52:
 10670                           	opt stack 0
 10671  001DEA                     __div_to_l_:
 10672                           	opt stack 24
 10673                           
 10674                           ;incstack = 0
 10675  001DEA  341B               	rlcf	__div_to_l_@f1+2,w,c
 10676  001DEC  341C               	rlcf	__div_to_l_@f1+3,w,c
 10677  001DEE  6E24               	movwf	__div_to_l_@exp1,c
 10678  001DF0  5024               	movf	__div_to_l_@exp1,w,c
 10679  001DF2  A4D8               	btfss	status,2,c
 10680  001DF4  D009               	goto	l1311
 10681  001DF6  0E00               	movlw	0
 10682  001DF8  6E19               	movwf	?__div_to_l_,c
 10683  001DFA  0E00               	movlw	0
 10684  001DFC  6E1A               	movwf	?__div_to_l_+1,c
 10685  001DFE  0E00               	movlw	0
 10686  001E00  6E1B               	movwf	?__div_to_l_+2,c
 10687  001E02  0E00               	movlw	0
 10688  001E04  6E1C               	movwf	?__div_to_l_+3,c
 10689  001E06  0012               	return	
 10690  001E08                     l1311:
 10691  001E08  341E               	rlcf	__div_to_l_@f2+2,w,c
 10692  001E0A  341F               	rlcf	__div_to_l_@f2+3,w,c
 10693  001E0C  6E23               	movwf	__div_to_l_@cntr,c
 10694  001E0E  5023               	movf	__div_to_l_@cntr,w,c
 10695  001E10  A4D8               	btfss	status,2,c
 10696  001E12  D009               	goto	l1313
 10697  001E14  0E00               	movlw	0
 10698  001E16  6E19               	movwf	?__div_to_l_,c
 10699  001E18  0E00               	movlw	0
 10700  001E1A  6E1A               	movwf	?__div_to_l_+1,c
 10701  001E1C  0E00               	movlw	0
 10702  001E1E  6E1B               	movwf	?__div_to_l_+2,c
 10703  001E20  0E00               	movlw	0
 10704  001E22  6E1C               	movwf	?__div_to_l_+3,c
 10705  001E24  0012               	return	
 10706  001E26                     l1313:
 10707  001E26  8E1B               	bsf	__div_to_l_@f1+2,7,c
 10708  001E28  0EFF               	movlw	255
 10709  001E2A  1619               	andwf	__div_to_l_@f1,f,c
 10710  001E2C  0EFF               	movlw	255
 10711  001E2E  161A               	andwf	__div_to_l_@f1+1,f,c
 10712  001E30  0EFF               	movlw	255
 10713  001E32  161B               	andwf	__div_to_l_@f1+2,f,c
 10714  001E34  0E00               	movlw	0
 10715  001E36  161C               	andwf	__div_to_l_@f1+3,f,c
 10716  001E38  8E1E               	bsf	__div_to_l_@f2+2,7,c
 10717  001E3A  0EFF               	movlw	255
 10718  001E3C  161C               	andwf	__div_to_l_@f2,f,c
 10719  001E3E  0EFF               	movlw	255
 10720  001E40  161D               	andwf	__div_to_l_@f2+1,f,c
 10721  001E42  0EFF               	movlw	255
 10722  001E44  161E               	andwf	__div_to_l_@f2+2,f,c
 10723  001E46  0E00               	movlw	0
 10724  001E48  161F               	andwf	__div_to_l_@f2+3,f,c
 10725  001E4A  0E00               	movlw	0
 10726  001E4C  6E1F               	movwf	__div_to_l_@quot,c
 10727  001E4E  0E00               	movlw	0
 10728  001E50  6E20               	movwf	__div_to_l_@quot+1,c
 10729  001E52  0E00               	movlw	0
 10730  001E54  6E21               	movwf	__div_to_l_@quot+2,c
 10731  001E56  0E00               	movlw	0
 10732  001E58  6E22               	movwf	__div_to_l_@quot+3,c
 10733  001E5A  0E7F               	movlw	127
 10734  001E5C  5E24               	subwf	__div_to_l_@exp1,f,c
 10735  001E5E  5023               	movf	__div_to_l_@cntr,w,c
 10736  001E60  0FA0               	addlw	160
 10737  001E62  5E24               	subwf	__div_to_l_@exp1,f,c
 10738  001E64  0E20               	movlw	32
 10739  001E66  6E23               	movwf	__div_to_l_@cntr,c
 10740  001E68  90D8               	bcf	status,0,c
 10741  001E6A  361F               	rlcf	__div_to_l_@quot,f,c
 10742  001E6C  3620               	rlcf	__div_to_l_@quot+1,f,c
 10743  001E6E  3621               	rlcf	__div_to_l_@quot+2,f,c
 10744  001E70  3622               	rlcf	__div_to_l_@quot+3,f,c
 10745  001E72  501C               	movf	__div_to_l_@f2,w,c
 10746  001E74  5C19               	subwf	__div_to_l_@f1,w,c
 10747  001E76  501D               	movf	__div_to_l_@f2+1,w,c
 10748  001E78  581A               	subwfb	__div_to_l_@f1+1,w,c
 10749  001E7A  501E               	movf	__div_to_l_@f2+2,w,c
 10750  001E7C  581B               	subwfb	__div_to_l_@f1+2,w,c
 10751  001E7E  501F               	movf	__div_to_l_@f2+3,w,c
 10752  001E80  581C               	subwfb	__div_to_l_@f1+3,w,c
 10753  001E82  A0D8               	btfss	status,0,c
 10754  001E84  D009               	goto	l1315
 10755  001E86  501C               	movf	__div_to_l_@f2,w,c
 10756  001E88  5E19               	subwf	__div_to_l_@f1,f,c
 10757  001E8A  501D               	movf	__div_to_l_@f2+1,w,c
 10758  001E8C  5A1A               	subwfb	__div_to_l_@f1+1,f,c
 10759  001E8E  501E               	movf	__div_to_l_@f2+2,w,c
 10760  001E90  5A1B               	subwfb	__div_to_l_@f1+2,f,c
 10761  001E92  501F               	movf	__div_to_l_@f2+3,w,c
 10762  001E94  5A1C               	subwfb	__div_to_l_@f1+3,f,c
 10763  001E96  801F               	bsf	__div_to_l_@quot,0,c
 10764  001E98                     l1315:
 10765  001E98  90D8               	bcf	status,0,c
 10766  001E9A  3619               	rlcf	__div_to_l_@f1,f,c
 10767  001E9C  361A               	rlcf	__div_to_l_@f1+1,f,c
 10768  001E9E  361B               	rlcf	__div_to_l_@f1+2,f,c
 10769  001EA0  361C               	rlcf	__div_to_l_@f1+3,f,c
 10770  001EA2  2E23               	decfsz	__div_to_l_@cntr,f,c
 10771  001EA4  D7E1               	goto	l1314
 10772  001EA6  AE24               	btfss	__div_to_l_@exp1,7,c
 10773  001EA8  D016               	goto	l1317
 10774  001EAA  5024               	movf	__div_to_l_@exp1,w,c
 10775  001EAC  0A80               	xorlw	128
 10776  001EAE  0F9F               	addlw	159
 10777  001EB0  B0D8               	btfsc	status,0,c
 10778  001EB2  D009               	goto	l1318
 10779  001EB4  0E00               	movlw	0
 10780  001EB6  6E19               	movwf	?__div_to_l_,c
 10781  001EB8  0E00               	movlw	0
 10782  001EBA  6E1A               	movwf	?__div_to_l_+1,c
 10783  001EBC  0E00               	movlw	0
 10784  001EBE  6E1B               	movwf	?__div_to_l_+2,c
 10785  001EC0  0E00               	movlw	0
 10786  001EC2  6E1C               	movwf	?__div_to_l_+3,c
 10787  001EC4  0012               	return	
 10788  001EC6                     l1318:
 10789  001EC6  90D8               	bcf	status,0,c
 10790  001EC8  3222               	rrcf	__div_to_l_@quot+3,f,c
 10791  001ECA  3221               	rrcf	__div_to_l_@quot+2,f,c
 10792  001ECC  3220               	rrcf	__div_to_l_@quot+1,f,c
 10793  001ECE  321F               	rrcf	__div_to_l_@quot,f,c
 10794  001ED0  3E24               	incfsz	__div_to_l_@exp1,f,c
 10795  001ED2  D7F9               	goto	l1318
 10796  001ED4  D015               	goto	u6260
 10797  001ED6                     l1317:
 10798  001ED6  0E1F               	movlw	31
 10799  001ED8  6424               	cpfsgt	__div_to_l_@exp1,c
 10800  001EDA  D00F               	goto	l1323
 10801  001EDC  0E00               	movlw	0
 10802  001EDE  6E19               	movwf	?__div_to_l_,c
 10803  001EE0  0E00               	movlw	0
 10804  001EE2  6E1A               	movwf	?__div_to_l_+1,c
 10805  001EE4  0E00               	movlw	0
 10806  001EE6  6E1B               	movwf	?__div_to_l_+2,c
 10807  001EE8  0E00               	movlw	0
 10808  001EEA  6E1C               	movwf	?__div_to_l_+3,c
 10809  001EEC  0012               	return	
 10810  001EEE  90D8               	bcf	status,0,c
 10811  001EF0  361F               	rlcf	__div_to_l_@quot,f,c
 10812  001EF2  3620               	rlcf	__div_to_l_@quot+1,f,c
 10813  001EF4  3621               	rlcf	__div_to_l_@quot+2,f,c
 10814  001EF6  3622               	rlcf	__div_to_l_@quot+3,f,c
 10815  001EF8  0624               	decf	__div_to_l_@exp1,f,c
 10816  001EFA                     l1323:
 10817  001EFA  5024               	movf	__div_to_l_@exp1,w,c
 10818  001EFC  A4D8               	btfss	status,2,c
 10819  001EFE  D7F7               	goto	l1324
 10820  001F00                     u6260:
 10821  001F00  C01F  F019         	movff	__div_to_l_@quot,?__div_to_l_
 10822  001F04  C020  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10823  001F08  C021  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10824  001F0C  C022  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10825  001F10  0012               	return		;funcret
 10826  001F12                     __end_of__div_to_l_:
 10827                           	opt stack 0
 10828                           tosu	equ	0xFFF
 10829                           tosh	equ	0xFFE
 10830                           tosl	equ	0xFFD
 10831                           pclath	equ	0xFFA
 10832                           tblptru	equ	0xFF8
 10833                           tblptrh	equ	0xFF7
 10834                           tblptrl	equ	0xFF6
 10835                           tablat	equ	0xFF5
 10836                           prodh	equ	0xFF4
 10837                           prodl	equ	0xFF3
 10838                           intcon	equ	0xFF2
 10839                           postinc0	equ	0xFEE
 10840                           wreg	equ	0xFE8
 10841                           indf1	equ	0xFE7
 10842                           postdec1	equ	0xFE5
 10843                           fsr1h	equ	0xFE2
 10844                           fsr1l	equ	0xFE1
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function ___lltoft *****************
 10853 ;; Defined at:
 10854 ;;		line 35 in file "/Applications/microchip/xc8/v1.45/sources/common/lltoft.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;  c               4   32[COMRAM] unsigned long 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  exp             1   40[COMRAM] unsigned char 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  3   32[COMRAM] float 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10868 ;;      Params:         4       0       0       0       0       0       0
 10869 ;;      Locals:         1       0       0       0       0       0       0
 10870 ;;      Temps:          4       0       0       0       0       0       0
 10871 ;;      Totals:         9       0       0       0       0       0       0
 10872 ;;Total ram usage:        9 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    6
 10875 ;; This function calls:
 10876 ;;		___ftpack
 10877 ;; This function is called by:
 10878 ;;		_printf
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text53
 10883  002A08                     __ptext53:
 10884                           	opt stack 0
 10885  002A08                     ___lltoft:
 10886                           	opt stack 23
 10887                           
 10888                           ;incstack = 0
 10889  002A08  0E8E               	movlw	142
 10890  002A0A  6E29               	movwf	___lltoft@exp,c
 10891  002A0C  D006               	goto	l1522
 10892  002A0E  90D8               	bcf	status,0,c
 10893  002A10  3224               	rrcf	___lltoft@c+3,f,c
 10894  002A12  3223               	rrcf	___lltoft@c+2,f,c
 10895  002A14  3222               	rrcf	___lltoft@c+1,f,c
 10896  002A16  3221               	rrcf	___lltoft@c,f,c
 10897  002A18  2A29               	incf	___lltoft@exp,f,c
 10898  002A1A                     l1522:
 10899  002A1A  0E00               	movlw	0
 10900  002A1C  1421               	andwf	___lltoft@c,w,c
 10901  002A1E  6E25               	movwf	??___lltoft& (0+255),c
 10902  002A20  0E00               	movlw	0
 10903  002A22  1422               	andwf	___lltoft@c+1,w,c
 10904  002A24  6E26               	movwf	(??___lltoft+1)& (0+255),c
 10905  002A26  0E00               	movlw	0
 10906  002A28  1423               	andwf	___lltoft@c+2,w,c
 10907  002A2A  6E27               	movwf	(??___lltoft+2)& (0+255),c
 10908  002A2C  0EFF               	movlw	255
 10909  002A2E  1424               	andwf	___lltoft@c+3,w,c
 10910  002A30  6E28               	movwf	(??___lltoft+3)& (0+255),c
 10911  002A32  5025               	movf	??___lltoft,w,c
 10912  002A34  1026               	iorwf	??___lltoft+1,w,c
 10913  002A36  1027               	iorwf	??___lltoft+2,w,c
 10914  002A38  1028               	iorwf	??___lltoft+3,w,c
 10915  002A3A  A4D8               	btfss	status,2,c
 10916  002A3C  D7E8               	goto	l1523
 10917  002A3E  C021  F019         	movff	___lltoft@c,___ftpack@arg
 10918  002A42  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
 10919  002A46  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
 10920  002A4A  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
 10921  002A4E  0E00               	movlw	0
 10922  002A50  6E1D               	movwf	___ftpack@sign,c
 10923  002A52  EC5E  F011         	call	___ftpack	;wreg free
 10924  002A56  C019  F021         	movff	?___ftpack,?___lltoft
 10925  002A5A  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
 10926  002A5E  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
 10927  002A62  0012               	return	
 10928  002A64                     __end_of___lltoft:
 10929                           	opt stack 0
 10930                           tosu	equ	0xFFF
 10931                           tosh	equ	0xFFE
 10932                           tosl	equ	0xFFD
 10933                           pclath	equ	0xFFA
 10934                           tblptru	equ	0xFF8
 10935                           tblptrh	equ	0xFF7
 10936                           tblptrl	equ	0xFF6
 10937                           tablat	equ	0xFF5
 10938                           prodh	equ	0xFF4
 10939                           prodl	equ	0xFF3
 10940                           intcon	equ	0xFF2
 10941                           postinc0	equ	0xFEE
 10942                           wreg	equ	0xFE8
 10943                           indf1	equ	0xFE7
 10944                           postdec1	equ	0xFE5
 10945                           fsr1h	equ	0xFE2
 10946                           fsr1l	equ	0xFE1
 10947                           indf2	equ	0xFDF
 10948                           postinc2	equ	0xFDE
 10949                           postdec2	equ	0xFDD
 10950                           fsr2h	equ	0xFDA
 10951                           fsr2l	equ	0xFD9
 10952                           status	equ	0xFD8
 10953                           
 10954 ;; *************** function ___llmod *****************
 10955 ;; Defined at:
 10956 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/llmod.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;  dividend        4   37[COMRAM] unsigned long 
 10959 ;;  divisor         4   41[COMRAM] unsigned long 
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;  counter         1   45[COMRAM] unsigned char 
 10962 ;; Return value:  Size  Location     Type
 10963 ;;                  4   37[COMRAM] unsigned long 
 10964 ;; Registers used:
 10965 ;;		wreg, status,2, status,0
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10971 ;;      Params:         8       0       0       0       0       0       0
 10972 ;;      Locals:         1       0       0       0       0       0       0
 10973 ;;      Temps:          0       0       0       0       0       0       0
 10974 ;;      Totals:         9       0       0       0       0       0       0
 10975 ;;Total ram usage:        9 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    5
 10978 ;; This function calls:
 10979 ;;		Nothing
 10980 ;; This function is called by:
 10981 ;;		_printf
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           	psect	text54
 10986  002888                     __ptext54:
 10987                           	opt stack 0
 10988  002888                     ___llmod:
 10989                           	opt stack 24
 10990                           
 10991                           ;incstack = 0
 10992  002888  502A               	movf	___llmod@divisor,w,c
 10993  00288A  102B               	iorwf	___llmod@divisor+1,w,c
 10994  00288C  102C               	iorwf	___llmod@divisor+2,w,c
 10995  00288E  102D               	iorwf	___llmod@divisor+3,w,c
 10996  002890  B4D8               	btfsc	status,2,c
 10997  002892  D024               	goto	l1516
 10998  002894  0E01               	movlw	1
 10999  002896  6E2E               	movwf	___llmod@counter,c
 11000  002898  D006               	goto	l1511
 11001  00289A  90D8               	bcf	status,0,c
 11002  00289C  362A               	rlcf	___llmod@divisor,f,c
 11003  00289E  362B               	rlcf	___llmod@divisor+1,f,c
 11004  0028A0  362C               	rlcf	___llmod@divisor+2,f,c
 11005  0028A2  362D               	rlcf	___llmod@divisor+3,f,c
 11006  0028A4  2A2E               	incf	___llmod@counter,f,c
 11007  0028A6                     l1511:
 11008  0028A6  AE2D               	btfss	___llmod@divisor+3,7,c
 11009  0028A8  D7F8               	goto	l1512
 11010  0028AA                     u6440:
 11011  0028AA  502A               	movf	___llmod@divisor,w,c
 11012  0028AC  5C26               	subwf	___llmod@dividend,w,c
 11013  0028AE  502B               	movf	___llmod@divisor+1,w,c
 11014  0028B0  5827               	subwfb	___llmod@dividend+1,w,c
 11015  0028B2  502C               	movf	___llmod@divisor+2,w,c
 11016  0028B4  5828               	subwfb	___llmod@dividend+2,w,c
 11017  0028B6  502D               	movf	___llmod@divisor+3,w,c
 11018  0028B8  5829               	subwfb	___llmod@dividend+3,w,c
 11019  0028BA  A0D8               	btfss	status,0,c
 11020  0028BC  D008               	goto	l1515
 11021  0028BE  502A               	movf	___llmod@divisor,w,c
 11022  0028C0  5E26               	subwf	___llmod@dividend,f,c
 11023  0028C2  502B               	movf	___llmod@divisor+1,w,c
 11024  0028C4  5A27               	subwfb	___llmod@dividend+1,f,c
 11025  0028C6  502C               	movf	___llmod@divisor+2,w,c
 11026  0028C8  5A28               	subwfb	___llmod@dividend+2,f,c
 11027  0028CA  502D               	movf	___llmod@divisor+3,w,c
 11028  0028CC  5A29               	subwfb	___llmod@dividend+3,f,c
 11029  0028CE                     l1515:
 11030  0028CE  90D8               	bcf	status,0,c
 11031  0028D0  322D               	rrcf	___llmod@divisor+3,f,c
 11032  0028D2  322C               	rrcf	___llmod@divisor+2,f,c
 11033  0028D4  322B               	rrcf	___llmod@divisor+1,f,c
 11034  0028D6  322A               	rrcf	___llmod@divisor,f,c
 11035  0028D8  2E2E               	decfsz	___llmod@counter,f,c
 11036  0028DA  D7E7               	goto	u6440
 11037  0028DC                     l1516:
 11038  0028DC  C026  F026         	movff	___llmod@dividend,?___llmod
 11039  0028E0  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 11040  0028E4  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 11041  0028E8  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 11042  0028EC  0012               	return		;funcret
 11043  0028EE                     __end_of___llmod:
 11044                           	opt stack 0
 11045                           tosu	equ	0xFFF
 11046                           tosh	equ	0xFFE
 11047                           tosl	equ	0xFFD
 11048                           pclath	equ	0xFFA
 11049                           tblptru	equ	0xFF8
 11050                           tblptrh	equ	0xFF7
 11051                           tblptrl	equ	0xFF6
 11052                           tablat	equ	0xFF5
 11053                           prodh	equ	0xFF4
 11054                           prodl	equ	0xFF3
 11055                           intcon	equ	0xFF2
 11056                           postinc0	equ	0xFEE
 11057                           wreg	equ	0xFE8
 11058                           indf1	equ	0xFE7
 11059                           postdec1	equ	0xFE5
 11060                           fsr1h	equ	0xFE2
 11061                           fsr1l	equ	0xFE1
 11062                           indf2	equ	0xFDF
 11063                           postinc2	equ	0xFDE
 11064                           postdec2	equ	0xFDD
 11065                           fsr2h	equ	0xFDA
 11066                           fsr2l	equ	0xFD9
 11067                           status	equ	0xFD8
 11068                           
 11069 ;; *************** function ___lldiv *****************
 11070 ;; Defined at:
 11071 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  dividend        4   24[COMRAM] unsigned long 
 11074 ;;  divisor         4   28[COMRAM] unsigned long 
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  quotient        4   32[COMRAM] unsigned long 
 11077 ;;  counter         1   36[COMRAM] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  4   24[COMRAM] unsigned long 
 11080 ;; Registers used:
 11081 ;;		wreg, status,2, status,0
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11087 ;;      Params:         8       0       0       0       0       0       0
 11088 ;;      Locals:         5       0       0       0       0       0       0
 11089 ;;      Temps:          0       0       0       0       0       0       0
 11090 ;;      Totals:        13       0       0       0       0       0       0
 11091 ;;Total ram usage:       13 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    5
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_printf
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text55
 11102  002640                     __ptext55:
 11103                           	opt stack 0
 11104  002640                     ___lldiv:
 11105                           	opt stack 24
 11106                           
 11107                           ;incstack = 0
 11108  002640  0E00               	movlw	0
 11109  002642  6E21               	movwf	___lldiv@quotient,c
 11110  002644  0E00               	movlw	0
 11111  002646  6E22               	movwf	___lldiv@quotient+1,c
 11112  002648  0E00               	movlw	0
 11113  00264A  6E23               	movwf	___lldiv@quotient+2,c
 11114  00264C  0E00               	movlw	0
 11115  00264E  6E24               	movwf	___lldiv@quotient+3,c
 11116  002650  501D               	movf	___lldiv@divisor,w,c
 11117  002652  101E               	iorwf	___lldiv@divisor+1,w,c
 11118  002654  101F               	iorwf	___lldiv@divisor+2,w,c
 11119  002656  1020               	iorwf	___lldiv@divisor+3,w,c
 11120  002658  B4D8               	btfsc	status,2,c
 11121  00265A  D02A               	goto	l1506
 11122  00265C  0E01               	movlw	1
 11123  00265E  6E25               	movwf	___lldiv@counter,c
 11124  002660  D006               	goto	l1501
 11125  002662  90D8               	bcf	status,0,c
 11126  002664  361D               	rlcf	___lldiv@divisor,f,c
 11127  002666  361E               	rlcf	___lldiv@divisor+1,f,c
 11128  002668  361F               	rlcf	___lldiv@divisor+2,f,c
 11129  00266A  3620               	rlcf	___lldiv@divisor+3,f,c
 11130  00266C  2A25               	incf	___lldiv@counter,f,c
 11131  00266E                     l1501:
 11132  00266E  AE20               	btfss	___lldiv@divisor+3,7,c
 11133  002670  D7F8               	goto	l1502
 11134  002672                     u6410:
 11135  002672  90D8               	bcf	status,0,c
 11136  002674  3621               	rlcf	___lldiv@quotient,f,c
 11137  002676  3622               	rlcf	___lldiv@quotient+1,f,c
 11138  002678  3623               	rlcf	___lldiv@quotient+2,f,c
 11139  00267A  3624               	rlcf	___lldiv@quotient+3,f,c
 11140  00267C  501D               	movf	___lldiv@divisor,w,c
 11141  00267E  5C19               	subwf	___lldiv@dividend,w,c
 11142  002680  501E               	movf	___lldiv@divisor+1,w,c
 11143  002682  581A               	subwfb	___lldiv@dividend+1,w,c
 11144  002684  501F               	movf	___lldiv@divisor+2,w,c
 11145  002686  581B               	subwfb	___lldiv@dividend+2,w,c
 11146  002688  5020               	movf	___lldiv@divisor+3,w,c
 11147  00268A  581C               	subwfb	___lldiv@dividend+3,w,c
 11148  00268C  A0D8               	btfss	status,0,c
 11149  00268E  D009               	goto	l1505
 11150  002690  501D               	movf	___lldiv@divisor,w,c
 11151  002692  5E19               	subwf	___lldiv@dividend,f,c
 11152  002694  501E               	movf	___lldiv@divisor+1,w,c
 11153  002696  5A1A               	subwfb	___lldiv@dividend+1,f,c
 11154  002698  501F               	movf	___lldiv@divisor+2,w,c
 11155  00269A  5A1B               	subwfb	___lldiv@dividend+2,f,c
 11156  00269C  5020               	movf	___lldiv@divisor+3,w,c
 11157  00269E  5A1C               	subwfb	___lldiv@dividend+3,f,c
 11158  0026A0  8021               	bsf	___lldiv@quotient,0,c
 11159  0026A2                     l1505:
 11160  0026A2  90D8               	bcf	status,0,c
 11161  0026A4  3220               	rrcf	___lldiv@divisor+3,f,c
 11162  0026A6  321F               	rrcf	___lldiv@divisor+2,f,c
 11163  0026A8  321E               	rrcf	___lldiv@divisor+1,f,c
 11164  0026AA  321D               	rrcf	___lldiv@divisor,f,c
 11165  0026AC  2E25               	decfsz	___lldiv@counter,f,c
 11166  0026AE  D7E1               	goto	u6410
 11167  0026B0                     l1506:
 11168  0026B0  C021  F019         	movff	___lldiv@quotient,?___lldiv
 11169  0026B4  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 11170  0026B8  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 11171  0026BC  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 11172  0026C0  0012               	return		;funcret
 11173  0026C2                     __end_of___lldiv:
 11174                           	opt stack 0
 11175                           tosu	equ	0xFFF
 11176                           tosh	equ	0xFFE
 11177                           tosl	equ	0xFFD
 11178                           pclath	equ	0xFFA
 11179                           tblptru	equ	0xFF8
 11180                           tblptrh	equ	0xFF7
 11181                           tblptrl	equ	0xFF6
 11182                           tablat	equ	0xFF5
 11183                           prodh	equ	0xFF4
 11184                           prodl	equ	0xFF3
 11185                           intcon	equ	0xFF2
 11186                           postinc0	equ	0xFEE
 11187                           wreg	equ	0xFE8
 11188                           indf1	equ	0xFE7
 11189                           postdec1	equ	0xFE5
 11190                           fsr1h	equ	0xFE2
 11191                           fsr1l	equ	0xFE1
 11192                           indf2	equ	0xFDF
 11193                           postinc2	equ	0xFDE
 11194                           postdec2	equ	0xFDD
 11195                           fsr2h	equ	0xFDA
 11196                           fsr2l	equ	0xFD9
 11197                           status	equ	0xFD8
 11198                           
 11199 ;; *************** function ___fttol *****************
 11200 ;; Defined at:
 11201 ;;		line 44 in file "/Applications/microchip/xc8/v1.45/sources/common/fttol.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;  f1              3   19[BANK0 ] float 
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  lval            4   29[BANK0 ] unsigned long 
 11206 ;;  exp1            1   33[BANK0 ] unsigned char 
 11207 ;;  sign1           1   28[BANK0 ] unsigned char 
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  4   19[BANK0 ] long 
 11210 ;; Registers used:
 11211 ;;		wreg, status,2, status,0
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11217 ;;      Params:         0       4       0       0       0       0       0
 11218 ;;      Locals:         0       6       0       0       0       0       0
 11219 ;;      Temps:          0       5       0       0       0       0       0
 11220 ;;      Totals:         0      15       0       0       0       0       0
 11221 ;;Total ram usage:       15 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:    5
 11224 ;; This function calls:
 11225 ;;		Nothing
 11226 ;; This function is called by:
 11227 ;;		_main
 11228 ;;		_printf
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text56
 11233  001F12                     __ptext56:
 11234                           	opt stack 0
 11235  001F12                     ___fttol:
 11236                           	opt stack 24
 11237                           
 11238                           ;incstack = 0
 11239  001F12  C075  F077         	movff	___fttol@f1+2,??___fttol
 11240  001F16  0100               	movlb	0	; () banked
 11241  001F18  6B78               	clrf	(??___fttol+1)& (0+255),b
 11242  001F1A  6B79               	clrf	(??___fttol+2)& (0+255),b
 11243  001F1C  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11244  001F1E  3777               	rlcf	??___fttol& (0+255),f,b
 11245  001F20  E301               	bnc	u6321
 11246  001F22  8178               	bsf	(??___fttol+1)& (0+255),0,b
 11247  001F24                     u6321:
 11248  001F24  5177               	movf	??___fttol& (0+255),w,b
 11249  001F26  6F81               	movwf	___fttol@exp1& (0+255),b
 11250  001F28  5181               	movf	___fttol@exp1& (0+255),w,b
 11251  001F2A  A4D8               	btfss	status,2,c
 11252  001F2C  D009               	goto	l1460
 11253                           
 11254                           ; BSR set to: 0
 11255  001F2E  0E00               	movlw	0
 11256  001F30  6F73               	movwf	?___fttol& (0+255),b
 11257  001F32  0E00               	movlw	0
 11258  001F34  6F74               	movwf	(?___fttol+1)& (0+255),b
 11259  001F36  0E00               	movlw	0
 11260  001F38  6F75               	movwf	(?___fttol+2)& (0+255),b
 11261  001F3A  0E00               	movlw	0
 11262  001F3C  6F76               	movwf	(?___fttol+3)& (0+255),b
 11263                           
 11264                           ; BSR set to: 0
 11265  001F3E  0012               	return	
 11266  001F40                     l1460:
 11267                           
 11268                           ; BSR set to: 0
 11269                           
 11270                           ; BSR set to: 0
 11271  001F40  0E17               	movlw	23
 11272  001F42  6F77               	movwf	??___fttol& (0+255),b
 11273  001F44  C073  F078         	movff	___fttol@f1,??___fttol+1
 11274  001F48  C074  F079         	movff	___fttol@f1+1,??___fttol+2
 11275  001F4C  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
 11276  001F50  2977               	incf	??___fttol& (0+255),w,b
 11277  001F52  6F7B               	movwf	(??___fttol+4)& (0+255),b
 11278  001F54  D004               	goto	u6340
 11279  001F56                     u6345:
 11280  001F56  90D8               	bcf	status,0,c
 11281  001F58  337A               	rrcf	(??___fttol+3)& (0+255),f,b
 11282  001F5A  3379               	rrcf	(??___fttol+2)& (0+255),f,b
 11283  001F5C  3378               	rrcf	(??___fttol+1)& (0+255),f,b
 11284  001F5E                     u6340:
 11285  001F5E  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
 11286  001F60  D7FA               	goto	u6345
 11287  001F62  0100               	movlb	0	; () banked
 11288  001F64  5178               	movf	(??___fttol+1)& (0+255),w,b
 11289  001F66  6F7C               	movwf	___fttol@sign1& (0+255),b
 11290                           
 11291                           ; BSR set to: 0
 11292  001F68  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
 11293                           
 11294                           ; BSR set to: 0
 11295  001F6A  0EFF               	movlw	255
 11296  001F6C  1773               	andwf	___fttol@f1& (0+255),f,b
 11297  001F6E  0EFF               	movlw	255
 11298  001F70  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
 11299  001F72  0E00               	movlw	0
 11300  001F74  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
 11301                           
 11302                           ; BSR set to: 0
 11303  001F76  5173               	movf	___fttol@f1& (0+255),w,b
 11304  001F78  6F7D               	movwf	___fttol@lval& (0+255),b
 11305  001F7A  5174               	movf	(___fttol@f1+1)& (0+255),w,b
 11306  001F7C  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
 11307  001F7E  5175               	movf	(___fttol@f1+2)& (0+255),w,b
 11308  001F80  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
 11309  001F82  6B80               	clrf	(___fttol@lval+3)& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312  001F84  0E8E               	movlw	142
 11313  001F86  5F81               	subwf	___fttol@exp1& (0+255),f,b
 11314                           
 11315                           ; BSR set to: 0
 11316  001F88  AF81               	btfss	___fttol@exp1& (0+255),7,b
 11317  001F8A  D016               	goto	l1462
 11318                           
 11319                           ; BSR set to: 0
 11320  001F8C  5181               	movf	___fttol@exp1& (0+255),w,b
 11321  001F8E  0A80               	xorlw	128
 11322  001F90  0F8F               	addlw	143
 11323  001F92  B0D8               	btfsc	status,0,c
 11324  001F94  D009               	goto	l1463
 11325                           
 11326                           ; BSR set to: 0
 11327  001F96  0E00               	movlw	0
 11328  001F98  6F73               	movwf	?___fttol& (0+255),b
 11329  001F9A  0E00               	movlw	0
 11330  001F9C  6F74               	movwf	(?___fttol+1)& (0+255),b
 11331  001F9E  0E00               	movlw	0
 11332  001FA0  6F75               	movwf	(?___fttol+2)& (0+255),b
 11333  001FA2  0E00               	movlw	0
 11334  001FA4  6F76               	movwf	(?___fttol+3)& (0+255),b
 11335                           
 11336                           ; BSR set to: 0
 11337  001FA6  0012               	return	
 11338  001FA8                     l1463:
 11339                           
 11340                           ; BSR set to: 0
 11341                           
 11342                           ; BSR set to: 0
 11343                           
 11344                           ; BSR set to: 0
 11345  001FA8  90D8               	bcf	status,0,c
 11346  001FAA  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11347  001FAC  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11348  001FAE  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11349  001FB0  337D               	rrcf	___fttol@lval& (0+255),f,b
 11350                           
 11351                           ; BSR set to: 0
 11352  001FB2  3F81               	incfsz	___fttol@exp1& (0+255),f,b
 11353  001FB4  D7F9               	goto	l1463
 11354                           
 11355                           ; BSR set to: 0
 11356  001FB6  D015               	goto	u6380
 11357  001FB8                     l1462:
 11358                           
 11359                           ; BSR set to: 0
 11360                           
 11361                           ; BSR set to: 0
 11362  001FB8  0E17               	movlw	23
 11363  001FBA  6581               	cpfsgt	___fttol@exp1& (0+255),b
 11364  001FBC  D00F               	goto	l1468
 11365                           
 11366                           ; BSR set to: 0
 11367  001FBE  0E00               	movlw	0
 11368  001FC0  6F73               	movwf	?___fttol& (0+255),b
 11369  001FC2  0E00               	movlw	0
 11370  001FC4  6F74               	movwf	(?___fttol+1)& (0+255),b
 11371  001FC6  0E00               	movlw	0
 11372  001FC8  6F75               	movwf	(?___fttol+2)& (0+255),b
 11373  001FCA  0E00               	movlw	0
 11374  001FCC  6F76               	movwf	(?___fttol+3)& (0+255),b
 11375                           
 11376                           ; BSR set to: 0
 11377  001FCE  0012               	return	
 11378  001FD0                     
 11379                           ; BSR set to: 0
 11380                           
 11381                           ; BSR set to: 0
 11382  001FD0  90D8               	bcf	status,0,c
 11383  001FD2  377D               	rlcf	___fttol@lval& (0+255),f,b
 11384  001FD4  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11385  001FD6  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11386  001FD8  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11387  001FDA  0781               	decf	___fttol@exp1& (0+255),f,b
 11388  001FDC                     l1468:
 11389                           
 11390                           ; BSR set to: 0
 11391                           
 11392                           ; BSR set to: 0
 11393  001FDC  5181               	movf	___fttol@exp1& (0+255),w,b
 11394  001FDE  A4D8               	btfss	status,2,c
 11395  001FE0  D7F7               	goto	l1469
 11396  001FE2                     u6380:
 11397                           
 11398                           ; BSR set to: 0
 11399                           
 11400                           ; BSR set to: 0
 11401                           
 11402                           ; BSR set to: 0
 11403  001FE2  517C               	movf	___fttol@sign1& (0+255),w,b
 11404  001FE4  B4D8               	btfsc	status,2,c
 11405  001FE6  D008               	goto	l1471
 11406                           
 11407                           ; BSR set to: 0
 11408  001FE8  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
 11409  001FEA  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
 11410  001FEC  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
 11411  001FEE  6D7D               	negf	___fttol@lval& (0+255),b
 11412  001FF0  0E00               	movlw	0
 11413  001FF2  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11414  001FF4  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11415  001FF6  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11416  001FF8                     l1471:
 11417                           
 11418                           ; BSR set to: 0
 11419                           
 11420                           ; BSR set to: 0
 11421  001FF8  C07D  F073         	movff	___fttol@lval,?___fttol
 11422  001FFC  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
 11423  002000  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
 11424  002004  C080  F076         	movff	___fttol@lval+3,?___fttol+3
 11425  002008  0012               	return	
 11426  00200A                     __end_of___fttol:
 11427                           	opt stack 0
 11428                           tosu	equ	0xFFF
 11429                           tosh	equ	0xFFE
 11430                           tosl	equ	0xFFD
 11431                           pclath	equ	0xFFA
 11432                           tblptru	equ	0xFF8
 11433                           tblptrh	equ	0xFF7
 11434                           tblptrl	equ	0xFF6
 11435                           tablat	equ	0xFF5
 11436                           prodh	equ	0xFF4
 11437                           prodl	equ	0xFF3
 11438                           intcon	equ	0xFF2
 11439                           postinc0	equ	0xFEE
 11440                           wreg	equ	0xFE8
 11441                           indf1	equ	0xFE7
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function ___ftsub *****************
 11453 ;; Defined at:
 11454 ;;		line 20 in file "/Applications/microchip/xc8/v1.45/sources/common/ftsub.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  f1              3   34[BANK0 ] float 
 11457 ;;  f2              3   37[BANK0 ] float 
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;		None
 11460 ;; Return value:  Size  Location     Type
 11461 ;;                  3   34[BANK0 ] float 
 11462 ;; Registers used:
 11463 ;;		wreg, status,2, status,0, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11469 ;;      Params:         0       6       0       0       0       0       0
 11470 ;;      Locals:         0       0       0       0       0       0       0
 11471 ;;      Temps:          0       0       0       0       0       0       0
 11472 ;;      Totals:         0       6       0       0       0       0       0
 11473 ;;Total ram usage:        6 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    7
 11476 ;; This function calls:
 11477 ;;		___ftadd
 11478 ;; This function is called by:
 11479 ;;		_main
 11480 ;;		_printf
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           	psect	text57
 11485  002D2A                     __ptext57:
 11486                           	opt stack 0
 11487  002D2A                     ___ftsub:
 11488                           	opt stack 22
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;incstack = 0
 11492  002D2A  0100               	movlb	0	; () banked
 11493  002D2C  5185               	movf	___ftsub@f2& (0+255),w,b
 11494  002D2E  1186               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11495  002D30  1187               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11496  002D32  B4D8               	btfsc	status,2,c
 11497  002D34  D006               	goto	l1456
 11498                           
 11499                           ; BSR set to: 0
 11500  002D36  0E00               	movlw	0
 11501  002D38  1B85               	xorwf	___ftsub@f2& (0+255),f,b
 11502  002D3A  0E00               	movlw	0
 11503  002D3C  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11504  002D3E  0E80               	movlw	128
 11505  002D40  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11506  002D42                     l1456:
 11507                           
 11508                           ; BSR set to: 0
 11509                           
 11510                           ; BSR set to: 0
 11511  002D42  C082  F076         	movff	___ftsub@f1,___ftadd@f1
 11512  002D46  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
 11513  002D4A  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
 11514  002D4E  C085  F079         	movff	___ftsub@f2,___ftadd@f2
 11515  002D52  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
 11516  002D56  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
 11517  002D5A  EC85  F00D         	call	___ftadd	;wreg free
 11518  002D5E  C076  F082         	movff	?___ftadd,?___ftsub
 11519  002D62  C077  F083         	movff	?___ftadd+1,?___ftsub+1
 11520  002D66  C078  F084         	movff	?___ftadd+2,?___ftsub+2
 11521  002D6A  0012               	return	
 11522  002D6C                     __end_of___ftsub:
 11523                           	opt stack 0
 11524                           tosu	equ	0xFFF
 11525                           tosh	equ	0xFFE
 11526                           tosl	equ	0xFFD
 11527                           pclath	equ	0xFFA
 11528                           tblptru	equ	0xFF8
 11529                           tblptrh	equ	0xFF7
 11530                           tblptrl	equ	0xFF6
 11531                           tablat	equ	0xFF5
 11532                           prodh	equ	0xFF4
 11533                           prodl	equ	0xFF3
 11534                           intcon	equ	0xFF2
 11535                           postinc0	equ	0xFEE
 11536                           wreg	equ	0xFE8
 11537                           indf1	equ	0xFE7
 11538                           postdec1	equ	0xFE5
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function ___ftadd *****************
 11549 ;; Defined at:
 11550 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;  f1              3   22[BANK0 ] float 
 11553 ;;  f2              3   25[BANK0 ] float 
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  exp1            1   33[BANK0 ] unsigned char 
 11556 ;;  exp2            1   32[BANK0 ] unsigned char 
 11557 ;;  sign            1   31[BANK0 ] unsigned char 
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  3   22[BANK0 ] float 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0, cstack
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11567 ;;      Params:         0       6       0       0       0       0       0
 11568 ;;      Locals:         0       3       0       0       0       0       0
 11569 ;;      Temps:          0       3       0       0       0       0       0
 11570 ;;      Totals:         0      12       0       0       0       0       0
 11571 ;;Total ram usage:       12 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    6
 11574 ;; This function calls:
 11575 ;;		___ftpack
 11576 ;; This function is called by:
 11577 ;;		_main
 11578 ;;		_printf
 11579 ;;		___ftsub
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text58
 11584  001B0A                     __ptext58:
 11585                           	opt stack 0
 11586  001B0A                     ___ftadd:
 11587                           	opt stack 22
 11588                           
 11589                           ;incstack = 0
 11590  001B0A  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
 11591  001B0E  0100               	movlb	0	; () banked
 11592  001B10  6B7D               	clrf	(??___ftadd+1)& (0+255),b
 11593  001B12  6B7E               	clrf	(??___ftadd+2)& (0+255),b
 11594  001B14  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11595  001B16  377C               	rlcf	??___ftadd& (0+255),f,b
 11596  001B18  E301               	bnc	u5611
 11597  001B1A  817D               	bsf	(??___ftadd+1)& (0+255),0,b
 11598  001B1C                     u5611:
 11599  001B1C  517C               	movf	??___ftadd& (0+255),w,b
 11600  001B1E  6F81               	movwf	___ftadd@exp1& (0+255),b
 11601  001B20  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
 11602  001B24  6B7D               	clrf	(??___ftadd+1)& (0+255),b
 11603  001B26  6B7E               	clrf	(??___ftadd+2)& (0+255),b
 11604  001B28  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11605  001B2A  377C               	rlcf	??___ftadd& (0+255),f,b
 11606  001B2C  E301               	bnc	u5621
 11607  001B2E  817D               	bsf	(??___ftadd+1)& (0+255),0,b
 11608  001B30                     u5621:
 11609  001B30  517C               	movf	??___ftadd& (0+255),w,b
 11610  001B32  6F80               	movwf	___ftadd@exp2& (0+255),b
 11611                           
 11612                           ; BSR set to: 0
 11613  001B34  5181               	movf	___ftadd@exp1& (0+255),w,b
 11614  001B36  B4D8               	btfsc	status,2,c
 11615  001B38  D00B               	goto	u5650
 11616                           
 11617                           ; BSR set to: 0
 11618  001B3A  5180               	movf	___ftadd@exp2& (0+255),w,b
 11619  001B3C  5D81               	subwf	___ftadd@exp1& (0+255),w,b
 11620  001B3E  B0D8               	btfsc	status,0,c
 11621  001B40  D00E               	goto	l1374
 11622                           
 11623                           ; BSR set to: 0
 11624  001B42  5181               	movf	___ftadd@exp1& (0+255),w,b
 11625  001B44  0800               	sublw	0
 11626  001B46  2580               	addwf	___ftadd@exp2& (0+255),w,b
 11627  001B48  6F7C               	movwf	??___ftadd& (0+255),b
 11628  001B4A  0E18               	movlw	24
 11629  001B4C  657C               	cpfsgt	??___ftadd& (0+255),b
 11630  001B4E  D007               	goto	l1374
 11631  001B50                     u5650:
 11632                           
 11633                           ; BSR set to: 0
 11634  001B50  C079  F076         	movff	___ftadd@f2,?___ftadd
 11635  001B54  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
 11636  001B58  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
 11637  001B5C  0012               	return	
 11638  001B5E                     l1374:
 11639                           
 11640                           ; BSR set to: 0
 11641                           
 11642                           ; BSR set to: 0
 11643  001B5E  5180               	movf	___ftadd@exp2& (0+255),w,b
 11644  001B60  B4D8               	btfsc	status,2,c
 11645  001B62  D00B               	goto	u5680
 11646                           
 11647                           ; BSR set to: 0
 11648  001B64  5181               	movf	___ftadd@exp1& (0+255),w,b
 11649  001B66  5D80               	subwf	___ftadd@exp2& (0+255),w,b
 11650  001B68  B0D8               	btfsc	status,0,c
 11651  001B6A  D00E               	goto	l1378
 11652                           
 11653                           ; BSR set to: 0
 11654  001B6C  5180               	movf	___ftadd@exp2& (0+255),w,b
 11655  001B6E  0800               	sublw	0
 11656  001B70  2581               	addwf	___ftadd@exp1& (0+255),w,b
 11657  001B72  6F7C               	movwf	??___ftadd& (0+255),b
 11658  001B74  0E18               	movlw	24
 11659  001B76  657C               	cpfsgt	??___ftadd& (0+255),b
 11660  001B78  D007               	goto	l1378
 11661  001B7A                     u5680:
 11662                           
 11663                           ; BSR set to: 0
 11664  001B7A  C076  F076         	movff	___ftadd@f1,?___ftadd
 11665  001B7E  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
 11666  001B82  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
 11667  001B86  0012               	return	
 11668  001B88                     l1378:
 11669                           
 11670                           ; BSR set to: 0
 11671                           
 11672                           ; BSR set to: 0
 11673  001B88  0E06               	movlw	6
 11674  001B8A  6F7F               	movwf	___ftadd@sign& (0+255),b
 11675                           
 11676                           ; BSR set to: 0
 11677  001B8C  BF78               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 11678                           
 11679                           ; BSR set to: 0
 11680  001B8E  8F7F               	bsf	___ftadd@sign& (0+255),7,b
 11681                           
 11682                           ; BSR set to: 0
 11683                           
 11684                           ; BSR set to: 0
 11685  001B90  BF7B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 11686                           
 11687                           ; BSR set to: 0
 11688  001B92  8D7F               	bsf	___ftadd@sign& (0+255),6,b
 11689                           
 11690                           ; BSR set to: 0
 11691  001B94  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11692                           
 11693                           ; BSR set to: 0
 11694  001B96  0EFF               	movlw	255
 11695  001B98  1776               	andwf	___ftadd@f1& (0+255),f,b
 11696  001B9A  0EFF               	movlw	255
 11697  001B9C  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11698  001B9E  0E00               	movlw	0
 11699  001BA0  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11700  001BA2  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11701                           
 11702                           ; BSR set to: 0
 11703  001BA4  0EFF               	movlw	255
 11704  001BA6  1779               	andwf	___ftadd@f2& (0+255),f,b
 11705  001BA8  0EFF               	movlw	255
 11706  001BAA  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11707  001BAC  0E00               	movlw	0
 11708  001BAE  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11709                           
 11710                           ; BSR set to: 0
 11711  001BB0  5180               	movf	___ftadd@exp2& (0+255),w,b
 11712  001BB2  5D81               	subwf	___ftadd@exp1& (0+255),w,b
 11713  001BB4  B0D8               	btfsc	status,0,c
 11714  001BB6  D01B               	goto	l1383
 11715  001BB8                     u5710:
 11716                           
 11717                           ; BSR set to: 0
 11718                           
 11719                           ; BSR set to: 0
 11720  001BB8  90D8               	bcf	status,0,c
 11721  001BBA  3779               	rlcf	___ftadd@f2& (0+255),f,b
 11722  001BBC  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11723  001BBE  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11724  001BC0  0780               	decf	___ftadd@exp2& (0+255),f,b
 11725                           
 11726                           ; BSR set to: 0
 11727  001BC2  5181               	movf	___ftadd@exp1& (0+255),w,b
 11728  001BC4  1980               	xorwf	___ftadd@exp2& (0+255),w,b
 11729  001BC6  B4D8               	btfsc	status,2,c
 11730  001BC8  D00D               	goto	l1388
 11731                           
 11732                           ; BSR set to: 0
 11733  001BCA  077F               	decf	___ftadd@sign& (0+255),f,b
 11734  001BCC  C07F  F07C         	movff	___ftadd@sign,??___ftadd
 11735  001BD0  0E07               	movlw	7
 11736  001BD2  177C               	andwf	??___ftadd& (0+255),f,b
 11737  001BD4  B4D8               	btfsc	status,2,c
 11738  001BD6  D006               	goto	l1388
 11739  001BD8  D7EF               	goto	u5710
 11740  001BDA                     
 11741                           ; BSR set to: 0
 11742                           
 11743                           ; BSR set to: 0
 11744  001BDA  90D8               	bcf	status,0,c
 11745  001BDC  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11746  001BDE  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11747  001BE0  3376               	rrcf	___ftadd@f1& (0+255),f,b
 11748  001BE2  2B81               	incf	___ftadd@exp1& (0+255),f,b
 11749  001BE4                     l1388:
 11750                           
 11751                           ; BSR set to: 0
 11752                           
 11753                           ; BSR set to: 0
 11754  001BE4  5180               	movf	___ftadd@exp2& (0+255),w,b
 11755  001BE6  1981               	xorwf	___ftadd@exp1& (0+255),w,b
 11756  001BE8  B4D8               	btfsc	status,2,c
 11757  001BEA  D01F               	goto	u5780
 11758  001BEC  D7F6               	goto	l1389
 11759  001BEE                     l1383:
 11760                           
 11761                           ; BSR set to: 0
 11762                           
 11763                           ; BSR set to: 0
 11764  001BEE  5181               	movf	___ftadd@exp1& (0+255),w,b
 11765  001BF0  5D80               	subwf	___ftadd@exp2& (0+255),w,b
 11766  001BF2  B0D8               	btfsc	status,0,c
 11767  001BF4  D01A               	goto	u5780
 11768  001BF6                     u5750:
 11769                           
 11770                           ; BSR set to: 0
 11771                           
 11772                           ; BSR set to: 0
 11773  001BF6  90D8               	bcf	status,0,c
 11774  001BF8  3776               	rlcf	___ftadd@f1& (0+255),f,b
 11775  001BFA  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11776  001BFC  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11777  001BFE  0781               	decf	___ftadd@exp1& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 0
 11780  001C00  5181               	movf	___ftadd@exp1& (0+255),w,b
 11781  001C02  1980               	xorwf	___ftadd@exp2& (0+255),w,b
 11782  001C04  B4D8               	btfsc	status,2,c
 11783  001C06  D00D               	goto	l1397
 11784                           
 11785                           ; BSR set to: 0
 11786  001C08  077F               	decf	___ftadd@sign& (0+255),f,b
 11787  001C0A  C07F  F07C         	movff	___ftadd@sign,??___ftadd
 11788  001C0E  0E07               	movlw	7
 11789  001C10  177C               	andwf	??___ftadd& (0+255),f,b
 11790  001C12  B4D8               	btfsc	status,2,c
 11791  001C14  D006               	goto	l1397
 11792  001C16  D7EF               	goto	u5750
 11793  001C18                     
 11794                           ; BSR set to: 0
 11795                           
 11796                           ; BSR set to: 0
 11797  001C18  90D8               	bcf	status,0,c
 11798  001C1A  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11799  001C1C  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11800  001C1E  3379               	rrcf	___ftadd@f2& (0+255),f,b
 11801  001C20  2B80               	incf	___ftadd@exp2& (0+255),f,b
 11802  001C22                     l1397:
 11803                           
 11804                           ; BSR set to: 0
 11805                           
 11806                           ; BSR set to: 0
 11807  001C22  5180               	movf	___ftadd@exp2& (0+255),w,b
 11808  001C24  1981               	xorwf	___ftadd@exp1& (0+255),w,b
 11809  001C26  A4D8               	btfss	status,2,c
 11810  001C28  D7F7               	goto	l1398
 11811  001C2A                     u5780:
 11812                           
 11813                           ; BSR set to: 0
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ; BSR set to: 0
 11818  001C2A  AF7F               	btfss	___ftadd@sign& (0+255),7,b
 11819  001C2C  D00C               	goto	l1400
 11820                           
 11821                           ; BSR set to: 0
 11822  001C2E  0EFF               	movlw	255
 11823  001C30  1B76               	xorwf	___ftadd@f1& (0+255),f,b
 11824  001C32  0EFF               	movlw	255
 11825  001C34  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11826  001C36  0EFF               	movlw	255
 11827  001C38  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11828  001C3A  0E01               	movlw	1
 11829  001C3C  2776               	addwf	___ftadd@f1& (0+255),f,b
 11830  001C3E  0E00               	movlw	0
 11831  001C40  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11832  001C42  0E00               	movlw	0
 11833  001C44  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11834  001C46                     l1400:
 11835                           
 11836                           ; BSR set to: 0
 11837  001C46  AD7F               	btfss	___ftadd@sign& (0+255),6,b
 11838  001C48  D00C               	goto	l1401
 11839                           
 11840                           ; BSR set to: 0
 11841  001C4A  0EFF               	movlw	255
 11842  001C4C  1B79               	xorwf	___ftadd@f2& (0+255),f,b
 11843  001C4E  0EFF               	movlw	255
 11844  001C50  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11845  001C52  0EFF               	movlw	255
 11846  001C54  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11847  001C56  0E01               	movlw	1
 11848  001C58  2779               	addwf	___ftadd@f2& (0+255),f,b
 11849  001C5A  0E00               	movlw	0
 11850  001C5C  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11851  001C5E  0E00               	movlw	0
 11852  001C60  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11853  001C62                     l1401:
 11854                           
 11855                           ; BSR set to: 0
 11856                           
 11857                           ; BSR set to: 0
 11858  001C62  0E00               	movlw	0
 11859  001C64  6F7F               	movwf	___ftadd@sign& (0+255),b
 11860                           
 11861                           ; BSR set to: 0
 11862  001C66  5176               	movf	___ftadd@f1& (0+255),w,b
 11863  001C68  2779               	addwf	___ftadd@f2& (0+255),f,b
 11864  001C6A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
 11865  001C6C  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11866  001C6E  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
 11867  001C70  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11868                           
 11869                           ; BSR set to: 0
 11870  001C72  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11871  001C74  D00E               	goto	l1402
 11872                           
 11873                           ; BSR set to: 0
 11874  001C76  0EFF               	movlw	255
 11875  001C78  1B79               	xorwf	___ftadd@f2& (0+255),f,b
 11876  001C7A  0EFF               	movlw	255
 11877  001C7C  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11878  001C7E  0EFF               	movlw	255
 11879  001C80  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11880  001C82  0E01               	movlw	1
 11881  001C84  2779               	addwf	___ftadd@f2& (0+255),f,b
 11882  001C86  0E00               	movlw	0
 11883  001C88  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11884  001C8A  0E00               	movlw	0
 11885  001C8C  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11886                           
 11887                           ; BSR set to: 0
 11888  001C8E  0E01               	movlw	1
 11889  001C90  6F7F               	movwf	___ftadd@sign& (0+255),b
 11890  001C92                     l1402:
 11891                           
 11892                           ; BSR set to: 0
 11893                           
 11894                           ; BSR set to: 0
 11895  001C92  C079  F019         	movff	___ftadd@f2,___ftpack@arg
 11896  001C96  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
 11897  001C9A  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
 11898  001C9E  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
 11899  001CA2  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
 11900  001CA6  EC5E  F011         	call	___ftpack	;wreg free
 11901  001CAA  C019  F076         	movff	?___ftpack,?___ftadd
 11902  001CAE  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
 11903  001CB2  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
 11904  001CB6  0012               	return	
 11905  001CB8                     __end_of___ftadd:
 11906                           	opt stack 0
 11907                           tosu	equ	0xFFF
 11908                           tosh	equ	0xFFE
 11909                           tosl	equ	0xFFD
 11910                           pclath	equ	0xFFA
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           intcon	equ	0xFF2
 11918                           postinc0	equ	0xFEE
 11919                           wreg	equ	0xFE8
 11920                           indf1	equ	0xFE7
 11921                           postdec1	equ	0xFE5
 11922                           fsr1h	equ	0xFE2
 11923                           fsr1l	equ	0xFE1
 11924                           indf2	equ	0xFDF
 11925                           postinc2	equ	0xFDE
 11926                           postdec2	equ	0xFDD
 11927                           fsr2h	equ	0xFDA
 11928                           fsr2l	equ	0xFD9
 11929                           status	equ	0xFD8
 11930                           
 11931 ;; *************** function ___ftneg *****************
 11932 ;; Defined at:
 11933 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/ftneg.c"
 11934 ;; Parameters:    Size  Location     Type
 11935 ;;  f1              3   24[COMRAM] float 
 11936 ;; Auto vars:     Size  Location     Type
 11937 ;;		None
 11938 ;; Return value:  Size  Location     Type
 11939 ;;                  3   24[COMRAM] float 
 11940 ;; Registers used:
 11941 ;;		wreg, status,2, status,0
 11942 ;; Tracked objects:
 11943 ;;		On entry : 0/0
 11944 ;;		On exit  : 0/0
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11947 ;;      Params:         3       0       0       0       0       0       0
 11948 ;;      Locals:         0       0       0       0       0       0       0
 11949 ;;      Temps:          0       0       0       0       0       0       0
 11950 ;;      Totals:         3       0       0       0       0       0       0
 11951 ;;Total ram usage:        3 bytes
 11952 ;; Hardware stack levels used:    1
 11953 ;; Hardware stack levels required when called:    5
 11954 ;; This function calls:
 11955 ;;		Nothing
 11956 ;; This function is called by:
 11957 ;;		_printf
 11958 ;; This function uses a non-reentrant model
 11959 ;;
 11960                           
 11961                           	psect	text59
 11962  002F46                     __ptext59:
 11963                           	opt stack 0
 11964  002F46                     ___ftneg:
 11965                           	opt stack 24
 11966                           
 11967                           ;incstack = 0
 11968  002F46  5019               	movf	___ftneg@f1,w,c
 11969  002F48  101A               	iorwf	___ftneg@f1+1,w,c
 11970  002F4A  101B               	iorwf	___ftneg@f1+2,w,c
 11971  002F4C  B4D8               	btfsc	status,2,c
 11972  002F4E  D006               	goto	l1450
 11973  002F50  0E00               	movlw	0
 11974  002F52  1A19               	xorwf	___ftneg@f1,f,c
 11975  002F54  0E00               	movlw	0
 11976  002F56  1A1A               	xorwf	___ftneg@f1+1,f,c
 11977  002F58  0E80               	movlw	128
 11978  002F5A  1A1B               	xorwf	___ftneg@f1+2,f,c
 11979  002F5C                     l1450:
 11980  002F5C  C019  F019         	movff	___ftneg@f1,?___ftneg
 11981  002F60  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
 11982  002F64  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
 11983  002F68  0012               	return		;funcret
 11984  002F6A                     __end_of___ftneg:
 11985                           	opt stack 0
 11986                           tosu	equ	0xFFF
 11987                           tosh	equ	0xFFE
 11988                           tosl	equ	0xFFD
 11989                           pclath	equ	0xFFA
 11990                           tblptru	equ	0xFF8
 11991                           tblptrh	equ	0xFF7
 11992                           tblptrl	equ	0xFF6
 11993                           tablat	equ	0xFF5
 11994                           prodh	equ	0xFF4
 11995                           prodl	equ	0xFF3
 11996                           intcon	equ	0xFF2
 11997                           postinc0	equ	0xFEE
 11998                           wreg	equ	0xFE8
 11999                           indf1	equ	0xFE7
 12000                           postdec1	equ	0xFE5
 12001                           fsr1h	equ	0xFE2
 12002                           fsr1l	equ	0xFE1
 12003                           indf2	equ	0xFDF
 12004                           postinc2	equ	0xFDE
 12005                           postdec2	equ	0xFDD
 12006                           fsr2h	equ	0xFDA
 12007                           fsr2l	equ	0xFD9
 12008                           status	equ	0xFD8
 12009                           
 12010 ;; *************** function ___ftge *****************
 12011 ;; Defined at:
 12012 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/ftge.c"
 12013 ;; Parameters:    Size  Location     Type
 12014 ;;  ff1             3    6[BANK0 ] float 
 12015 ;;  ff2             3    9[BANK0 ] float 
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;		None
 12018 ;; Return value:  Size  Location     Type
 12019 ;;		None               void
 12020 ;; Registers used:
 12021 ;;		wreg, status,2, status,0
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12027 ;;      Params:         0       6       0       0       0       0       0
 12028 ;;      Locals:         0       0       0       0       0       0       0
 12029 ;;      Temps:          0       3       0       0       0       0       0
 12030 ;;      Totals:         0       9       0       0       0       0       0
 12031 ;;Total ram usage:        9 bytes
 12032 ;; Hardware stack levels used:    1
 12033 ;; Hardware stack levels required when called:    5
 12034 ;; This function calls:
 12035 ;;		Nothing
 12036 ;; This function is called by:
 12037 ;;		_main
 12038 ;;		_printf
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           	psect	text60
 12043  00249A                     __ptext60:
 12044                           	opt stack 0
 12045  00249A                     ___ftge:
 12046                           	opt stack 24
 12047                           
 12048                           ;incstack = 0
 12049  00249A  0100               	movlb	0	; () banked
 12050  00249C  AF68               	btfss	(___ftge@ff1+2)& (0+255),7,b
 12051  00249E  D016               	goto	l1432
 12052                           
 12053                           ; BSR set to: 0
 12054  0024A0  C066  F06C         	movff	___ftge@ff1,??___ftge
 12055  0024A4  C067  F06D         	movff	___ftge@ff1+1,??___ftge+1
 12056  0024A8  C068  F06E         	movff	___ftge@ff1+2,??___ftge+2
 12057  0024AC  1F6C               	comf	??___ftge& (0+255),f,b
 12058  0024AE  1F6D               	comf	(??___ftge+1)& (0+255),f,b
 12059  0024B0  1F6E               	comf	(??___ftge+2)& (0+255),f,b
 12060  0024B2  2B6C               	incf	??___ftge& (0+255),f,b
 12061  0024B4  0E00               	movlw	0
 12062  0024B6  236D               	addwfc	(??___ftge+1)& (0+255),f,b
 12063  0024B8  236E               	addwfc	(??___ftge+2)& (0+255),f,b
 12064  0024BA  0E00               	movlw	0
 12065  0024BC  256C               	addwf	??___ftge& (0+255),w,b
 12066  0024BE  6F66               	movwf	___ftge@ff1& (0+255),b
 12067  0024C0  0E00               	movlw	0
 12068  0024C2  216D               	addwfc	(??___ftge+1)& (0+255),w,b
 12069  0024C4  6F67               	movwf	(___ftge@ff1+1)& (0+255),b
 12070  0024C6  0E80               	movlw	128
 12071  0024C8  216E               	addwfc	(??___ftge+2)& (0+255),w,b
 12072  0024CA  6F68               	movwf	(___ftge@ff1+2)& (0+255),b
 12073  0024CC                     l1432:
 12074                           
 12075                           ; BSR set to: 0
 12076                           
 12077                           ; BSR set to: 0
 12078  0024CC  AF6B               	btfss	(___ftge@ff2+2)& (0+255),7,b
 12079  0024CE  D016               	goto	l1433
 12080                           
 12081                           ; BSR set to: 0
 12082  0024D0  C069  F06C         	movff	___ftge@ff2,??___ftge
 12083  0024D4  C06A  F06D         	movff	___ftge@ff2+1,??___ftge+1
 12084  0024D8  C06B  F06E         	movff	___ftge@ff2+2,??___ftge+2
 12085  0024DC  1F6C               	comf	??___ftge& (0+255),f,b
 12086  0024DE  1F6D               	comf	(??___ftge+1)& (0+255),f,b
 12087  0024E0  1F6E               	comf	(??___ftge+2)& (0+255),f,b
 12088  0024E2  2B6C               	incf	??___ftge& (0+255),f,b
 12089  0024E4  0E00               	movlw	0
 12090  0024E6  236D               	addwfc	(??___ftge+1)& (0+255),f,b
 12091  0024E8  236E               	addwfc	(??___ftge+2)& (0+255),f,b
 12092  0024EA  0E00               	movlw	0
 12093  0024EC  256C               	addwf	??___ftge& (0+255),w,b
 12094  0024EE  6F69               	movwf	___ftge@ff2& (0+255),b
 12095  0024F0  0E00               	movlw	0
 12096  0024F2  216D               	addwfc	(??___ftge+1)& (0+255),w,b
 12097  0024F4  6F6A               	movwf	(___ftge@ff2+1)& (0+255),b
 12098  0024F6  0E80               	movlw	128
 12099  0024F8  216E               	addwfc	(??___ftge+2)& (0+255),w,b
 12100  0024FA  6F6B               	movwf	(___ftge@ff2+2)& (0+255),b
 12101  0024FC                     l1433:
 12102                           
 12103                           ; BSR set to: 0
 12104                           
 12105                           ; BSR set to: 0
 12106  0024FC  0E00               	movlw	0
 12107  0024FE  1B66               	xorwf	___ftge@ff1& (0+255),f,b
 12108  002500  0E00               	movlw	0
 12109  002502  1B67               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 12110  002504  0E80               	movlw	128
 12111  002506  1B68               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 12112                           
 12113                           ; BSR set to: 0
 12114  002508  0E00               	movlw	0
 12115  00250A  1B69               	xorwf	___ftge@ff2& (0+255),f,b
 12116  00250C  0E00               	movlw	0
 12117  00250E  1B6A               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 12118  002510  0E80               	movlw	128
 12119  002512  1B6B               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 12120  002514  5169               	movf	___ftge@ff2& (0+255),w,b
 12121  002516  5D66               	subwf	___ftge@ff1& (0+255),w,b
 12122  002518  516A               	movf	(___ftge@ff2+1)& (0+255),w,b
 12123  00251A  5967               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 12124  00251C  516B               	movf	(___ftge@ff2+2)& (0+255),w,b
 12125  00251E  5968               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 12126  002520  B0D8               	btfsc	status,0,c
 12127  002522  D002               	goto	l6026
 12128                           
 12129                           ; BSR set to: 0
 12130  002524  90D8               	bcf	status,0,c
 12131  002526  0012               	return	
 12132  002528                     l6026:
 12133                           
 12134                           ; BSR set to: 0
 12135                           
 12136                           ; BSR set to: 0
 12137  002528  80D8               	bsf	status,0,c
 12138                           
 12139                           ; BSR set to: 0
 12140  00252A  0012               	return	
 12141  00252C                     __end_of___ftge:
 12142                           	opt stack 0
 12143                           tosu	equ	0xFFF
 12144                           tosh	equ	0xFFE
 12145                           tosl	equ	0xFFD
 12146                           pclath	equ	0xFFA
 12147                           tblptru	equ	0xFF8
 12148                           tblptrh	equ	0xFF7
 12149                           tblptrl	equ	0xFF6
 12150                           tablat	equ	0xFF5
 12151                           prodh	equ	0xFF4
 12152                           prodl	equ	0xFF3
 12153                           intcon	equ	0xFF2
 12154                           postinc0	equ	0xFEE
 12155                           wreg	equ	0xFE8
 12156                           indf1	equ	0xFE7
 12157                           postdec1	equ	0xFE5
 12158                           fsr1h	equ	0xFE2
 12159                           fsr1l	equ	0xFE1
 12160                           indf2	equ	0xFDF
 12161                           postinc2	equ	0xFDE
 12162                           postdec2	equ	0xFDD
 12163                           fsr2h	equ	0xFDA
 12164                           fsr2l	equ	0xFD9
 12165                           status	equ	0xFD8
 12166                           
 12167 ;; *************** function _printString *****************
 12168 ;; Defined at:
 12169 ;;		line 24 in file "main.c"
 12170 ;; Parameters:    Size  Location     Type
 12171 ;;		None
 12172 ;; Auto vars:     Size  Location     Type
 12173 ;;  i               2   50[BANK0 ] int 
 12174 ;;  welcome        50    0[BANK0 ] unsigned char [50]
 12175 ;; Return value:  Size  Location     Type
 12176 ;;                  1    wreg      void 
 12177 ;; Registers used:
 12178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12184 ;;      Params:         0       0       0       0       0       0       0
 12185 ;;      Locals:         0      52       0       0       0       0       0
 12186 ;;      Temps:          2       0       0       0       0       0       0
 12187 ;;      Totals:         2      52       0       0       0       0       0
 12188 ;;Total ram usage:       54 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; Hardware stack levels required when called:    6
 12191 ;; This function calls:
 12192 ;;		_EUSART1_Write
 12193 ;; This function is called by:
 12194 ;;		_main
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           	psect	text61
 12199  0028EE                     __ptext61:
 12200                           	opt stack 0
 12201  0028EE                     _printString:
 12202                           	opt stack 24
 12203                           
 12204                           ;main.c: 25: char welcome[50] = "\n\rHello. Welcome to EE Hospital \n\r";
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;incstack = 0
 12208  0028EE  EE21  F000         	lfsr	2,printString@F7188
 12209  0028F2  EE10  F060         	lfsr	1,printString@welcome
 12210  0028F6  0E31               	movlw	49
 12211  0028F8                     u6541:
 12212  0028F8  CFDB FFE3          	movff	plusw2,plusw1
 12213  0028FC  06E8               	decf	wreg,f,c
 12214  0028FE  E2FC               	bc	u6541
 12215                           
 12216                           ;main.c: 26: for (int i = 0; i < 50; i++ ) {
 12217  002900  0E00               	movlw	0
 12218  002902  0100               	movlb	0	; () banked
 12219  002904  6F93               	movwf	(printString@i+1)& (0+255),b
 12220  002906  0E00               	movlw	0
 12221  002908  6F92               	movwf	printString@i& (0+255),b
 12222  00290A                     l7094:
 12223                           
 12224                           ; BSR set to: 0
 12225  00290A  BF93               	btfsc	(printString@i+1)& (0+255),7,b
 12226  00290C  D006               	goto	l846
 12227  00290E  5193               	movf	(printString@i+1)& (0+255),w,b
 12228  002910  E11D               	bnz	l848
 12229  002912  0E32               	movlw	50
 12230  002914  5D92               	subwf	printString@i& (0+255),w,b
 12231  002916  B0D8               	btfsc	status,0,c
 12232  002918  0012               	return	
 12233  00291A                     l846:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;main.c: 27: EUSART1_Write(welcome[i]);
 12237                           
 12238                           ; BSR set to: 0
 12239  00291A  0E60               	movlw	low printString@welcome
 12240  00291C  2592               	addwf	printString@i& (0+255),w,b
 12241  00291E  6ED9               	movwf	fsr2l,c
 12242  002920  0E00               	movlw	high printString@welcome
 12243  002922  2193               	addwfc	(printString@i+1)& (0+255),w,b
 12244  002924  6EDA               	movwf	fsr2h,c
 12245  002926  50DF               	movf	indf2,w,c
 12246  002928  ECB6  F016         	call	_EUSART1_Write
 12247                           
 12248                           ;main.c: 28: _delay((unsigned long)((100)*(16000000/4000.0)));
 12249  00292C  0E03               	movlw	3
 12250  00292E  6E1B               	movwf	(??_printString+1)& (0+255),c
 12251  002930  0E08               	movlw	8
 12252  002932  6E1A               	movwf	??_printString& (0+255),c
 12253  002934  0E77               	movlw	119
 12254  002936                     u7757:
 12255  002936  2EE8               	decfsz	wreg,f,c
 12256  002938  D7FE               	bra	u7757
 12257  00293A  2E1A               	decfsz	??_printString& (0+255),f,c
 12258  00293C  D7FC               	bra	u7757
 12259  00293E  2E1B               	decfsz	(??_printString+1)& (0+255),f,c
 12260  002940  D7FA               	bra	u7757
 12261  002942  F000               	nop	
 12262  002944  0100               	movlb	0	; () banked
 12263  002946  4B92               	infsnz	printString@i& (0+255),f,b
 12264  002948  2B93               	incf	(printString@i+1)& (0+255),f,b
 12265  00294A  D7DF               	goto	l7094
 12266  00294C                     l848:
 12267                           
 12268                           ; BSR set to: 0
 12269  00294C  0012               	return		;funcret
 12270  00294E                     __end_of_printString:
 12271                           	opt stack 0
 12272                           tosu	equ	0xFFF
 12273                           tosh	equ	0xFFE
 12274                           tosl	equ	0xFFD
 12275                           pclath	equ	0xFFA
 12276                           tblptru	equ	0xFF8
 12277                           tblptrh	equ	0xFF7
 12278                           tblptrl	equ	0xFF6
 12279                           tablat	equ	0xFF5
 12280                           prodh	equ	0xFF4
 12281                           prodl	equ	0xFF3
 12282                           intcon	equ	0xFF2
 12283                           postinc0	equ	0xFEE
 12284                           wreg	equ	0xFE8
 12285                           indf1	equ	0xFE7
 12286                           postdec1	equ	0xFE5
 12287                           plusw1	equ	0xFE3
 12288                           fsr1h	equ	0xFE2
 12289                           fsr1l	equ	0xFE1
 12290                           indf2	equ	0xFDF
 12291                           postinc2	equ	0xFDE
 12292                           postdec2	equ	0xFDD
 12293                           plusw2	equ	0xFDB
 12294                           fsr2h	equ	0xFDA
 12295                           fsr2l	equ	0xFD9
 12296                           status	equ	0xFD8
 12297                           
 12298 ;; *************** function _EUSART1_Write *****************
 12299 ;; Defined at:
 12300 ;;		line 110 in file "mcc_generated_files/eusart1.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  txData          1    wreg     unsigned char 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  txData          1   24[COMRAM] unsigned char 
 12305 ;; Return value:  Size  Location     Type
 12306 ;;                  1    wreg      void 
 12307 ;; Registers used:
 12308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12314 ;;      Params:         0       0       0       0       0       0       0
 12315 ;;      Locals:         1       0       0       0       0       0       0
 12316 ;;      Temps:          0       0       0       0       0       0       0
 12317 ;;      Totals:         1       0       0       0       0       0       0
 12318 ;;Total ram usage:        1 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:    5
 12321 ;; This function calls:
 12322 ;;		Nothing
 12323 ;; This function is called by:
 12324 ;;		_putch
 12325 ;;		_printString
 12326 ;;		_Send_UART
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text62
 12331  002D6C                     __ptext62:
 12332                           	opt stack 0
 12333  002D6C                     _EUSART1_Write:
 12334                           	opt stack 23
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;incstack = 0
 12338                           ;EUSART1_Write@txData stored from wreg
 12339  002D6C  6E19               	movwf	EUSART1_Write@txData,c
 12340  002D6E                     
 12341                           ;eusart1.c: 113: {
 12342                           
 12343                           ;eusart1.c: 112: while(0 == eusart1TxBufferRemaining)
 12344  002D6E  5045               	movf	_eusart1TxBufferRemaining,w,c	;volatile
 12345  002D70  B4D8               	btfsc	status,2,c
 12346  002D72  D7FD               	goto	l6344
 12347                           
 12348                           ;eusart1.c: 114: }
 12349                           ;eusart1.c: 116: if(0 == PIE1bits.TX1IE)
 12350  002D74  B89D               	btfsc	3997,4,c	;volatile
 12351  002D76  D003               	goto	l743
 12352                           
 12353                           ;eusart1.c: 117: {
 12354                           ;eusart1.c: 118: TXREG1 = txData;
 12355  002D78  C019  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12356                           
 12357                           ;eusart1.c: 119: }
 12358  002D7C  D012               	goto	l744
 12359  002D7E                     l743:
 12360                           
 12361                           ;eusart1.c: 120: else
 12362                           ;eusart1.c: 121: {
 12363                           ;eusart1.c: 122: PIE1bits.TX1IE = 0;
 12364  002D7E  989D               	bcf	3997,4,c	;volatile
 12365                           
 12366                           ;eusart1.c: 123: eusart1TxBuffer[eusart1TxHead++] = txData;
 12367  002D80  5039               	movf	_eusart1TxHead,w,c	;volatile
 12368  002D82  0D01               	mullw	1
 12369  002D84  0E68               	movlw	low _eusart1TxBuffer
 12370  002D86  24F3               	addwf	prodl,w,c
 12371  002D88  6ED9               	movwf	fsr2l,c
 12372  002D8A  0E01               	movlw	high _eusart1TxBuffer
 12373  002D8C  20F4               	addwfc	prodh,w,c
 12374  002D8E  6EDA               	movwf	fsr2h,c
 12375  002D90  C019  FFDF         	movff	EUSART1_Write@txData,indf2
 12376  002D94  2A39               	incf	_eusart1TxHead,f,c	;volatile
 12377                           
 12378                           ;eusart1.c: 124: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12379  002D96  0E0F               	movlw	15
 12380  002D98  6439               	cpfsgt	_eusart1TxHead,c	;volatile
 12381  002D9A  D002               	goto	l745
 12382                           
 12383                           ;eusart1.c: 125: {
 12384                           ;eusart1.c: 126: eusart1TxHead = 0;
 12385  002D9C  0E00               	movlw	0
 12386  002D9E  6E39               	movwf	_eusart1TxHead,c	;volatile
 12387  002DA0                     l745:
 12388                           
 12389                           ;eusart1.c: 127: }
 12390                           ;eusart1.c: 128: eusart1TxBufferRemaining--;
 12391  002DA0  0645               	decf	_eusart1TxBufferRemaining,f,c	;volatile
 12392  002DA2                     l744:
 12393                           
 12394                           ;eusart1.c: 129: }
 12395                           ;eusart1.c: 130: PIE1bits.TX1IE = 1;
 12396  002DA2  889D               	bsf	3997,4,c	;volatile
 12397  002DA4  0012               	return		;funcret
 12398  002DA6                     __end_of_EUSART1_Write:
 12399                           	opt stack 0
 12400                           tosu	equ	0xFFF
 12401                           tosh	equ	0xFFE
 12402                           tosl	equ	0xFFD
 12403                           pclath	equ	0xFFA
 12404                           tblptru	equ	0xFF8
 12405                           tblptrh	equ	0xFF7
 12406                           tblptrl	equ	0xFF6
 12407                           tablat	equ	0xFF5
 12408                           prodh	equ	0xFF4
 12409                           prodl	equ	0xFF3
 12410                           intcon	equ	0xFF2
 12411                           postinc0	equ	0xFEE
 12412                           wreg	equ	0xFE8
 12413                           indf1	equ	0xFE7
 12414                           postdec1	equ	0xFE5
 12415                           plusw1	equ	0xFE3
 12416                           fsr1h	equ	0xFE2
 12417                           fsr1l	equ	0xFE1
 12418                           indf2	equ	0xFDF
 12419                           postinc2	equ	0xFDE
 12420                           postdec2	equ	0xFDD
 12421                           plusw2	equ	0xFDB
 12422                           fsr2h	equ	0xFDA
 12423                           fsr2l	equ	0xFD9
 12424                           status	equ	0xFD8
 12425                           
 12426 ;; *************** function _atoi *****************
 12427 ;; Defined at:
 12428 ;;		line 5 in file "/Applications/microchip/xc8/v1.45/sources/common/atoi.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;  s               2   44[COMRAM] PTR const unsigned char 
 12431 ;;		 -> main@newBuffer(3), 
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;  a               2    3[BANK0 ] int 
 12434 ;;  sign            1    2[BANK0 ] unsigned char 
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  2   44[COMRAM] int 
 12437 ;; Registers used:
 12438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12444 ;;      Params:         2       0       0       0       0       0       0
 12445 ;;      Locals:         0       3       0       0       0       0       0
 12446 ;;      Temps:          0       2       0       0       0       0       0
 12447 ;;      Totals:         2       5       0       0       0       0       0
 12448 ;;Total ram usage:        7 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    6
 12451 ;; This function calls:
 12452 ;;		___wmul
 12453 ;;		_isdigit
 12454 ;; This function is called by:
 12455 ;;		_main
 12456 ;; This function uses a non-reentrant model
 12457 ;;
 12458                           
 12459                           	psect	text63
 12460  0021E8                     __ptext63:
 12461                           	opt stack 0
 12462  0021E8                     _atoi:
 12463                           	opt stack 24
 12464                           
 12465                           ;incstack = 0
 12466  0021E8  D002               	goto	l1260
 12467  0021EA  4A2D               	infsnz	atoi@s,f,c
 12468  0021EC  2A2E               	incf	atoi@s+1,f,c
 12469  0021EE                     l1260:
 12470  0021EE  C02D  FFD9         	movff	atoi@s,fsr2l
 12471  0021F2  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12472  0021F6  0E20               	movlw	32
 12473  0021F8  18DE               	xorwf	postinc2,w,c
 12474  0021FA  B4D8               	btfsc	status,2,c
 12475  0021FC  D7F6               	goto	l1261
 12476  0021FE  C02D  FFD9         	movff	atoi@s,fsr2l
 12477  002202  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12478  002206  0E09               	movlw	9
 12479  002208  18DE               	xorwf	postinc2,w,c
 12480  00220A  B4D8               	btfsc	status,2,c
 12481  00220C  D7EE               	goto	l1261
 12482  00220E  0E00               	movlw	0
 12483  002210  0100               	movlb	0	; () banked
 12484  002212  6F64               	movwf	(atoi@a+1)& (0+255),b
 12485  002214  0E00               	movlw	0
 12486  002216  6F63               	movwf	atoi@a& (0+255),b
 12487  002218  0E00               	movlw	0
 12488  00221A  6F62               	movwf	atoi@sign& (0+255),b
 12489                           
 12490                           ; BSR set to: 0
 12491  00221C  C02D  FFD9         	movff	atoi@s,fsr2l
 12492  002220  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12493  002224  0E2D               	movlw	45
 12494  002226  18DE               	xorwf	postinc2,w,c
 12495  002228  A4D8               	btfss	status,2,c
 12496  00222A  D002               	goto	l1263
 12497                           
 12498                           ; BSR set to: 0
 12499  00222C  2B62               	incf	atoi@sign& (0+255),f,b
 12500  00222E  D025               	goto	l7502
 12501  002230                     l1263:
 12502                           
 12503                           ; BSR set to: 0
 12504                           
 12505                           ; BSR set to: 0
 12506  002230  C02D  FFD9         	movff	atoi@s,fsr2l
 12507  002234  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12508  002238  0E2B               	movlw	43
 12509  00223A  18DE               	xorwf	postinc2,w,c
 12510  00223C  A4D8               	btfss	status,2,c
 12511  00223E  D01F               	goto	l1266
 12512  002240  D01C               	goto	l7502
 12513  002242                     
 12514                           ; BSR set to: 0
 12515  002242  C063  F027         	movff	atoi@a,___wmul@multiplier
 12516  002246  C064  F028         	movff	atoi@a+1,___wmul@multiplier+1
 12517  00224A  0E00               	movlw	0
 12518  00224C  6E2A               	movwf	___wmul@multiplicand+1,c
 12519  00224E  0E0A               	movlw	10
 12520  002250  6E29               	movwf	___wmul@multiplicand,c
 12521  002252  EC90  F017         	call	___wmul	;wreg free
 12522  002256  C02D  FFD9         	movff	atoi@s,fsr2l
 12523  00225A  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12524  00225E  50DF               	movf	indf2,w,c
 12525  002260  0100               	movlb	0	; () banked
 12526  002262  6F60               	movwf	??_atoi& (0+255),b
 12527  002264  6B61               	clrf	(??_atoi+1)& (0+255),b
 12528  002266  5027               	movf	?___wmul,w,c
 12529  002268  2760               	addwf	??_atoi& (0+255),f,b
 12530  00226A  5028               	movf	?___wmul+1,w,c
 12531  00226C  2361               	addwfc	(??_atoi+1)& (0+255),f,b
 12532  00226E  0ED0               	movlw	208
 12533  002270  2560               	addwf	??_atoi& (0+255),w,b
 12534  002272  6F63               	movwf	atoi@a& (0+255),b
 12535  002274  0EFF               	movlw	255
 12536  002276  2161               	addwfc	(??_atoi+1)& (0+255),w,b
 12537  002278  6F64               	movwf	(atoi@a+1)& (0+255),b
 12538  00227A                     l7502:
 12539                           
 12540                           ; BSR set to: 0
 12541  00227A  4A2D               	infsnz	atoi@s,f,c
 12542  00227C  2A2E               	incf	atoi@s+1,f,c
 12543  00227E                     l1266:
 12544                           
 12545                           ; BSR set to: 0
 12546                           
 12547                           ; BSR set to: 0
 12548  00227E  C02D  FFD9         	movff	atoi@s,fsr2l
 12549  002282  C02E  FFDA         	movff	atoi@s+1,fsr2h
 12550  002286  50DF               	movf	indf2,w,c
 12551  002288  ECB5  F017         	call	_isdigit
 12552  00228C  B0D8               	btfsc	status,0,c
 12553  00228E  D7D9               	goto	l1267
 12554  002290  0100               	movlb	0	; () banked
 12555  002292  5162               	movf	atoi@sign& (0+255),w,b
 12556  002294  B4D8               	btfsc	status,2,c
 12557  002296  D00D               	goto	l1269
 12558                           
 12559                           ; BSR set to: 0
 12560  002298  C063  F060         	movff	atoi@a,??_atoi
 12561  00229C  C064  F061         	movff	atoi@a+1,??_atoi+1
 12562  0022A0  1F60               	comf	??_atoi& (0+255),f,b
 12563  0022A2  1F61               	comf	(??_atoi+1)& (0+255),f,b
 12564  0022A4  4B60               	infsnz	??_atoi& (0+255),f,b
 12565  0022A6  2B61               	incf	(??_atoi+1)& (0+255),f,b
 12566  0022A8  C060  F02D         	movff	??_atoi,?_atoi
 12567  0022AC  C061  F02E         	movff	??_atoi+1,?_atoi+1
 12568  0022B0  0012               	return	
 12569  0022B2                     l1269:
 12570                           
 12571                           ; BSR set to: 0
 12572  0022B2  C063  F02D         	movff	atoi@a,?_atoi
 12573  0022B6  C064  F02E         	movff	atoi@a+1,?_atoi+1
 12574                           
 12575                           ; BSR set to: 0
 12576  0022BA  0012               	return		;funcret
 12577  0022BC                     __end_of_atoi:
 12578                           	opt stack 0
 12579                           tosu	equ	0xFFF
 12580                           tosh	equ	0xFFE
 12581                           tosl	equ	0xFFD
 12582                           pclath	equ	0xFFA
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           prodh	equ	0xFF4
 12588                           prodl	equ	0xFF3
 12589                           intcon	equ	0xFF2
 12590                           postinc0	equ	0xFEE
 12591                           wreg	equ	0xFE8
 12592                           indf1	equ	0xFE7
 12593                           postdec1	equ	0xFE5
 12594                           plusw1	equ	0xFE3
 12595                           fsr1h	equ	0xFE2
 12596                           fsr1l	equ	0xFE1
 12597                           indf2	equ	0xFDF
 12598                           postinc2	equ	0xFDE
 12599                           postdec2	equ	0xFDD
 12600                           plusw2	equ	0xFDB
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _isdigit *****************
 12606 ;; Defined at:
 12607 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  c               1    wreg     unsigned char 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  c               1   26[COMRAM] unsigned char 
 12612 ;; Return value:  Size  Location     Type
 12613 ;;		None               void
 12614 ;; Registers used:
 12615 ;;		wreg, status,2, status,0
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12621 ;;      Params:         0       0       0       0       0       0       0
 12622 ;;      Locals:         2       0       0       0       0       0       0
 12623 ;;      Temps:          1       0       0       0       0       0       0
 12624 ;;      Totals:         3       0       0       0       0       0       0
 12625 ;;Total ram usage:        3 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    5
 12628 ;; This function calls:
 12629 ;;		Nothing
 12630 ;; This function is called by:
 12631 ;;		_printf
 12632 ;;		_atoi
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text64
 12637  002F6A                     __ptext64:
 12638                           	opt stack 0
 12639  002F6A                     _isdigit:
 12640                           	opt stack 24
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;incstack = 0
 12644                           ;isdigit@c stored from wreg
 12645  002F6A  6E1B               	movwf	isdigit@c,c
 12646  002F6C  0E00               	movlw	0
 12647  002F6E  6E1A               	movwf	_isdigit$2358,c
 12648  002F70  0E3A               	movlw	58
 12649  002F72  601B               	cpfslt	isdigit@c,c
 12650  002F74  D005               	goto	l1475
 12651  002F76  0E2F               	movlw	47
 12652  002F78  641B               	cpfsgt	isdigit@c,c
 12653  002F7A  D002               	goto	l1475
 12654  002F7C  0E01               	movlw	1
 12655  002F7E  6E1A               	movwf	_isdigit$2358,c
 12656  002F80                     l1475:
 12657  002F80  C01A  F019         	movff	_isdigit$2358,??_isdigit
 12658  002F84  3019               	rrcf	??_isdigit,w,c
 12659  002F86  0012               	return	
 12660  002F88                     __end_of_isdigit:
 12661                           	opt stack 0
 12662                           tosu	equ	0xFFF
 12663                           tosh	equ	0xFFE
 12664                           tosl	equ	0xFFD
 12665                           pclath	equ	0xFFA
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           postinc0	equ	0xFEE
 12674                           wreg	equ	0xFE8
 12675                           indf1	equ	0xFE7
 12676                           postdec1	equ	0xFE5
 12677                           plusw1	equ	0xFE3
 12678                           fsr1h	equ	0xFE2
 12679                           fsr1l	equ	0xFE1
 12680                           indf2	equ	0xFDF
 12681                           postinc2	equ	0xFDE
 12682                           postdec2	equ	0xFDD
 12683                           plusw2	equ	0xFDB
 12684                           fsr2h	equ	0xFDA
 12685                           fsr2l	equ	0xFD9
 12686                           status	equ	0xFD8
 12687                           
 12688 ;; *************** function ___wmul *****************
 12689 ;; Defined at:
 12690 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 12691 ;; Parameters:    Size  Location     Type
 12692 ;;  multiplier      2   38[COMRAM] unsigned int 
 12693 ;;  multiplicand    2   40[COMRAM] unsigned int 
 12694 ;; Auto vars:     Size  Location     Type
 12695 ;;  product         2   42[COMRAM] unsigned int 
 12696 ;; Return value:  Size  Location     Type
 12697 ;;                  2   38[COMRAM] unsigned int 
 12698 ;; Registers used:
 12699 ;;		wreg, status,2, status,0, prodl, prodh
 12700 ;; Tracked objects:
 12701 ;;		On entry : 0/0
 12702 ;;		On exit  : 0/0
 12703 ;;		Unchanged: 0/0
 12704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12705 ;;      Params:         4       0       0       0       0       0       0
 12706 ;;      Locals:         2       0       0       0       0       0       0
 12707 ;;      Temps:          0       0       0       0       0       0       0
 12708 ;;      Totals:         6       0       0       0       0       0       0
 12709 ;;Total ram usage:        6 bytes
 12710 ;; Hardware stack levels used:    1
 12711 ;; Hardware stack levels required when called:    5
 12712 ;; This function calls:
 12713 ;;		Nothing
 12714 ;; This function is called by:
 12715 ;;		_fround
 12716 ;;		_scale
 12717 ;;		_printf
 12718 ;;		_atoi
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           	psect	text65
 12723  002F20                     __ptext65:
 12724                           	opt stack 0
 12725  002F20                     ___wmul:
 12726                           	opt stack 23
 12727                           
 12728                           ;incstack = 0
 12729  002F20  5027               	movf	___wmul@multiplier,w,c
 12730  002F22  0229               	mulwf	___wmul@multiplicand,c
 12731  002F24  CFF3 F02B          	movff	prodl,___wmul@product
 12732  002F28  CFF4 F02C          	movff	prodh,___wmul@product+1
 12733  002F2C  5027               	movf	___wmul@multiplier,w,c
 12734  002F2E  022A               	mulwf	___wmul@multiplicand+1,c
 12735  002F30  50F3               	movf	prodl,w,c
 12736  002F32  262C               	addwf	___wmul@product+1,f,c
 12737  002F34  5028               	movf	___wmul@multiplier+1,w,c
 12738  002F36  0229               	mulwf	___wmul@multiplicand,c
 12739  002F38  50F3               	movf	prodl,w,c
 12740  002F3A  262C               	addwf	___wmul@product+1,f,c
 12741  002F3C  C02B  F027         	movff	___wmul@product,?___wmul
 12742  002F40  C02C  F028         	movff	___wmul@product+1,?___wmul+1
 12743  002F44  0012               	return	
 12744  002F46                     __end_of___wmul:
 12745                           	opt stack 0
 12746                           tosu	equ	0xFFF
 12747                           tosh	equ	0xFFE
 12748                           tosl	equ	0xFFD
 12749                           pclath	equ	0xFFA
 12750                           tblptru	equ	0xFF8
 12751                           tblptrh	equ	0xFF7
 12752                           tblptrl	equ	0xFF6
 12753                           tablat	equ	0xFF5
 12754                           prodh	equ	0xFF4
 12755                           prodl	equ	0xFF3
 12756                           intcon	equ	0xFF2
 12757                           postinc0	equ	0xFEE
 12758                           wreg	equ	0xFE8
 12759                           indf1	equ	0xFE7
 12760                           postdec1	equ	0xFE5
 12761                           plusw1	equ	0xFE3
 12762                           fsr1h	equ	0xFE2
 12763                           fsr1l	equ	0xFE1
 12764                           indf2	equ	0xFDF
 12765                           postinc2	equ	0xFDE
 12766                           postdec2	equ	0xFDD
 12767                           plusw2	equ	0xFDB
 12768                           fsr2h	equ	0xFDA
 12769                           fsr2l	equ	0xFD9
 12770                           status	equ	0xFD8
 12771                           
 12772 ;; *************** function ___ftdiv *****************
 12773 ;; Defined at:
 12774 ;;		line 54 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdiv.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  f1              3   36[COMRAM] float 
 12777 ;;  f2              3   39[COMRAM] float 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  f3              3    1[BANK0 ] float 
 12780 ;;  sign            1    5[BANK0 ] unsigned char 
 12781 ;;  exp             1    4[BANK0 ] unsigned char 
 12782 ;;  cntr            1    0[BANK0 ] unsigned char 
 12783 ;; Return value:  Size  Location     Type
 12784 ;;                  3   36[COMRAM] float 
 12785 ;; Registers used:
 12786 ;;		wreg, status,2, status,0, cstack
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12792 ;;      Params:         6       0       0       0       0       0       0
 12793 ;;      Locals:         0       6       0       0       0       0       0
 12794 ;;      Temps:          3       0       0       0       0       0       0
 12795 ;;      Totals:         9       6       0       0       0       0       0
 12796 ;;Total ram usage:       15 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:    6
 12799 ;; This function calls:
 12800 ;;		___ftpack
 12801 ;; This function is called by:
 12802 ;;		_main
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           	psect	text66
 12807  002100                     __ptext66:
 12808                           	opt stack 0
 12809  002100                     ___ftdiv:
 12810                           	opt stack 24
 12811                           
 12812                           ;incstack = 0
 12813  002100  C027  F02B         	movff	___ftdiv@f1+2,??___ftdiv
 12814  002104  6A2C               	clrf	(??___ftdiv+1)& (0+255),c
 12815  002106  6A2D               	clrf	(??___ftdiv+2)& (0+255),c
 12816  002108  3426               	rlcf	___ftdiv@f1+1,w,c
 12817  00210A  362B               	rlcf	??___ftdiv& (0+255),f,c
 12818  00210C  E301               	bnc	u7251
 12819  00210E  802C               	bsf	(??___ftdiv+1)& (0+255),0,c
 12820  002110                     u7251:
 12821  002110  502B               	movf	??___ftdiv,w,c
 12822  002112  0100               	movlb	0	; () banked
 12823  002114  6F64               	movwf	___ftdiv@exp& (0+255),b
 12824  002116  5164               	movf	___ftdiv@exp& (0+255),w,b
 12825  002118  A4D8               	btfss	status,2,c
 12826  00211A  D007               	goto	l1407
 12827                           
 12828                           ; BSR set to: 0
 12829  00211C  0E00               	movlw	0
 12830  00211E  6E25               	movwf	?___ftdiv,c
 12831  002120  0E00               	movlw	0
 12832  002122  6E26               	movwf	?___ftdiv+1,c
 12833  002124  0E00               	movlw	0
 12834  002126  6E27               	movwf	?___ftdiv+2,c
 12835                           
 12836                           ; BSR set to: 0
 12837  002128  0012               	return	
 12838  00212A                     l1407:
 12839                           
 12840                           ; BSR set to: 0
 12841                           
 12842                           ; BSR set to: 0
 12843  00212A  C02A  F02B         	movff	___ftdiv@f2+2,??___ftdiv
 12844  00212E  6A2C               	clrf	(??___ftdiv+1)& (0+255),c
 12845  002130  6A2D               	clrf	(??___ftdiv+2)& (0+255),c
 12846  002132  3429               	rlcf	___ftdiv@f2+1,w,c
 12847  002134  362B               	rlcf	??___ftdiv& (0+255),f,c
 12848  002136  E301               	bnc	u7271
 12849  002138  802C               	bsf	(??___ftdiv+1)& (0+255),0,c
 12850  00213A                     u7271:
 12851  00213A  502B               	movf	??___ftdiv,w,c
 12852  00213C  6F65               	movwf	___ftdiv@sign& (0+255),b
 12853  00213E  5165               	movf	___ftdiv@sign& (0+255),w,b
 12854  002140  A4D8               	btfss	status,2,c
 12855  002142  D007               	goto	l1409
 12856                           
 12857                           ; BSR set to: 0
 12858  002144  0E00               	movlw	0
 12859  002146  6E25               	movwf	?___ftdiv,c
 12860  002148  0E00               	movlw	0
 12861  00214A  6E26               	movwf	?___ftdiv+1,c
 12862  00214C  0E00               	movlw	0
 12863  00214E  6E27               	movwf	?___ftdiv+2,c
 12864                           
 12865                           ; BSR set to: 0
 12866  002150  0012               	return	
 12867  002152                     l1409:
 12868                           
 12869                           ; BSR set to: 0
 12870                           
 12871                           ; BSR set to: 0
 12872  002152  0E00               	movlw	0
 12873  002154  6F61               	movwf	___ftdiv@f3& (0+255),b
 12874  002156  0E00               	movlw	0
 12875  002158  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 12876  00215A  0E00               	movlw	0
 12877  00215C  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 12878                           
 12879                           ; BSR set to: 0
 12880  00215E  5165               	movf	___ftdiv@sign& (0+255),w,b
 12881  002160  0F89               	addlw	137
 12882  002162  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 12883                           
 12884                           ; BSR set to: 0
 12885  002164  C027  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 12886                           
 12887                           ; BSR set to: 0
 12888  002168  502A               	movf	___ftdiv@f2+2,w,c
 12889  00216A  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 12890                           
 12891                           ; BSR set to: 0
 12892  00216C  0E80               	movlw	128
 12893  00216E  1765               	andwf	___ftdiv@sign& (0+255),f,b
 12894                           
 12895                           ; BSR set to: 0
 12896  002170  8E26               	bsf	___ftdiv@f1+1,7,c
 12897                           
 12898                           ; BSR set to: 0
 12899  002172  0EFF               	movlw	255
 12900  002174  1625               	andwf	___ftdiv@f1,f,c
 12901  002176  0EFF               	movlw	255
 12902  002178  1626               	andwf	___ftdiv@f1+1,f,c
 12903  00217A  0E00               	movlw	0
 12904  00217C  1627               	andwf	___ftdiv@f1+2,f,c
 12905                           
 12906                           ; BSR set to: 0
 12907  00217E  8E29               	bsf	___ftdiv@f2+1,7,c
 12908                           
 12909                           ; BSR set to: 0
 12910  002180  0EFF               	movlw	255
 12911  002182  1628               	andwf	___ftdiv@f2,f,c
 12912  002184  0EFF               	movlw	255
 12913  002186  1629               	andwf	___ftdiv@f2+1,f,c
 12914  002188  0E00               	movlw	0
 12915  00218A  162A               	andwf	___ftdiv@f2+2,f,c
 12916                           
 12917                           ; BSR set to: 0
 12918  00218C  0E18               	movlw	24
 12919  00218E  6F60               	movwf	___ftdiv@cntr& (0+255),b
 12920  002190                     
 12921                           ; BSR set to: 0
 12922                           
 12923                           ; BSR set to: 0
 12924  002190  90D8               	bcf	status,0,c
 12925  002192  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 12926  002194  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12927  002196  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12928                           
 12929                           ; BSR set to: 0
 12930  002198  5028               	movf	___ftdiv@f2,w,c
 12931  00219A  5C25               	subwf	___ftdiv@f1,w,c
 12932  00219C  5029               	movf	___ftdiv@f2+1,w,c
 12933  00219E  5826               	subwfb	___ftdiv@f1+1,w,c
 12934  0021A0  502A               	movf	___ftdiv@f2+2,w,c
 12935  0021A2  5827               	subwfb	___ftdiv@f1+2,w,c
 12936  0021A4  A0D8               	btfss	status,0,c
 12937  0021A6  D007               	goto	l1411
 12938                           
 12939                           ; BSR set to: 0
 12940  0021A8  5028               	movf	___ftdiv@f2,w,c
 12941  0021AA  5E25               	subwf	___ftdiv@f1,f,c
 12942  0021AC  5029               	movf	___ftdiv@f2+1,w,c
 12943  0021AE  5A26               	subwfb	___ftdiv@f1+1,f,c
 12944  0021B0  502A               	movf	___ftdiv@f2+2,w,c
 12945  0021B2  5A27               	subwfb	___ftdiv@f1+2,f,c
 12946                           
 12947                           ; BSR set to: 0
 12948  0021B4  8161               	bsf	___ftdiv@f3& (0+255),0,b
 12949  0021B6                     l1411:
 12950                           
 12951                           ; BSR set to: 0
 12952  0021B6  90D8               	bcf	status,0,c
 12953  0021B8  3625               	rlcf	___ftdiv@f1,f,c
 12954  0021BA  3626               	rlcf	___ftdiv@f1+1,f,c
 12955  0021BC  3627               	rlcf	___ftdiv@f1+2,f,c
 12956                           
 12957                           ; BSR set to: 0
 12958  0021BE  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 12959  0021C0  D7E7               	goto	l1410
 12960                           
 12961                           ; BSR set to: 0
 12962                           
 12963                           ; BSR set to: 0
 12964  0021C2  C061  F019         	movff	___ftdiv@f3,___ftpack@arg
 12965  0021C6  C062  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12966  0021CA  C063  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12967  0021CE  C064  F01C         	movff	___ftdiv@exp,___ftpack@exp
 12968  0021D2  C065  F01D         	movff	___ftdiv@sign,___ftpack@sign
 12969  0021D6  EC5E  F011         	call	___ftpack	;wreg free
 12970  0021DA  C019  F025         	movff	?___ftpack,?___ftdiv
 12971  0021DE  C01A  F026         	movff	?___ftpack+1,?___ftdiv+1
 12972  0021E2  C01B  F027         	movff	?___ftpack+2,?___ftdiv+2
 12973  0021E6  0012               	return	
 12974  0021E8                     __end_of___ftdiv:
 12975                           	opt stack 0
 12976                           tosu	equ	0xFFF
 12977                           tosh	equ	0xFFE
 12978                           tosl	equ	0xFFD
 12979                           pclath	equ	0xFFA
 12980                           tblptru	equ	0xFF8
 12981                           tblptrh	equ	0xFF7
 12982                           tblptrl	equ	0xFF6
 12983                           tablat	equ	0xFF5
 12984                           prodh	equ	0xFF4
 12985                           prodl	equ	0xFF3
 12986                           intcon	equ	0xFF2
 12987                           postinc0	equ	0xFEE
 12988                           wreg	equ	0xFE8
 12989                           indf1	equ	0xFE7
 12990                           postdec1	equ	0xFE5
 12991                           plusw1	equ	0xFE3
 12992                           fsr1h	equ	0xFE2
 12993                           fsr1l	equ	0xFE1
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           plusw2	equ	0xFDB
 12998                           fsr2h	equ	0xFDA
 12999                           fsr2l	equ	0xFD9
 13000                           status	equ	0xFD8
 13001                           
 13002 ;; *************** function ___awtoft *****************
 13003 ;; Defined at:
 13004 ;;		line 32 in file "/Applications/microchip/xc8/v1.45/sources/common/awtoft.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;  c               2   32[COMRAM] int 
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;  sign            1   35[COMRAM] unsigned char 
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  3   32[COMRAM] float 
 13011 ;; Registers used:
 13012 ;;		wreg, status,2, status,0, cstack
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13018 ;;      Params:         3       0       0       0       0       0       0
 13019 ;;      Locals:         1       0       0       0       0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0
 13021 ;;      Totals:         4       0       0       0       0       0       0
 13022 ;;Total ram usage:        4 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; Hardware stack levels required when called:    6
 13025 ;; This function calls:
 13026 ;;		___ftpack
 13027 ;; This function is called by:
 13028 ;;		_main
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           	psect	text67
 13033  002DA6                     __ptext67:
 13034                           	opt stack 0
 13035  002DA6                     ___awtoft:
 13036                           	opt stack 24
 13037                           
 13038                           ;incstack = 0
 13039  002DA6  0E00               	movlw	0
 13040  002DA8  6E24               	movwf	___awtoft@sign,c
 13041  002DAA  AE22               	btfss	___awtoft@c+1,7,c
 13042  002DAC  D006               	goto	l1307
 13043  002DAE  6C21               	negf	___awtoft@c,c
 13044  002DB0  1E22               	comf	___awtoft@c+1,f,c
 13045  002DB2  B0D8               	btfsc	status,0,c
 13046  002DB4  2A22               	incf	___awtoft@c+1,f,c
 13047  002DB6  0E01               	movlw	1
 13048  002DB8  6E24               	movwf	___awtoft@sign,c
 13049  002DBA                     l1307:
 13050  002DBA  C021  F019         	movff	___awtoft@c,___ftpack@arg
 13051  002DBE  C022  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
 13052  002DC2  6A1B               	clrf	___ftpack@arg+2,c
 13053  002DC4  0E8E               	movlw	142
 13054  002DC6  6E1C               	movwf	___ftpack@exp,c
 13055  002DC8  C024  F01D         	movff	___awtoft@sign,___ftpack@sign
 13056  002DCC  EC5E  F011         	call	___ftpack	;wreg free
 13057  002DD0  C019  F021         	movff	?___ftpack,?___awtoft
 13058  002DD4  C01A  F022         	movff	?___ftpack+1,?___awtoft+1
 13059  002DD8  C01B  F023         	movff	?___ftpack+2,?___awtoft+2
 13060  002DDC  0012               	return	
 13061  002DDE                     __end_of___awtoft:
 13062                           	opt stack 0
 13063                           tosu	equ	0xFFF
 13064                           tosh	equ	0xFFE
 13065                           tosl	equ	0xFFD
 13066                           pclath	equ	0xFFA
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           postinc0	equ	0xFEE
 13075                           wreg	equ	0xFE8
 13076                           indf1	equ	0xFE7
 13077                           postdec1	equ	0xFE5
 13078                           plusw1	equ	0xFE3
 13079                           fsr1h	equ	0xFE2
 13080                           fsr1l	equ	0xFE1
 13081                           indf2	equ	0xFDF
 13082                           postinc2	equ	0xFDE
 13083                           postdec2	equ	0xFDD
 13084                           plusw2	equ	0xFDB
 13085                           fsr2h	equ	0xFDA
 13086                           fsr2l	equ	0xFD9
 13087                           status	equ	0xFD8
 13088                           
 13089 ;; *************** function ___ftpack *****************
 13090 ;; Defined at:
 13091 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  arg             3   24[COMRAM] unsigned um
 13094 ;;  exp             1   27[COMRAM] unsigned char 
 13095 ;;  sign            1   28[COMRAM] unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;		None
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  3   24[COMRAM] float 
 13100 ;; Registers used:
 13101 ;;		wreg, status,2, status,0
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13107 ;;      Params:         5       0       0       0       0       0       0
 13108 ;;      Locals:         0       0       0       0       0       0       0
 13109 ;;      Temps:          3       0       0       0       0       0       0
 13110 ;;      Totals:         8       0       0       0       0       0       0
 13111 ;;Total ram usage:        8 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    5
 13114 ;; This function calls:
 13115 ;;		Nothing
 13116 ;; This function is called by:
 13117 ;;		___awtoft
 13118 ;;		___ftadd
 13119 ;;		___ftdiv
 13120 ;;		___ftmul
 13121 ;;		___lltoft
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           	psect	text68
 13126  0022BC                     __ptext68:
 13127                           	opt stack 0
 13128  0022BC                     ___ftpack:
 13129                           	opt stack 22
 13130                           
 13131                           ;incstack = 0
 13132  0022BC  501C               	movf	___ftpack@exp,w,c
 13133  0022BE  B4D8               	btfsc	status,2,c
 13134  0022C0  D005               	goto	u5470
 13135  0022C2  5019               	movf	___ftpack@arg,w,c
 13136  0022C4  101A               	iorwf	___ftpack@arg+1,w,c
 13137  0022C6  101B               	iorwf	___ftpack@arg+2,w,c
 13138  0022C8  A4D8               	btfss	status,2,c
 13139  0022CA  D00C               	goto	l1343
 13140  0022CC                     u5470:
 13141  0022CC  0E00               	movlw	0
 13142  0022CE  6E19               	movwf	?___ftpack,c
 13143  0022D0  0E00               	movlw	0
 13144  0022D2  6E1A               	movwf	?___ftpack+1,c
 13145  0022D4  0E00               	movlw	0
 13146  0022D6  6E1B               	movwf	?___ftpack+2,c
 13147  0022D8  0012               	return	
 13148  0022DA  2A1C               	incf	___ftpack@exp,f,c
 13149  0022DC  90D8               	bcf	status,0,c
 13150  0022DE  321B               	rrcf	___ftpack@arg+2,f,c
 13151  0022E0  321A               	rrcf	___ftpack@arg+1,f,c
 13152  0022E2  3219               	rrcf	___ftpack@arg,f,c
 13153  0022E4                     l1343:
 13154  0022E4  0E00               	movlw	0
 13155  0022E6  1419               	andwf	___ftpack@arg,w,c
 13156  0022E8  6E1E               	movwf	??___ftpack& (0+255),c
 13157  0022EA  0E00               	movlw	0
 13158  0022EC  141A               	andwf	___ftpack@arg+1,w,c
 13159  0022EE  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 13160  0022F0  0EFE               	movlw	254
 13161  0022F2  141B               	andwf	___ftpack@arg+2,w,c
 13162  0022F4  6E20               	movwf	(??___ftpack+2)& (0+255),c
 13163  0022F6  501E               	movf	??___ftpack,w,c
 13164  0022F8  101F               	iorwf	??___ftpack+1,w,c
 13165  0022FA  1020               	iorwf	??___ftpack+2,w,c
 13166  0022FC  B4D8               	btfsc	status,2,c
 13167  0022FE  D00C               	goto	l1346
 13168  002300  D7EC               	goto	l1344
 13169  002302  2A1C               	incf	___ftpack@exp,f,c
 13170  002304  0E01               	movlw	1
 13171  002306  2619               	addwf	___ftpack@arg,f,c
 13172  002308  0E00               	movlw	0
 13173  00230A  221A               	addwfc	___ftpack@arg+1,f,c
 13174  00230C  0E00               	movlw	0
 13175  00230E  221B               	addwfc	___ftpack@arg+2,f,c
 13176  002310  90D8               	bcf	status,0,c
 13177  002312  321B               	rrcf	___ftpack@arg+2,f,c
 13178  002314  321A               	rrcf	___ftpack@arg+1,f,c
 13179  002316  3219               	rrcf	___ftpack@arg,f,c
 13180  002318                     l1346:
 13181  002318  0E00               	movlw	0
 13182  00231A  1419               	andwf	___ftpack@arg,w,c
 13183  00231C  6E1E               	movwf	??___ftpack& (0+255),c
 13184  00231E  0E00               	movlw	0
 13185  002320  141A               	andwf	___ftpack@arg+1,w,c
 13186  002322  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 13187  002324  0EFF               	movlw	255
 13188  002326  141B               	andwf	___ftpack@arg+2,w,c
 13189  002328  6E20               	movwf	(??___ftpack+2)& (0+255),c
 13190  00232A  501E               	movf	??___ftpack,w,c
 13191  00232C  101F               	iorwf	??___ftpack+1,w,c
 13192  00232E  1020               	iorwf	??___ftpack+2,w,c
 13193  002330  B4D8               	btfsc	status,2,c
 13194  002332  D006               	goto	l1349
 13195  002334  D7E6               	goto	l1347
 13196  002336  061C               	decf	___ftpack@exp,f,c
 13197  002338  90D8               	bcf	status,0,c
 13198  00233A  3619               	rlcf	___ftpack@arg,f,c
 13199  00233C  361A               	rlcf	___ftpack@arg+1,f,c
 13200  00233E  361B               	rlcf	___ftpack@arg+2,f,c
 13201  002340                     l1349:
 13202  002340  BE1A               	btfsc	___ftpack@arg+1,7,c
 13203  002342  D003               	goto	u5510
 13204  002344  0E02               	movlw	2
 13205  002346  601C               	cpfslt	___ftpack@exp,c
 13206  002348  D7F6               	goto	l1350
 13207  00234A                     u5510:
 13208  00234A  A01C               	btfss	___ftpack@exp,0,c
 13209  00234C  9E1A               	bcf	___ftpack@arg+1,7,c
 13210  00234E  90D8               	bcf	status,0,c
 13211  002350  321C               	rrcf	___ftpack@exp,f,c
 13212  002352  501C               	movf	___ftpack@exp,w,c
 13213  002354  121B               	iorwf	___ftpack@arg+2,f,c
 13214  002356  501D               	movf	___ftpack@sign,w,c
 13215  002358  A4D8               	btfss	status,2,c
 13216  00235A  8E1B               	bsf	___ftpack@arg+2,7,c
 13217  00235C  C019  F019         	movff	___ftpack@arg,?___ftpack
 13218  002360  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
 13219  002364  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
 13220  002368  0012               	return	
 13221  00236A                     __end_of___ftpack:
 13222                           	opt stack 0
 13223                           tosu	equ	0xFFF
 13224                           tosh	equ	0xFFE
 13225                           tosl	equ	0xFFD
 13226                           pclath	equ	0xFFA
 13227                           tblptru	equ	0xFF8
 13228                           tblptrh	equ	0xFF7
 13229                           tblptrl	equ	0xFF6
 13230                           tablat	equ	0xFF5
 13231                           prodh	equ	0xFF4
 13232                           prodl	equ	0xFF3
 13233                           intcon	equ	0xFF2
 13234                           postinc0	equ	0xFEE
 13235                           wreg	equ	0xFE8
 13236                           indf1	equ	0xFE7
 13237                           postdec1	equ	0xFE5
 13238                           plusw1	equ	0xFE3
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           plusw2	equ	0xFDB
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _SYSTEM_Initialize *****************
 13250 ;; Defined at:
 13251 ;;		line 112 in file "mcc_generated_files/mcc.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  1    wreg      void 
 13258 ;; Registers used:
 13259 ;;		wreg, status,2, status,0, cstack
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13265 ;;      Params:         0       0       0       0       0       0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0
 13267 ;;      Temps:          0       0       0       0       0       0       0
 13268 ;;      Totals:         0       0       0       0       0       0       0
 13269 ;;Total ram usage:        0 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    7
 13272 ;; This function calls:
 13273 ;;		_EUSART1_Initialize
 13274 ;;		_EUSART2_Initialize
 13275 ;;		_INTERRUPT_Initialize
 13276 ;;		_OSCILLATOR_Initialize
 13277 ;;		_PIN_MANAGER_Initialize
 13278 ;; This function is called by:
 13279 ;;		_main
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text69
 13284  00302A                     __ptext69:
 13285                           	opt stack 0
 13286  00302A                     _SYSTEM_Initialize:
 13287                           	opt stack 23
 13288                           
 13289                           ;mcc.c: 114: INTERRUPT_Initialize();
 13290                           
 13291                           ;incstack = 0
 13292  00302A  EC1D  F019         	call	_INTERRUPT_Initialize	;wreg free
 13293                           
 13294                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 13295  00302E  EC67  F017         	call	_PIN_MANAGER_Initialize	;wreg free
 13296                           
 13297                           ;mcc.c: 116: OSCILLATOR_Initialize();
 13298  003032  ECA2  F018         	call	_OSCILLATOR_Initialize	;wreg free
 13299                           
 13300                           ;mcc.c: 117: EUSART1_Initialize();
 13301  003036  ECEF  F016         	call	_EUSART1_Initialize	;wreg free
 13302                           
 13303                           ;mcc.c: 118: EUSART2_Initialize();
 13304  00303A  EC27  F016         	call	_EUSART2_Initialize	;wreg free
 13305  00303E  0012               	return		;funcret
 13306  003040                     __end_of_SYSTEM_Initialize:
 13307                           	opt stack 0
 13308                           tosu	equ	0xFFF
 13309                           tosh	equ	0xFFE
 13310                           tosl	equ	0xFFD
 13311                           pclath	equ	0xFFA
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           postinc0	equ	0xFEE
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           postdec1	equ	0xFE5
 13323                           plusw1	equ	0xFE3
 13324                           fsr1h	equ	0xFE2
 13325                           fsr1l	equ	0xFE1
 13326                           indf2	equ	0xFDF
 13327                           postinc2	equ	0xFDE
 13328                           postdec2	equ	0xFDD
 13329                           plusw2	equ	0xFDB
 13330                           fsr2h	equ	0xFDA
 13331                           fsr2l	equ	0xFD9
 13332                           status	equ	0xFD8
 13333                           
 13334 ;; *************** function _PIN_MANAGER_Initialize *****************
 13335 ;; Defined at:
 13336 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;		None
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;		None
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      void 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13350 ;;      Params:         0       0       0       0       0       0       0
 13351 ;;      Locals:         0       0       0       0       0       0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0
 13353 ;;      Totals:         0       0       0       0       0       0       0
 13354 ;;Total ram usage:        0 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    5
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_SYSTEM_Initialize
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text70
 13365  002ECE                     __ptext70:
 13366                           	opt stack 0
 13367  002ECE                     _PIN_MANAGER_Initialize:
 13368                           	opt stack 24
 13369                           
 13370                           ;pin_manager.c: 57: LATA = 0x00;
 13371                           
 13372                           ;incstack = 0
 13373  002ECE  0E00               	movlw	0
 13374  002ED0  6E89               	movwf	3977,c	;volatile
 13375                           
 13376                           ;pin_manager.c: 58: LATB = 0x00;
 13377  002ED2  0E00               	movlw	0
 13378  002ED4  6E8A               	movwf	3978,c	;volatile
 13379                           
 13380                           ;pin_manager.c: 59: LATC = 0x00;
 13381  002ED6  0E00               	movlw	0
 13382  002ED8  6E8B               	movwf	3979,c	;volatile
 13383                           
 13384                           ;pin_manager.c: 64: TRISA = 0xFF;
 13385  002EDA  6892               	setf	3986,c	;volatile
 13386                           
 13387                           ;pin_manager.c: 65: TRISB = 0xFF;
 13388  002EDC  6893               	setf	3987,c	;volatile
 13389                           
 13390                           ;pin_manager.c: 66: TRISC = 0xBF;
 13391  002EDE  0EBF               	movlw	191
 13392  002EE0  6E94               	movwf	3988,c	;volatile
 13393                           
 13394                           ;pin_manager.c: 71: ANSELC = 0x24;
 13395  002EE2  0E24               	movlw	36
 13396  002EE4  010F               	movlb	15	; () banked
 13397  002EE6  6F3A               	movwf	58,b	;volatile
 13398                           
 13399                           ;pin_manager.c: 72: ANSELB = 0x3F;
 13400  002EE8  0E3F               	movlw	63
 13401  002EEA  6F39               	movwf	57,b	;volatile
 13402                           
 13403                           ;pin_manager.c: 73: ANSELA = 0x2F;
 13404  002EEC  0E2F               	movlw	47
 13405  002EEE  6F38               	movwf	56,b	;volatile
 13406                           
 13407                           ;pin_manager.c: 78: WPUB = 0x00;
 13408  002EF0  0E00               	movlw	0
 13409  002EF2  6E61               	movwf	3937,c	;volatile
 13410                           
 13411                           ; BSR set to: 15
 13412                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
 13413  002EF4  8EF1               	bsf	intcon2,7,c	;volatile
 13414                           
 13415                           ; BSR set to: 15
 13416  002EF6  0012               	return		;funcret
 13417  002EF8                     __end_of_PIN_MANAGER_Initialize:
 13418                           	opt stack 0
 13419                           tosu	equ	0xFFF
 13420                           tosh	equ	0xFFE
 13421                           tosl	equ	0xFFD
 13422                           pclath	equ	0xFFA
 13423                           tblptru	equ	0xFF8
 13424                           tblptrh	equ	0xFF7
 13425                           tblptrl	equ	0xFF6
 13426                           tablat	equ	0xFF5
 13427                           prodh	equ	0xFF4
 13428                           prodl	equ	0xFF3
 13429                           intcon	equ	0xFF2
 13430                           intcon2	equ	0xFF1
 13431                           postinc0	equ	0xFEE
 13432                           wreg	equ	0xFE8
 13433                           indf1	equ	0xFE7
 13434                           postdec1	equ	0xFE5
 13435                           plusw1	equ	0xFE3
 13436                           fsr1h	equ	0xFE2
 13437                           fsr1l	equ	0xFE1
 13438                           indf2	equ	0xFDF
 13439                           postinc2	equ	0xFDE
 13440                           postdec2	equ	0xFDD
 13441                           plusw2	equ	0xFDB
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function _OSCILLATOR_Initialize *****************
 13447 ;; Defined at:
 13448 ;;		line 121 in file "mcc_generated_files/mcc.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;		None
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;		None
 13453 ;; Return value:  Size  Location     Type
 13454 ;;                  1    wreg      void 
 13455 ;; Registers used:
 13456 ;;		wreg, status,2
 13457 ;; Tracked objects:
 13458 ;;		On entry : 0/0
 13459 ;;		On exit  : 0/0
 13460 ;;		Unchanged: 0/0
 13461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13462 ;;      Params:         0       0       0       0       0       0       0
 13463 ;;      Locals:         0       0       0       0       0       0       0
 13464 ;;      Temps:          0       0       0       0       0       0       0
 13465 ;;      Totals:         0       0       0       0       0       0       0
 13466 ;;Total ram usage:        0 bytes
 13467 ;; Hardware stack levels used:    1
 13468 ;; Hardware stack levels required when called:    5
 13469 ;; This function calls:
 13470 ;;		Nothing
 13471 ;; This function is called by:
 13472 ;;		_SYSTEM_Initialize
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           	psect	text71
 13477  003144                     __ptext71:
 13478                           	opt stack 0
 13479  003144                     _OSCILLATOR_Initialize:
 13480                           	opt stack 24
 13481                           
 13482                           ;mcc.c: 124: OSCCON = 0x72;
 13483                           
 13484                           ; BSR set to: 15
 13485                           ;incstack = 0
 13486  003144  0E72               	movlw	114
 13487  003146  6ED3               	movwf	4051,c	;volatile
 13488                           
 13489                           ;mcc.c: 126: OSCCON2 = 0x04;
 13490  003148  0E04               	movlw	4
 13491  00314A  6ED2               	movwf	4050,c	;volatile
 13492                           
 13493                           ;mcc.c: 128: OSCTUNE = 0x40;
 13494  00314C  0E40               	movlw	64
 13495  00314E  6E9B               	movwf	3995,c	;volatile
 13496  003150  0012               	return		;funcret
 13497  003152                     __end_of_OSCILLATOR_Initialize:
 13498                           	opt stack 0
 13499                           tosu	equ	0xFFF
 13500                           tosh	equ	0xFFE
 13501                           tosl	equ	0xFFD
 13502                           pclath	equ	0xFFA
 13503                           tblptru	equ	0xFF8
 13504                           tblptrh	equ	0xFF7
 13505                           tblptrl	equ	0xFF6
 13506                           tablat	equ	0xFF5
 13507                           prodh	equ	0xFF4
 13508                           prodl	equ	0xFF3
 13509                           intcon	equ	0xFF2
 13510                           intcon2	equ	0xFF1
 13511                           postinc0	equ	0xFEE
 13512                           wreg	equ	0xFE8
 13513                           indf1	equ	0xFE7
 13514                           postdec1	equ	0xFE5
 13515                           plusw1	equ	0xFE3
 13516                           fsr1h	equ	0xFE2
 13517                           fsr1l	equ	0xFE1
 13518                           indf2	equ	0xFDF
 13519                           postinc2	equ	0xFDE
 13520                           postdec2	equ	0xFDD
 13521                           plusw2	equ	0xFDB
 13522                           fsr2h	equ	0xFDA
 13523                           fsr2l	equ	0xFD9
 13524                           status	equ	0xFD8
 13525                           
 13526 ;; *************** function _INTERRUPT_Initialize *****************
 13527 ;; Defined at:
 13528 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;		None
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;		None
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      void 
 13535 ;; Registers used:
 13536 ;;		None
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13542 ;;      Params:         0       0       0       0       0       0       0
 13543 ;;      Locals:         0       0       0       0       0       0       0
 13544 ;;      Temps:          0       0       0       0       0       0       0
 13545 ;;      Totals:         0       0       0       0       0       0       0
 13546 ;;Total ram usage:        0 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; Hardware stack levels required when called:    5
 13549 ;; This function calls:
 13550 ;;		Nothing
 13551 ;; This function is called by:
 13552 ;;		_SYSTEM_Initialize
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           	psect	text72
 13557  00323A                     __ptext72:
 13558                           	opt stack 0
 13559  00323A                     _INTERRUPT_Initialize:
 13560                           	opt stack 24
 13561                           
 13562                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 13563                           
 13564                           ;incstack = 0
 13565  00323A  9ED0               	bcf	4048,7,c	;volatile
 13566  00323C  0012               	return		;funcret
 13567  00323E                     __end_of_INTERRUPT_Initialize:
 13568                           	opt stack 0
 13569                           tosu	equ	0xFFF
 13570                           tosh	equ	0xFFE
 13571                           tosl	equ	0xFFD
 13572                           pclath	equ	0xFFA
 13573                           tblptru	equ	0xFF8
 13574                           tblptrh	equ	0xFF7
 13575                           tblptrl	equ	0xFF6
 13576                           tablat	equ	0xFF5
 13577                           prodh	equ	0xFF4
 13578                           prodl	equ	0xFF3
 13579                           intcon	equ	0xFF2
 13580                           intcon2	equ	0xFF1
 13581                           postinc0	equ	0xFEE
 13582                           wreg	equ	0xFE8
 13583                           indf1	equ	0xFE7
 13584                           postdec1	equ	0xFE5
 13585                           plusw1	equ	0xFE3
 13586                           fsr1h	equ	0xFE2
 13587                           fsr1l	equ	0xFE1
 13588                           indf2	equ	0xFDF
 13589                           postinc2	equ	0xFDE
 13590                           postdec2	equ	0xFDD
 13591                           plusw2	equ	0xFDB
 13592                           fsr2h	equ	0xFDA
 13593                           fsr2l	equ	0xFD9
 13594                           status	equ	0xFD8
 13595                           
 13596 ;; *************** function _EUSART2_Initialize *****************
 13597 ;; Defined at:
 13598 ;;		line 59 in file "mcc_generated_files/eusart2.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;		None
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;		None
 13603 ;; Return value:  Size  Location     Type
 13604 ;;                  1    wreg      void 
 13605 ;; Registers used:
 13606 ;;		wreg, status,2, status,0, cstack
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13612 ;;      Params:         0       0       0       0       0       0       0
 13613 ;;      Locals:         0       0       0       0       0       0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0
 13615 ;;      Totals:         0       0       0       0       0       0       0
 13616 ;;Total ram usage:        0 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    6
 13619 ;; This function calls:
 13620 ;;		_EUSART2_SetRxInterruptHandler
 13621 ;;		_EUSART2_SetTxInterruptHandler
 13622 ;; This function is called by:
 13623 ;;		_SYSTEM_Initialize
 13624 ;; This function uses a non-reentrant model
 13625 ;;
 13626                           
 13627                           	psect	text73
 13628  002C4E                     __ptext73:
 13629                           	opt stack 0
 13630  002C4E                     _EUSART2_Initialize:
 13631                           	opt stack 23
 13632                           
 13633                           ;eusart2.c: 62: PIE3bits.RC2IE = 0;
 13634                           
 13635                           ;incstack = 0
 13636  002C4E  9AA3               	bcf	4003,5,c	;volatile
 13637                           
 13638                           ;eusart2.c: 63: PIE3bits.TX2IE = 0;
 13639  002C50  98A3               	bcf	4003,4,c	;volatile
 13640                           
 13641                           ;eusart2.c: 65: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
 13642  002C52  0E44               	movlw	low _EUSART2_Transmit_ISR
 13643  002C54  6E19               	movwf	EUSART2_SetTxInterruptHandler@handler,c
 13644  002C56  0E2E               	movlw	high _EUSART2_Transmit_ISR
 13645  002C58  6E1A               	movwf	EUSART2_SetTxInterruptHandler@handler+1,c
 13646  002C5A  ECCE  F018         	call	_EUSART2_SetTxInterruptHandler	;wreg free
 13647                           
 13648                           ;eusart2.c: 66: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
 13649  002C5E  0E20               	movlw	low _EUSART2_Receive_ISR
 13650  002C60  6E19               	movwf	EUSART2_SetRxInterruptHandler@handler,c
 13651  002C62  0E28               	movlw	high _EUSART2_Receive_ISR
 13652  002C64  6E1A               	movwf	EUSART2_SetRxInterruptHandler@handler+1,c
 13653  002C66  ECD3  F018         	call	_EUSART2_SetRxInterruptHandler	;wreg free
 13654                           
 13655                           ;eusart2.c: 71: BAUDCON2 = 0x08;
 13656  002C6A  0E08               	movlw	8
 13657  002C6C  6E70               	movwf	3952,c	;volatile
 13658                           
 13659                           ;eusart2.c: 74: RCSTA2 = 0x90;
 13660  002C6E  0E90               	movlw	144
 13661  002C70  6E71               	movwf	3953,c	;volatile
 13662                           
 13663                           ;eusart2.c: 77: TXSTA2 = 0x04;
 13664  002C72  0E04               	movlw	4
 13665  002C74  6E72               	movwf	3954,c	;volatile
 13666                           
 13667                           ;eusart2.c: 80: SPBRG2 = 0xA0;
 13668  002C76  0EA0               	movlw	160
 13669  002C78  6E75               	movwf	3957,c	;volatile
 13670                           
 13671                           ;eusart2.c: 83: SPBRGH2 = 0x01;
 13672  002C7A  0E01               	movlw	1
 13673  002C7C  6E76               	movwf	3958,c	;volatile
 13674                           
 13675                           ;eusart2.c: 87: eusart2TxHead = 0;
 13676  002C7E  0E00               	movlw	0
 13677  002C80  6E3F               	movwf	_eusart2TxHead,c	;volatile
 13678                           
 13679                           ;eusart2.c: 88: eusart2TxTail = 0;
 13680  002C82  0E00               	movlw	0
 13681  002C84  6E3E               	movwf	_eusart2TxTail,c	;volatile
 13682                           
 13683                           ;eusart2.c: 89: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
 13684  002C86  0E08               	movlw	8
 13685  002C88  6E46               	movwf	_eusart2TxBufferRemaining,c	;volatile
 13686                           
 13687                           ;eusart2.c: 91: eusart2RxHead = 0;
 13688  002C8A  0E00               	movlw	0
 13689  002C8C  6E3D               	movwf	_eusart2RxHead,c	;volatile
 13690                           
 13691                           ;eusart2.c: 92: eusart2RxTail = 0;
 13692  002C8E  0E00               	movlw	0
 13693  002C90  6E3C               	movwf	_eusart2RxTail,c	;volatile
 13694                           
 13695                           ;eusart2.c: 93: eusart2RxCount = 0;
 13696  002C92  0E00               	movlw	0
 13697  002C94  6E3B               	movwf	_eusart2RxCount,c	;volatile
 13698                           
 13699                           ;eusart2.c: 96: PIE3bits.RC2IE = 1;
 13700  002C96  8AA3               	bsf	4003,5,c	;volatile
 13701  002C98  0012               	return		;funcret
 13702  002C9A                     __end_of_EUSART2_Initialize:
 13703                           	opt stack 0
 13704                           tosu	equ	0xFFF
 13705                           tosh	equ	0xFFE
 13706                           tosl	equ	0xFFD
 13707                           pclath	equ	0xFFA
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon2	equ	0xFF1
 13716                           postinc0	equ	0xFEE
 13717                           wreg	equ	0xFE8
 13718                           indf1	equ	0xFE7
 13719                           postdec1	equ	0xFE5
 13720                           plusw1	equ	0xFE3
 13721                           fsr1h	equ	0xFE2
 13722                           fsr1l	equ	0xFE1
 13723                           indf2	equ	0xFDF
 13724                           postinc2	equ	0xFDE
 13725                           postdec2	equ	0xFDD
 13726                           plusw2	equ	0xFDB
 13727                           fsr2h	equ	0xFDA
 13728                           fsr2l	equ	0xFD9
 13729                           status	equ	0xFD8
 13730                           
 13731 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
 13732 ;; Defined at:
 13733 ;;		line 233 in file "mcc_generated_files/eusart2.c"
 13734 ;; Parameters:    Size  Location     Type
 13735 ;;  handler         2   24[COMRAM] PTR FTN()void 
 13736 ;;		 -> EUSART2_Transmit_ISR(1), 
 13737 ;; Auto vars:     Size  Location     Type
 13738 ;;		None
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  1    wreg      void 
 13741 ;; Registers used:
 13742 ;;		wreg, status,2, status,0
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13748 ;;      Params:         2       0       0       0       0       0       0
 13749 ;;      Locals:         0       0       0       0       0       0       0
 13750 ;;      Temps:          0       0       0       0       0       0       0
 13751 ;;      Totals:         2       0       0       0       0       0       0
 13752 ;;Total ram usage:        2 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; Hardware stack levels required when called:    5
 13755 ;; This function calls:
 13756 ;;		Nothing
 13757 ;; This function is called by:
 13758 ;;		_EUSART2_Initialize
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           	psect	text74
 13763  00319C                     __ptext74:
 13764                           	opt stack 0
 13765  00319C                     _EUSART2_SetTxInterruptHandler:
 13766                           	opt stack 23
 13767                           
 13768                           ;eusart2.c: 234: EUSART2_TxDefaultInterruptHandler = handler;
 13769                           
 13770                           ;incstack = 0
 13771  00319C  C019  F043         	movff	EUSART2_SetTxInterruptHandler@handler,_EUSART2_TxDefaultInterruptHandler
 13772  0031A0  C01A  F044         	movff	EUSART2_SetTxInterruptHandler@handler+1,_EUSART2_TxDefaultInterruptHandler+1
 13773  0031A4  0012               	return		;funcret
 13774  0031A6                     __end_of_EUSART2_SetTxInterruptHandler:
 13775                           	opt stack 0
 13776                           tosu	equ	0xFFF
 13777                           tosh	equ	0xFFE
 13778                           tosl	equ	0xFFD
 13779                           pclath	equ	0xFFA
 13780                           tblptru	equ	0xFF8
 13781                           tblptrh	equ	0xFF7
 13782                           tblptrl	equ	0xFF6
 13783                           tablat	equ	0xFF5
 13784                           prodh	equ	0xFF4
 13785                           prodl	equ	0xFF3
 13786                           intcon	equ	0xFF2
 13787                           intcon2	equ	0xFF1
 13788                           postinc0	equ	0xFEE
 13789                           wreg	equ	0xFE8
 13790                           indf1	equ	0xFE7
 13791                           postdec1	equ	0xFE5
 13792                           plusw1	equ	0xFE3
 13793                           fsr1h	equ	0xFE2
 13794                           fsr1l	equ	0xFE1
 13795                           indf2	equ	0xFDF
 13796                           postinc2	equ	0xFDE
 13797                           postdec2	equ	0xFDD
 13798                           plusw2	equ	0xFDB
 13799                           fsr2h	equ	0xFDA
 13800                           fsr2l	equ	0xFD9
 13801                           status	equ	0xFD8
 13802                           
 13803 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
 13804 ;; Defined at:
 13805 ;;		line 237 in file "mcc_generated_files/eusart2.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;  handler         2   24[COMRAM] PTR FTN()void 
 13808 ;;		 -> EUSART2_Receive_ISR(1), 
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1    wreg      void 
 13813 ;; Registers used:
 13814 ;;		wreg, status,2, status,0
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13820 ;;      Params:         2       0       0       0       0       0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0
 13823 ;;      Totals:         2       0       0       0       0       0       0
 13824 ;;Total ram usage:        2 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:    5
 13827 ;; This function calls:
 13828 ;;		Nothing
 13829 ;; This function is called by:
 13830 ;;		_EUSART2_Initialize
 13831 ;; This function uses a non-reentrant model
 13832 ;;
 13833                           
 13834                           	psect	text75
 13835  0031A6                     __ptext75:
 13836                           	opt stack 0
 13837  0031A6                     _EUSART2_SetRxInterruptHandler:
 13838                           	opt stack 23
 13839                           
 13840                           ;eusart2.c: 238: EUSART2_RxDefaultInterruptHandler = handler;
 13841                           
 13842                           ;incstack = 0
 13843  0031A6  C019  F0F8         	movff	EUSART2_SetRxInterruptHandler@handler,_EUSART2_RxDefaultInterruptHandler
 13844  0031AA  C01A  F0F9         	movff	EUSART2_SetRxInterruptHandler@handler+1,_EUSART2_RxDefaultInterruptHandler+1
 13845  0031AE  0012               	return		;funcret
 13846  0031B0                     __end_of_EUSART2_SetRxInterruptHandler:
 13847                           	opt stack 0
 13848                           tosu	equ	0xFFF
 13849                           tosh	equ	0xFFE
 13850                           tosl	equ	0xFFD
 13851                           pclath	equ	0xFFA
 13852                           tblptru	equ	0xFF8
 13853                           tblptrh	equ	0xFF7
 13854                           tblptrl	equ	0xFF6
 13855                           tablat	equ	0xFF5
 13856                           prodh	equ	0xFF4
 13857                           prodl	equ	0xFF3
 13858                           intcon	equ	0xFF2
 13859                           intcon2	equ	0xFF1
 13860                           postinc0	equ	0xFEE
 13861                           wreg	equ	0xFE8
 13862                           indf1	equ	0xFE7
 13863                           postdec1	equ	0xFE5
 13864                           plusw1	equ	0xFE3
 13865                           fsr1h	equ	0xFE2
 13866                           fsr1l	equ	0xFE1
 13867                           indf2	equ	0xFDF
 13868                           postinc2	equ	0xFDE
 13869                           postdec2	equ	0xFDD
 13870                           plusw2	equ	0xFDB
 13871                           fsr2h	equ	0xFDA
 13872                           fsr2l	equ	0xFD9
 13873                           status	equ	0xFD8
 13874                           
 13875 ;; *************** function _EUSART1_Initialize *****************
 13876 ;; Defined at:
 13877 ;;		line 54 in file "mcc_generated_files/eusart1.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;		None
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;		None
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      void 
 13884 ;; Registers used:
 13885 ;;		wreg, status,2
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13891 ;;      Params:         0       0       0       0       0       0       0
 13892 ;;      Locals:         0       0       0       0       0       0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0
 13894 ;;      Totals:         0       0       0       0       0       0       0
 13895 ;;Total ram usage:        0 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    5
 13898 ;; This function calls:
 13899 ;;		Nothing
 13900 ;; This function is called by:
 13901 ;;		_SYSTEM_Initialize
 13902 ;;		_main
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           	psect	text76
 13907  002DDE                     __ptext76:
 13908                           	opt stack 0
 13909  002DDE                     _EUSART1_Initialize:
 13910                           	opt stack 24
 13911                           
 13912                           ;eusart1.c: 57: PIE1bits.RC1IE = 0;
 13913                           
 13914                           ;incstack = 0
 13915  002DDE  9A9D               	bcf	3997,5,c	;volatile
 13916                           
 13917                           ;eusart1.c: 58: PIE1bits.TX1IE = 0;
 13918  002DE0  989D               	bcf	3997,4,c	;volatile
 13919                           
 13920                           ;eusart1.c: 62: BAUDCON1 = 0x08;
 13921  002DE2  0E08               	movlw	8
 13922  002DE4  6EB8               	movwf	4024,c	;volatile
 13923                           
 13924                           ;eusart1.c: 65: RCSTA1 = 0x90;
 13925  002DE6  0E90               	movlw	144
 13926  002DE8  6EAB               	movwf	4011,c	;volatile
 13927                           
 13928                           ;eusart1.c: 68: TXSTA1 = 0x24;
 13929  002DEA  0E24               	movlw	36
 13930  002DEC  6EAC               	movwf	4012,c	;volatile
 13931                           
 13932                           ;eusart1.c: 71: SPBRG1 = 0xA0;
 13933  002DEE  0EA0               	movlw	160
 13934  002DF0  6EAF               	movwf	4015,c	;volatile
 13935                           
 13936                           ;eusart1.c: 74: SPBRGH1 = 0x01;
 13937  002DF2  0E01               	movlw	1
 13938  002DF4  6EB0               	movwf	4016,c	;volatile
 13939                           
 13940                           ;eusart1.c: 78: eusart1TxHead = 0;
 13941  002DF6  0E00               	movlw	0
 13942  002DF8  6E39               	movwf	_eusart1TxHead,c	;volatile
 13943                           
 13944                           ;eusart1.c: 79: eusart1TxTail = 0;
 13945  002DFA  0E00               	movlw	0
 13946  002DFC  6E38               	movwf	_eusart1TxTail,c	;volatile
 13947                           
 13948                           ;eusart1.c: 80: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 13949  002DFE  0E10               	movlw	16
 13950  002E00  6E45               	movwf	_eusart1TxBufferRemaining,c	;volatile
 13951                           
 13952                           ;eusart1.c: 82: eusart1RxHead = 0;
 13953  002E02  0E00               	movlw	0
 13954  002E04  6E37               	movwf	_eusart1RxHead,c	;volatile
 13955                           
 13956                           ;eusart1.c: 83: eusart1RxTail = 0;
 13957  002E06  0E00               	movlw	0
 13958  002E08  6E36               	movwf	_eusart1RxTail,c	;volatile
 13959                           
 13960                           ;eusart1.c: 84: eusart1RxCount = 0;
 13961  002E0A  0E00               	movlw	0
 13962  002E0C  6E35               	movwf	_eusart1RxCount,c	;volatile
 13963                           
 13964                           ;eusart1.c: 87: PIE1bits.RC1IE = 1;
 13965  002E0E  8A9D               	bsf	3997,5,c	;volatile
 13966  002E10  0012               	return		;funcret
 13967  002E12                     __end_of_EUSART1_Initialize:
 13968                           	opt stack 0
 13969                           tosu	equ	0xFFF
 13970                           tosh	equ	0xFFE
 13971                           tosl	equ	0xFFD
 13972                           pclath	equ	0xFFA
 13973                           tblptru	equ	0xFF8
 13974                           tblptrh	equ	0xFF7
 13975                           tblptrl	equ	0xFF6
 13976                           tablat	equ	0xFF5
 13977                           prodh	equ	0xFF4
 13978                           prodl	equ	0xFF3
 13979                           intcon	equ	0xFF2
 13980                           intcon2	equ	0xFF1
 13981                           postinc0	equ	0xFEE
 13982                           wreg	equ	0xFE8
 13983                           indf1	equ	0xFE7
 13984                           postdec1	equ	0xFE5
 13985                           plusw1	equ	0xFE3
 13986                           fsr1h	equ	0xFE2
 13987                           fsr1l	equ	0xFE1
 13988                           indf2	equ	0xFDF
 13989                           postinc2	equ	0xFDE
 13990                           postdec2	equ	0xFDD
 13991                           plusw2	equ	0xFDB
 13992                           fsr2h	equ	0xFDA
 13993                           fsr2l	equ	0xFD9
 13994                           status	equ	0xFD8
 13995                           
 13996 ;; *************** function _SRAM_CONTROL_INITIALIZE *****************
 13997 ;; Defined at:
 13998 ;;		line 9 in file "sram_control.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;		None
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;		None
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  1    wreg      void 
 14005 ;; Registers used:
 14006 ;;		wreg, status,2
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14012 ;;      Params:         0       0       0       0       0       0       0
 14013 ;;      Locals:         0       0       0       0       0       0       0
 14014 ;;      Temps:          0       0       0       0       0       0       0
 14015 ;;      Totals:         0       0       0       0       0       0       0
 14016 ;;Total ram usage:        0 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    5
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		_main
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           	psect	text77
 14027  003040                     __ptext77:
 14028                           	opt stack 0
 14029  003040                     _SRAM_CONTROL_INITIALIZE:
 14030                           	opt stack 25
 14031                           
 14032                           ;sram_control.c: 12: ANSELA = 0x00;
 14033                           
 14034                           ;incstack = 0
 14035  003040  0E00               	movlw	0
 14036  003042  010F               	movlb	15	; () banked
 14037  003044  6F38               	movwf	56,b	;volatile
 14038                           
 14039                           ;sram_control.c: 13: ANSELB = 0x00;
 14040  003046  0E00               	movlw	0
 14041  003048  6F39               	movwf	57,b	;volatile
 14042                           
 14043                           ;sram_control.c: 16: TRISB = 0x80;
 14044  00304A  0E80               	movlw	128
 14045  00304C  6E93               	movwf	3987,c	;volatile
 14046                           
 14047                           ; BSR set to: 15
 14048                           ;sram_control.c: 19: TRISA = 0xFF;
 14049  00304E  6892               	setf	3986,c	;volatile
 14050                           
 14051                           ; BSR set to: 15
 14052                           ;sram_control.c: 22: PORTBbits.RB5 = 1;
 14053  003050  8A81               	bsf	3969,5,c	;volatile
 14054                           
 14055                           ; BSR set to: 15
 14056                           ;sram_control.c: 23: PORTBbits.RB6 = 1;
 14057  003052  8C81               	bsf	3969,6,c	;volatile
 14058                           
 14059                           ; BSR set to: 15
 14060  003054  0012               	return		;funcret
 14061  003056                     __end_of_SRAM_CONTROL_INITIALIZE:
 14062                           	opt stack 0
 14063                           tosu	equ	0xFFF
 14064                           tosh	equ	0xFFE
 14065                           tosl	equ	0xFFD
 14066                           pclath	equ	0xFFA
 14067                           tblptru	equ	0xFF8
 14068                           tblptrh	equ	0xFF7
 14069                           tblptrl	equ	0xFF6
 14070                           tablat	equ	0xFF5
 14071                           prodh	equ	0xFF4
 14072                           prodl	equ	0xFF3
 14073                           intcon	equ	0xFF2
 14074                           intcon2	equ	0xFF1
 14075                           postinc0	equ	0xFEE
 14076                           wreg	equ	0xFE8
 14077                           indf1	equ	0xFE7
 14078                           postdec1	equ	0xFE5
 14079                           plusw1	equ	0xFE3
 14080                           fsr1h	equ	0xFE2
 14081                           fsr1l	equ	0xFE1
 14082                           indf2	equ	0xFDF
 14083                           postinc2	equ	0xFDE
 14084                           postdec2	equ	0xFDD
 14085                           plusw2	equ	0xFDB
 14086                           fsr2h	equ	0xFDA
 14087                           fsr2l	equ	0xFD9
 14088                           status	equ	0xFD8
 14089                           
 14090 ;; *************** function _INTERRUPT_InterruptManager *****************
 14091 ;; Defined at:
 14092 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14093 ;; Parameters:    Size  Location     Type
 14094 ;;		None
 14095 ;; Auto vars:     Size  Location     Type
 14096 ;;		None
 14097 ;; Return value:  Size  Location     Type
 14098 ;;                  1    wreg      void 
 14099 ;; Registers used:
 14100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14101 ;; Tracked objects:
 14102 ;;		On entry : 0/0
 14103 ;;		On exit  : 0/0
 14104 ;;		Unchanged: 0/0
 14105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14106 ;;      Params:         0       0       0       0       0       0       0
 14107 ;;      Locals:         0       0       0       0       0       0       0
 14108 ;;      Temps:         18       0       0       0       0       0       0
 14109 ;;      Totals:        18       0       0       0       0       0       0
 14110 ;;Total ram usage:       18 bytes
 14111 ;; Hardware stack levels used:    1
 14112 ;; Hardware stack levels required when called:    4
 14113 ;; This function calls:
 14114 ;;		Absolute function
 14115 ;;		_EUSART1_Receive_ISR
 14116 ;;		_EUSART1_Transmit_ISR
 14117 ;;		_EUSART2_Receive_ISR
 14118 ;;		_EUSART2_Transmit_ISR
 14119 ;;		_i2c_busCollisionISR
 14120 ;;		i2_i2c_ISR
 14121 ;; This function is called by:
 14122 ;;		Interrupt level 2
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	intcode
 14127  000008                     __pintcode:
 14128                           	opt stack 0
 14129  000008                     _INTERRUPT_InterruptManager:
 14130                           	opt stack 18
 14131                           
 14132                           ; BSR set to: 15
 14133                           ;incstack = 0
 14134  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14135  00000A  CFFA F007          	movff	pclath,??_INTERRUPT_InterruptManager
 14136  00000E  CFFB F008          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14137  000012  CFE9 F009          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14138  000016  CFEA F00A          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14139  00001A  CFE1 F00B          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14140  00001E  CFE2 F00C          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14141  000022  CFD9 F00D          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14142  000026  CFDA F00E          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14143  00002A  CFF3 F00F          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14144  00002E  CFF4 F010          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14145  000032  CFF6 F011          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14146  000036  CFF7 F012          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14147  00003A  CFF8 F013          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14148  00003E  CFF5 F014          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14149  000042  C047  F015         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14150  000046  C048  F016         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14151  00004A  C049  F017         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14152  00004E  C04A  F018         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 14153                           
 14154                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
 14155  000052  ACF2               	btfss	intcon,6,c	;volatile
 14156  000054  D03C               	goto	i2l401
 14157                           
 14158                           ;interrupt_manager.c: 61: {
 14159                           ;interrupt_manager.c: 62: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 14160  000056  B8A3               	btfsc	4003,4,c	;volatile
 14161  000058  A8A4               	btfss	4004,4,c	;volatile
 14162  00005A  D008               	goto	i2l391
 14163                           
 14164                           ;interrupt_manager.c: 63: {
 14165                           ;interrupt_manager.c: 64: EUSART2_TxDefaultInterruptHandler();
 14166  00005C  D801               	call	i2u739_48
 14167  00005E  D037               	goto	i2l401
 14168  000060                     i2u739_48:
 14169  000060  0005               	push	
 14170  000062  6EFA               	movwf	pclath,c
 14171  000064  5043               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 14172  000066  6EFD               	movwf	tosl,c
 14173  000068  5044               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 14174  00006A  D021               	goto	L11
 14175  00006C                     i2l391:
 14176                           
 14177                           ;interrupt_manager.c: 66: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 14178  00006C  BAA3               	btfsc	4003,5,c	;volatile
 14179  00006E  AAA4               	btfss	4004,5,c	;volatile
 14180  000070  D009               	goto	i2l393
 14181                           
 14182                           ;interrupt_manager.c: 67: {
 14183                           ;interrupt_manager.c: 68: EUSART2_RxDefaultInterruptHandler();
 14184  000072  D801               	call	i2u742_48
 14185  000074  D02C               	goto	i2l401
 14186  000076                     i2u742_48:
 14187  000076  0005               	push	
 14188  000078  0100               	movlb	0	; () banked
 14189  00007A  6EFA               	movwf	pclath,c
 14190  00007C  51F8               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
 14191  00007E  6EFD               	movwf	tosl,c
 14192  000080  51F9               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
 14193  000082  D015               	goto	L11
 14194  000084                     i2l393:
 14195                           
 14196                           ;interrupt_manager.c: 70: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 14197  000084  B6A0               	btfsc	4000,3,c	;volatile
 14198  000086  A6A1               	btfss	4001,3,c	;volatile
 14199  000088  D008               	goto	i2l395
 14200                           
 14201                           ;interrupt_manager.c: 71: {
 14202                           ;interrupt_manager.c: 72: i2c1_driver_busCollisionISR();
 14203  00008A  D801               	call	i2u745_48
 14204  00008C  D020               	goto	i2l401
 14205  00008E                     i2u745_48:
 14206  00008E  0005               	push	
 14207  000090  6EFA               	movwf	pclath,c
 14208  000092  5032               	movf	_i2c1_driver_busCollisionISR,w,c
 14209  000094  6EFD               	movwf	tosl,c
 14210  000096  5033               	movf	_i2c1_driver_busCollisionISR+1,w,c
 14211  000098  D00A               	goto	L11
 14212  00009A                     i2l395:
 14213                           
 14214                           ;interrupt_manager.c: 74: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 14215  00009A  B69D               	btfsc	3997,3,c	;volatile
 14216  00009C  A69E               	btfss	3998,3,c	;volatile
 14217  00009E  D00C               	goto	i2l397
 14218                           
 14219                           ;interrupt_manager.c: 75: {
 14220                           ;interrupt_manager.c: 76: i2c1_driver_i2cISR();
 14221  0000A0  D801               	call	i2u748_48
 14222  0000A2  D015               	goto	i2l401
 14223  0000A4                     i2u748_48:
 14224  0000A4  0005               	push	
 14225  0000A6  6EFA               	movwf	pclath,c
 14226  0000A8  5030               	movf	_i2c1_driver_i2cISR,w,c
 14227  0000AA  6EFD               	movwf	tosl,c
 14228  0000AC  5031               	movf	_i2c1_driver_i2cISR+1,w,c
 14229  0000AE                     L11:
 14230  0000AE  6EFE               	movwf	tosh,c
 14231  0000B0  50F8               	movf	tblptru,w,c
 14232  0000B2  6EFF               	movwf	tosu,c
 14233  0000B4  50FA               	movf	pclath,w,c
 14234  0000B6  0012               	return		;indir
 14235  0000B8                     i2l397:
 14236                           
 14237                           ;interrupt_manager.c: 78: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 14238  0000B8  B89D               	btfsc	3997,4,c	;volatile
 14239  0000BA  A89E               	btfss	3998,4,c	;volatile
 14240  0000BC  D003               	goto	i2l399
 14241                           
 14242                           ;interrupt_manager.c: 79: {
 14243                           ;interrupt_manager.c: 80: EUSART1_Transmit_ISR();
 14244  0000BE  EC39  F017         	call	_EUSART1_Transmit_ISR	;wreg free
 14245                           
 14246                           ;interrupt_manager.c: 81: }
 14247  0000C2  D005               	goto	i2l401
 14248  0000C4                     i2l399:
 14249                           
 14250                           ;interrupt_manager.c: 82: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 14251  0000C4  BA9D               	btfsc	3997,5,c	;volatile
 14252  0000C6  AA9E               	btfss	3998,5,c	;volatile
 14253  0000C8  D002               	goto	i2l401
 14254                           
 14255                           ;interrupt_manager.c: 83: {
 14256                           ;interrupt_manager.c: 84: EUSART1_Receive_ISR();
 14257  0000CA  ECB0  F015         	call	_EUSART1_Receive_ISR	;wreg free
 14258  0000CE                     i2l401:
 14259                           
 14260                           ;interrupt_manager.c: 91: else
 14261                           ;interrupt_manager.c: 92: {
 14262                           
 14263                           ;interrupt_manager.c: 89: }
 14264                           ;interrupt_manager.c: 90: }
 14265                           
 14266                           ;interrupt_manager.c: 86: else
 14267                           ;interrupt_manager.c: 87: {
 14268  0000CE  C018  F04A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 14269  0000D2  C017  F049         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 14270  0000D6  C016  F048         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 14271  0000DA  C015  F047         	movff	??_INTERRUPT_InterruptManager+14,btemp
 14272  0000DE  C014  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14273  0000E2  C013  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14274  0000E6  C012  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14275  0000EA  C011  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14276  0000EE  C010  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14277  0000F2  C00F  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14278  0000F6  C00E  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14279  0000FA  C00D  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14280  0000FE  C00C  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14281  000102  C00B  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14282  000106  C00A  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14283  00010A  C009  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14284  00010E  C008  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14285  000112  C007  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14286  000116  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14287  000118  0011               	retfie		f
 14288  00011A                     __end_of_INTERRUPT_InterruptManager:
 14289                           	opt stack 0
 14290                           tosu	equ	0xFFF
 14291                           tosh	equ	0xFFE
 14292                           tosl	equ	0xFFD
 14293                           pclatu	equ	0xFFB
 14294                           pclath	equ	0xFFA
 14295                           tblptru	equ	0xFF8
 14296                           tblptrh	equ	0xFF7
 14297                           tblptrl	equ	0xFF6
 14298                           tablat	equ	0xFF5
 14299                           prodh	equ	0xFF4
 14300                           prodl	equ	0xFF3
 14301                           intcon	equ	0xFF2
 14302                           intcon2	equ	0xFF1
 14303                           postinc0	equ	0xFEE
 14304                           fsr0h	equ	0xFEA
 14305                           fsr0l	equ	0xFE9
 14306                           wreg	equ	0xFE8
 14307                           indf1	equ	0xFE7
 14308                           postdec1	equ	0xFE5
 14309                           plusw1	equ	0xFE3
 14310                           fsr1h	equ	0xFE2
 14311                           fsr1l	equ	0xFE1
 14312                           indf2	equ	0xFDF
 14313                           postinc2	equ	0xFDE
 14314                           postdec2	equ	0xFDD
 14315                           plusw2	equ	0xFDB
 14316                           fsr2h	equ	0xFDA
 14317                           fsr2l	equ	0xFD9
 14318                           status	equ	0xFD8
 14319                           
 14320 ;; *************** function i2_i2c_ISR *****************
 14321 ;; Defined at:
 14322 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;		None
 14325 ;; Auto vars:     Size  Location     Type
 14326 ;;		None
 14327 ;; Return value:  Size  Location     Type
 14328 ;;                  1    wreg      void 
 14329 ;; Registers used:
 14330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14331 ;; Tracked objects:
 14332 ;;		On entry : 0/0
 14333 ;;		On exit  : 0/0
 14334 ;;		Unchanged: 0/0
 14335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14336 ;;      Params:         0       0       0       0       0       0       0
 14337 ;;      Locals:         0       0       0       0       0       0       0
 14338 ;;      Temps:          0       0       0       0       0       0       0
 14339 ;;      Totals:         0       0       0       0       0       0       0
 14340 ;;Total ram usage:        0 bytes
 14341 ;; Hardware stack levels used:    1
 14342 ;; Hardware stack levels required when called:    3
 14343 ;; This function calls:
 14344 ;;		i2_do_I2C_DO_ACK
 14345 ;;		i2_do_I2C_DO_ADDRESS_NACK
 14346 ;;		i2_do_I2C_DO_NACK_RESTART
 14347 ;;		i2_do_I2C_DO_NACK_STOP
 14348 ;;		i2_do_I2C_IDLE
 14349 ;;		i2_do_I2C_RCEN
 14350 ;;		i2_do_I2C_RESET
 14351 ;;		i2_do_I2C_RX
 14352 ;;		i2_do_I2C_SEND_ADR_READ
 14353 ;;		i2_do_I2C_SEND_ADR_WRITE
 14354 ;;		i2_do_I2C_SEND_RESTART
 14355 ;;		i2_do_I2C_SEND_RESTART_READ
 14356 ;;		i2_do_I2C_SEND_RESTART_WRITE
 14357 ;;		i2_do_I2C_SEND_STOP
 14358 ;;		i2_do_I2C_TX
 14359 ;;		i2_do_I2C_TX_EMPTY
 14360 ;;		i2_i2c1_driver_isNACK
 14361 ;;		i2_mssp1_clearIRQ
 14362 ;; This function is called by:
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           	psect	text79
 14367  002C9A                     __ptext79:
 14368                           	opt stack 0
 14369  002C9A                     i2_i2c_ISR:
 14370                           	opt stack 18
 14371                           
 14372                           ;i2c_master.c: 421: mssp1_clearIRQ();
 14373                           
 14374                           ;incstack = 0
 14375  002C9A  EC1F  F019         	call	i2_mssp1_clearIRQ	;wreg free
 14376                           
 14377                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 14378  002C9E  0100               	movlb	0	; () banked
 14379  002CA0  A7B4               	btfss	_i2c_status& (0+255),3,b
 14380  002CA2  D007               	goto	i2l263
 14381                           
 14382                           ; BSR set to: 0
 14383  002CA4  EC2B  F018         	call	i2_i2c1_driver_isNACK	;wreg free
 14384  002CA8  A0D8               	btfss	status,0,c
 14385  002CAA  D003               	goto	i2l263
 14386                           
 14387                           ;i2c_master.c: 428: {
 14388                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 14389  002CAC  0E0F               	movlw	15
 14390  002CAE  0100               	movlb	0	; () banked
 14391  002CB0  6FBE               	movwf	(_i2c_status+10)& (0+255),b
 14392  002CB2                     i2l263:
 14393                           
 14394                           ;i2c_master.c: 430: }
 14395                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 14396                           
 14397                           ; BSR set to: 0
 14398  002CB2  0100               	movlb	0	; () banked
 14399  002CB4  51BE               	movf	(_i2c_status+10)& (0+255),w,b
 14400  002CB6  0D02               	mullw	2
 14401  002CB8  0E32               	movlw	low _fsmStateTable
 14402  002CBA  24F3               	addwf	prodl,w,c
 14403  002CBC  6ED9               	movwf	fsr2l,c
 14404  002CBE  0E01               	movlw	high _fsmStateTable
 14405  002CC0  20F4               	addwfc	prodh,w,c
 14406  002CC2  6EDA               	movwf	fsr2h,c
 14407  002CC4  D801               	call	i2u733_48
 14408  002CC6  D00A               	goto	i2u733_49
 14409  002CC8                     i2u733_48:
 14410  002CC8  0005               	push	
 14411  002CCA  6EFA               	movwf	pclath,c
 14412  002CCC  50DE               	movf	postinc2,w,c
 14413  002CCE  6EFD               	movwf	tosl,c
 14414  002CD0  50DE               	movf	postinc2,w,c
 14415  002CD2  6EFE               	movwf	tosh,c
 14416  002CD4  50F8               	movf	tblptru,w,c
 14417  002CD6  6EFF               	movwf	tosu,c
 14418  002CD8  50FA               	movf	pclath,w,c
 14419  002CDA  0012               	return		;indir
 14420  002CDC                     i2u733_49:
 14421  002CDC  0100               	movlb	0	; () banked
 14422  002CDE  6FBE               	movwf	(_i2c_status+10)& (0+255),b
 14423                           
 14424                           ; BSR set to: 0
 14425  002CE0  0012               	return		;funcret
 14426  002CE2                     __end_ofi2_i2c_ISR:
 14427                           	opt stack 0
 14428                           tosu	equ	0xFFF
 14429                           tosh	equ	0xFFE
 14430                           tosl	equ	0xFFD
 14431                           pclatu	equ	0xFFB
 14432                           pclath	equ	0xFFA
 14433                           tblptru	equ	0xFF8
 14434                           tblptrh	equ	0xFF7
 14435                           tblptrl	equ	0xFF6
 14436                           tablat	equ	0xFF5
 14437                           prodh	equ	0xFF4
 14438                           prodl	equ	0xFF3
 14439                           intcon	equ	0xFF2
 14440                           intcon2	equ	0xFF1
 14441                           postinc0	equ	0xFEE
 14442                           fsr0h	equ	0xFEA
 14443                           fsr0l	equ	0xFE9
 14444                           wreg	equ	0xFE8
 14445                           indf1	equ	0xFE7
 14446                           postdec1	equ	0xFE5
 14447                           plusw1	equ	0xFE3
 14448                           fsr1h	equ	0xFE2
 14449                           fsr1l	equ	0xFE1
 14450                           indf2	equ	0xFDF
 14451                           postinc2	equ	0xFDE
 14452                           postdec2	equ	0xFDD
 14453                           plusw2	equ	0xFDB
 14454                           fsr2h	equ	0xFDA
 14455                           fsr2l	equ	0xFD9
 14456                           status	equ	0xFD8
 14457                           
 14458 ;; *************** function i2_mssp1_clearIRQ *****************
 14459 ;; Defined at:
 14460 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14461 ;; Parameters:    Size  Location     Type
 14462 ;;		None
 14463 ;; Auto vars:     Size  Location     Type
 14464 ;;		None
 14465 ;; Return value:  Size  Location     Type
 14466 ;;                  1    wreg      void 
 14467 ;; Registers used:
 14468 ;;		None
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14474 ;;      Params:         0       0       0       0       0       0       0
 14475 ;;      Locals:         0       0       0       0       0       0       0
 14476 ;;      Temps:          0       0       0       0       0       0       0
 14477 ;;      Totals:         0       0       0       0       0       0       0
 14478 ;;Total ram usage:        0 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; This function calls:
 14481 ;;		Nothing
 14482 ;; This function is called by:
 14483 ;;		i2_i2c_ISR
 14484 ;; This function uses a non-reentrant model
 14485 ;;
 14486                           
 14487                           	psect	text80
 14488  00323E                     __ptext80:
 14489                           	opt stack 0
 14490  00323E                     i2_mssp1_clearIRQ:
 14491                           	opt stack 20
 14492                           
 14493                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;incstack = 0
 14497  00323E  969E               	bcf	3998,3,c	;volatile
 14498  003240  0012               	return		;funcret
 14499  003242                     __end_ofi2_mssp1_clearIRQ:
 14500                           	opt stack 0
 14501                           tosu	equ	0xFFF
 14502                           tosh	equ	0xFFE
 14503                           tosl	equ	0xFFD
 14504                           pclatu	equ	0xFFB
 14505                           pclath	equ	0xFFA
 14506                           tblptru	equ	0xFF8
 14507                           tblptrh	equ	0xFF7
 14508                           tblptrl	equ	0xFF6
 14509                           tablat	equ	0xFF5
 14510                           prodh	equ	0xFF4
 14511                           prodl	equ	0xFF3
 14512                           intcon	equ	0xFF2
 14513                           intcon2	equ	0xFF1
 14514                           postinc0	equ	0xFEE
 14515                           fsr0h	equ	0xFEA
 14516                           fsr0l	equ	0xFE9
 14517                           wreg	equ	0xFE8
 14518                           indf1	equ	0xFE7
 14519                           postdec1	equ	0xFE5
 14520                           plusw1	equ	0xFE3
 14521                           fsr1h	equ	0xFE2
 14522                           fsr1l	equ	0xFE1
 14523                           indf2	equ	0xFDF
 14524                           postinc2	equ	0xFDE
 14525                           postdec2	equ	0xFDD
 14526                           plusw2	equ	0xFDB
 14527                           fsr2h	equ	0xFDA
 14528                           fsr2l	equ	0xFD9
 14529                           status	equ	0xFD8
 14530                           
 14531 ;; *************** function i2_do_I2C_RX *****************
 14532 ;; Defined at:
 14533 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14534 ;; Parameters:    Size  Location     Type
 14535 ;;		None
 14536 ;; Auto vars:     Size  Location     Type
 14537 ;;		None
 14538 ;; Return value:  Size  Location     Type
 14539 ;;                  1    wreg      enum E7008
 14540 ;; Registers used:
 14541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14547 ;;      Params:         0       0       0       0       0       0       0
 14548 ;;      Locals:         0       0       0       0       0       0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0
 14550 ;;      Totals:         0       0       0       0       0       0       0
 14551 ;;Total ram usage:        0 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    2
 14554 ;; This function calls:
 14555 ;;		i2_do_I2C_DO_NACK_RESTART
 14556 ;;		i2_do_I2C_DO_NACK_STOP
 14557 ;;		i2_i2c1_driver_getRXData
 14558 ;;		i2_i2c1_driver_sendACK
 14559 ;;		i2_returnReset
 14560 ;;		i2_returnStop
 14561 ;; This function is called by:
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           	psect	text81
 14566  00273C                     __ptext81:
 14567                           	opt stack 0
 14568  00273C                     i2_do_I2C_RX:
 14569                           	opt stack 18
 14570                           
 14571                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 14572                           
 14573                           ;incstack = 0
 14574  00273C  EC23  F019         	call	i2_i2c1_driver_getRXData	;wreg free
 14575  002740  C0B6  FFD9         	movff	_i2c_status+2,fsr2l
 14576  002744  C0B7  FFDA         	movff	_i2c_status+3,fsr2h
 14577  002748  6EDF               	movwf	indf2,c
 14578  00274A  0100               	movlb	0	; () banked
 14579  00274C  4BB6               	infsnz	(_i2c_status+2)& (0+255),f,b
 14580  00274E  2BB7               	incf	(_i2c_status+3)& (0+255),f,b
 14581                           
 14582                           ; BSR set to: 0
 14583                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 14584  002750  07B8               	decf	(_i2c_status+4)& (0+255),f,b
 14585  002752  A0D8               	btfss	status,0,c
 14586  002754  07B9               	decf	(_i2c_status+5)& (0+255),f,b
 14587  002756  51B8               	movf	(_i2c_status+4)& (0+255),w,b
 14588  002758  11B9               	iorwf	(_i2c_status+5)& (0+255),w,b
 14589  00275A  B4D8               	btfsc	status,2,c
 14590  00275C  D004               	goto	i2l239
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;i2c_master.c: 361: {
 14594                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 14595  00275E  EC09  F019         	call	i2_i2c1_driver_sendACK	;wreg free
 14596                           
 14597                           ;i2c_master.c: 363: return I2C_RCEN;
 14598  002762  0E05               	movlw	5
 14599                           
 14600                           ;i2c_master.c: 364: }
 14601  002764  0012               	return	
 14602  002766                     i2l239:
 14603                           
 14604                           ; BSR set to: 0
 14605                           ;i2c_master.c: 365: else
 14606                           ;i2c_master.c: 366: {
 14607                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 14608  002766  85B4               	bsf	_i2c_status& (0+255),2,b
 14609                           
 14610                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 14611  002768  D006               	goto	i2l242
 14612  00276A                     
 14613                           ;i2c_master.c: 371: case i2c_restart_read:
 14614                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 14615                           
 14616                           ; BSR set to: 0
 14617                           
 14618                           ; BSR set to: 0
 14619  00276A  ECE0  F018         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
 14620  00276E  0012               	return	
 14621  002770                     
 14622                           ;i2c_master.c: 375: case i2c_stop:
 14623                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 14624                           
 14625                           ;i2c_master.c: 374: case i2c_continue:
 14626  002770  ECE4  F018         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
 14627                           
 14628                           ;i2c_master.c: 377: }
 14629  002774  0012               	return	
 14630  002776                     i2l242:
 14631  002776  C0CC  F001         	movff	_i2c_status+24,i2returnReset@p
 14632  00277A  C0CD  F002         	movff	_i2c_status+25,i2returnReset@p+1
 14633  00277E  EE20  F0C0         	lfsr	2,_i2c_status+12
 14634  002782  D801               	call	i2u652_48
 14635  002784  D00A               	goto	i2u652_49
 14636  002786                     i2u652_48:
 14637  002786  0005               	push	
 14638  002788  6EFA               	movwf	pclath,c
 14639  00278A  50DE               	movf	postinc2,w,c
 14640  00278C  6EFD               	movwf	tosl,c
 14641  00278E  50DE               	movf	postinc2,w,c
 14642  002790  6EFE               	movwf	tosh,c
 14643  002792  50F8               	movf	tblptru,w,c
 14644  002794  6EFF               	movwf	tosu,c
 14645  002796  50FA               	movf	pclath,w,c
 14646  002798  0012               	return		;indir
 14647  00279A                     i2u652_49:
 14648                           
 14649                           ; Switch size 1, requested type "space"
 14650                           ; Number of cases is 4, Range of values is 1 to 4
 14651                           ; switch strategies available:
 14652                           ; Name         Instructions Cycles
 14653                           ; simple_byte           13     7 (average)
 14654                           ;	Chosen strategy is simple_byte
 14655  00279A  0A01               	xorlw	1	; case 1
 14656  00279C  B4D8               	btfsc	status,2,c
 14657  00279E  D7E8               	goto	i2l245
 14658  0027A0  0A03               	xorlw	3	; case 2
 14659  0027A2  B4D8               	btfsc	status,2,c
 14660  0027A4  D7E2               	goto	i2l243
 14661  0027A6  0A01               	xorlw	1	; case 3
 14662  0027A8  B4D8               	btfsc	status,2,c
 14663  0027AA  D7DF               	goto	i2l243
 14664  0027AC  0A07               	xorlw	7	; case 4
 14665  0027AE  D7E0               	goto	i2l245
 14666  0027B0                     __end_ofi2_do_I2C_RX:
 14667                           	opt stack 0
 14668                           tosu	equ	0xFFF
 14669                           tosh	equ	0xFFE
 14670                           tosl	equ	0xFFD
 14671                           pclatu	equ	0xFFB
 14672                           pclath	equ	0xFFA
 14673                           tblptru	equ	0xFF8
 14674                           tblptrh	equ	0xFF7
 14675                           tblptrl	equ	0xFF6
 14676                           tablat	equ	0xFF5
 14677                           prodh	equ	0xFF4
 14678                           prodl	equ	0xFF3
 14679                           intcon	equ	0xFF2
 14680                           intcon2	equ	0xFF1
 14681                           postinc0	equ	0xFEE
 14682                           fsr0h	equ	0xFEA
 14683                           fsr0l	equ	0xFE9
 14684                           wreg	equ	0xFE8
 14685                           indf1	equ	0xFE7
 14686                           postdec1	equ	0xFE5
 14687                           plusw1	equ	0xFE3
 14688                           fsr1h	equ	0xFE2
 14689                           fsr1l	equ	0xFE1
 14690                           indf2	equ	0xFDF
 14691                           postinc2	equ	0xFDE
 14692                           postdec2	equ	0xFDD
 14693                           plusw2	equ	0xFDB
 14694                           fsr2h	equ	0xFDA
 14695                           fsr2l	equ	0xFD9
 14696                           status	equ	0xFD8
 14697                           
 14698 ;; *************** function i2_do_I2C_TX *****************
 14699 ;; Defined at:
 14700 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14701 ;; Parameters:    Size  Location     Type
 14702 ;;		None
 14703 ;; Auto vars:     Size  Location     Type
 14704 ;;		None
 14705 ;; Return value:  Size  Location     Type
 14706 ;;                  1    wreg      enum E7008
 14707 ;; Registers used:
 14708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 14709 ;; Tracked objects:
 14710 ;;		On entry : 0/0
 14711 ;;		On exit  : 0/0
 14712 ;;		Unchanged: 0/0
 14713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14714 ;;      Params:         0       0       0       0       0       0       0
 14715 ;;      Locals:         2       0       0       0       0       0       0
 14716 ;;      Temps:          0       0       0       0       0       0       0
 14717 ;;      Totals:         2       0       0       0       0       0       0
 14718 ;;Total ram usage:        2 bytes
 14719 ;; Hardware stack levels used:    1
 14720 ;; Hardware stack levels required when called:    2
 14721 ;; This function calls:
 14722 ;;		i2_do_I2C_SEND_RESTART_READ
 14723 ;;		i2_do_I2C_SEND_RESTART_WRITE
 14724 ;;		i2_do_I2C_SEND_STOP
 14725 ;;		i2_i2c1_driver_TXData
 14726 ;;		i2_i2c1_driver_isNACK
 14727 ;;		i2_returnReset
 14728 ;;		i2_returnStop
 14729 ;; This function is called by:
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           	psect	text82
 14734  00252C                     __ptext82:
 14735                           	opt stack 0
 14736  00252C                     i2_do_I2C_TX:
 14737                           	opt stack 18
 14738                           
 14739                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 14740                           
 14741                           ;incstack = 0
 14742  00252C  EC2B  F018         	call	i2_i2c1_driver_isNACK	;wreg free
 14743  002530  B0D8               	btfsc	status,0,c
 14744  002532  D00A               	goto	i2l224
 14745  002534  D026               	goto	i2l223
 14746  002536                     
 14747                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 14748  002536  ECF8  F018         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
 14749  00253A  0012               	return	
 14750  00253C                     
 14751                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 14752  00253C  ECF4  F018         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
 14753  002540  0012               	return	
 14754  002542                     
 14755                           ;i2c_master.c: 345: case i2c_stop:
 14756                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 14757                           
 14758                           ;i2c_master.c: 344: case i2c_continue:
 14759  002542  ECEC  F018         	call	i2_do_I2C_SEND_STOP	;wreg free
 14760                           
 14761                           ;i2c_master.c: 347: }
 14762  002546  0012               	return	
 14763  002548                     i2l224:
 14764  002548  C0D2  F001         	movff	_i2c_status+30,i2returnReset@p
 14765  00254C  C0D3  F002         	movff	_i2c_status+31,i2returnReset@p+1
 14766  002550  EE20  F0C6         	lfsr	2,_i2c_status+18
 14767  002554  D801               	call	i2u649_48
 14768  002556  D00A               	goto	i2u649_49
 14769  002558                     i2u649_48:
 14770  002558  0005               	push	
 14771  00255A  6EFA               	movwf	pclath,c
 14772  00255C  50DE               	movf	postinc2,w,c
 14773  00255E  6EFD               	movwf	tosl,c
 14774  002560  50DE               	movf	postinc2,w,c
 14775  002562  6EFE               	movwf	tosh,c
 14776  002564  50F8               	movf	tblptru,w,c
 14777  002566  6EFF               	movwf	tosu,c
 14778  002568  50FA               	movf	pclath,w,c
 14779  00256A  0012               	return		;indir
 14780  00256C                     i2u649_49:
 14781                           
 14782                           ; Switch size 1, requested type "space"
 14783                           ; Number of cases is 4, Range of values is 1 to 4
 14784                           ; switch strategies available:
 14785                           ; Name         Instructions Cycles
 14786                           ; simple_byte           13     7 (average)
 14787                           ;	Chosen strategy is simple_byte
 14788  00256C  0A01               	xorlw	1	; case 1
 14789  00256E  B4D8               	btfsc	status,2,c
 14790  002570  D7E8               	goto	i2l228
 14791  002572  0A03               	xorlw	3	; case 2
 14792  002574  B4D8               	btfsc	status,2,c
 14793  002576  D7DF               	goto	i2l225
 14794  002578  0A01               	xorlw	1	; case 3
 14795  00257A  B4D8               	btfsc	status,2,c
 14796  00257C  D7DF               	goto	i2l227
 14797  00257E  0A07               	xorlw	7	; case 4
 14798  002580  D7E0               	goto	i2l228
 14799  002582                     i2l223:
 14800                           
 14801                           ;i2c_master.c: 349: else
 14802                           ;i2c_master.c: 350: {
 14803                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 14804  002582  0100               	movlb	0	; () banked
 14805  002584  97B4               	bcf	_i2c_status& (0+255),3,b
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 14809  002586  C0B6  FFD9         	movff	_i2c_status+2,fsr2l
 14810  00258A  C0B7  FFDA         	movff	_i2c_status+3,fsr2h
 14811  00258E  4BB6               	infsnz	(_i2c_status+2)& (0+255),f,b
 14812  002590  2BB7               	incf	(_i2c_status+3)& (0+255),f,b
 14813  002592  50DF               	movf	indf2,w,c
 14814  002594  ECFC  F018         	call	i2_i2c1_driver_TXData
 14815                           
 14816                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 14817  002598  0100               	movlb	0	; () banked
 14818  00259A  07B8               	decf	(_i2c_status+4)& (0+255),f,b
 14819  00259C  A0D8               	btfss	status,0,c
 14820  00259E  07B9               	decf	(_i2c_status+5)& (0+255),f,b
 14821  0025A0  51B8               	movf	(_i2c_status+4)& (0+255),w,b
 14822  0025A2  11B9               	iorwf	(_i2c_status+5)& (0+255),w,b
 14823  0025A4  A4D8               	btfss	status,2,c
 14824  0025A6  D004               	goto	i2l234
 14825                           
 14826                           ; BSR set to: 0
 14827  0025A8  0E00               	movlw	0
 14828  0025AA  6E02               	movwf	i2_do_I2C_TX$362+1,c
 14829  0025AC  0E06               	movlw	6
 14830  0025AE  D003               	goto	L12
 14831  0025B0                     i2l234:
 14832                           
 14833                           ; BSR set to: 0
 14834                           
 14835                           ; BSR set to: 0
 14836  0025B0  0E00               	movlw	0
 14837  0025B2  6E02               	movwf	i2_do_I2C_TX$362+1,c
 14838  0025B4  0E03               	movlw	3
 14839  0025B6                     L12:
 14840  0025B6  6E01               	movwf	i2_do_I2C_TX$362,c
 14841                           
 14842                           ; BSR set to: 0
 14843  0025B8  5001               	movf	i2_do_I2C_TX$362,w,c
 14844                           
 14845                           ; BSR set to: 0
 14846  0025BA  0012               	return	
 14847  0025BC                     __end_ofi2_do_I2C_TX:
 14848                           	opt stack 0
 14849                           tosu	equ	0xFFF
 14850                           tosh	equ	0xFFE
 14851                           tosl	equ	0xFFD
 14852                           pclatu	equ	0xFFB
 14853                           pclath	equ	0xFFA
 14854                           tblptru	equ	0xFF8
 14855                           tblptrh	equ	0xFF7
 14856                           tblptrl	equ	0xFF6
 14857                           tablat	equ	0xFF5
 14858                           prodh	equ	0xFF4
 14859                           prodl	equ	0xFF3
 14860                           intcon	equ	0xFF2
 14861                           intcon2	equ	0xFF1
 14862                           postinc0	equ	0xFEE
 14863                           fsr0h	equ	0xFEA
 14864                           fsr0l	equ	0xFE9
 14865                           wreg	equ	0xFE8
 14866                           indf1	equ	0xFE7
 14867                           postdec1	equ	0xFE5
 14868                           plusw1	equ	0xFE3
 14869                           fsr1h	equ	0xFE2
 14870                           fsr1l	equ	0xFE1
 14871                           indf2	equ	0xFDF
 14872                           postinc2	equ	0xFDE
 14873                           postdec2	equ	0xFDD
 14874                           plusw2	equ	0xFDB
 14875                           fsr2h	equ	0xFDA
 14876                           fsr2l	equ	0xFD9
 14877                           status	equ	0xFD8
 14878                           
 14879 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
 14880 ;; Defined at:
 14881 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;		None
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;		None
 14886 ;; Return value:  Size  Location     Type
 14887 ;;                  1    wreg      enum E7008
 14888 ;; Registers used:
 14889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 14890 ;; Tracked objects:
 14891 ;;		On entry : 0/0
 14892 ;;		On exit  : 0/0
 14893 ;;		Unchanged: 0/0
 14894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14895 ;;      Params:         0       0       0       0       0       0       0
 14896 ;;      Locals:         0       0       0       0       0       0       0
 14897 ;;      Temps:          0       0       0       0       0       0       0
 14898 ;;      Totals:         0       0       0       0       0       0       0
 14899 ;;Total ram usage:        0 bytes
 14900 ;; Hardware stack levels used:    1
 14901 ;; Hardware stack levels required when called:    2
 14902 ;; This function calls:
 14903 ;;		i2_do_I2C_SEND_RESTART
 14904 ;;		i2_do_I2C_SEND_STOP
 14905 ;;		i2_returnReset
 14906 ;;		i2_returnStop
 14907 ;; This function is called by:
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text83
 14912  002CE2                     __ptext83:
 14913                           	opt stack 0
 14914  002CE2                     i2_do_I2C_DO_ADDRESS_NACK:
 14915                           	opt stack 18
 14916                           
 14917                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 14918                           
 14919                           ;incstack = 0
 14920  002CE2  0100               	movlb	0	; () banked
 14921  002CE4  97B4               	bcf	_i2c_status& (0+255),3,b
 14922                           
 14923                           ; BSR set to: 0
 14924                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 14925  002CE6  0E02               	movlw	2
 14926  002CE8  6FBF               	movwf	(_i2c_status+11)& (0+255),b
 14927                           
 14928                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 14929  002CEA  D006               	goto	i2l215
 14930  002CEC                     
 14931                           ;i2c_master.c: 326: case i2c_restart_write:
 14932                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 14933                           
 14934                           ; BSR set to: 0
 14935                           
 14936                           ; BSR set to: 0
 14937  002CEC  ECF0  F018         	call	i2_do_I2C_SEND_RESTART	;wreg free
 14938  002CF0  0012               	return	
 14939  002CF2                     
 14940                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 14941  002CF2  ECEC  F018         	call	i2_do_I2C_SEND_STOP	;wreg free
 14942                           
 14943                           ;i2c_master.c: 330: }
 14944  002CF6  0012               	return	
 14945  002CF8                     i2l215:
 14946  002CF8  C0D0  F001         	movff	_i2c_status+28,i2returnReset@p
 14947  002CFC  C0D1  F002         	movff	_i2c_status+29,i2returnReset@p+1
 14948  002D00  EE20  F0C4         	lfsr	2,_i2c_status+16
 14949  002D04  D801               	call	i2u647_48
 14950  002D06  D00A               	goto	i2u647_49
 14951  002D08                     i2u647_48:
 14952  002D08  0005               	push	
 14953  002D0A  6EFA               	movwf	pclath,c
 14954  002D0C  50DE               	movf	postinc2,w,c
 14955  002D0E  6EFD               	movwf	tosl,c
 14956  002D10  50DE               	movf	postinc2,w,c
 14957  002D12  6EFE               	movwf	tosh,c
 14958  002D14  50F8               	movf	tblptru,w,c
 14959  002D16  6EFF               	movwf	tosu,c
 14960  002D18  50FA               	movf	pclath,w,c
 14961  002D1A  0012               	return		;indir
 14962  002D1C                     i2u647_49:
 14963                           
 14964                           ; Switch size 1, requested type "space"
 14965                           ; Number of cases is 2, Range of values is 2 to 3
 14966                           ; switch strategies available:
 14967                           ; Name         Instructions Cycles
 14968                           ; simple_byte            7     4 (average)
 14969                           ;	Chosen strategy is simple_byte
 14970  002D1C  0A02               	xorlw	2	; case 2
 14971  002D1E  B4D8               	btfsc	status,2,c
 14972  002D20  D7E5               	goto	i2l216
 14973  002D22  0A01               	xorlw	1	; case 3
 14974  002D24  B4D8               	btfsc	status,2,c
 14975  002D26  D7E2               	goto	i2l216
 14976  002D28  D7E4               	goto	i2l219
 14977  002D2A                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
 14978                           	opt stack 0
 14979                           tosu	equ	0xFFF
 14980                           tosh	equ	0xFFE
 14981                           tosl	equ	0xFFD
 14982                           pclatu	equ	0xFFB
 14983                           pclath	equ	0xFFA
 14984                           tblptru	equ	0xFF8
 14985                           tblptrh	equ	0xFF7
 14986                           tblptrl	equ	0xFF6
 14987                           tablat	equ	0xFF5
 14988                           prodh	equ	0xFF4
 14989                           prodl	equ	0xFF3
 14990                           intcon	equ	0xFF2
 14991                           intcon2	equ	0xFF1
 14992                           postinc0	equ	0xFEE
 14993                           fsr0h	equ	0xFEA
 14994                           fsr0l	equ	0xFE9
 14995                           wreg	equ	0xFE8
 14996                           indf1	equ	0xFE7
 14997                           postdec1	equ	0xFE5
 14998                           plusw1	equ	0xFE3
 14999                           fsr1h	equ	0xFE2
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           plusw2	equ	0xFDB
 15005                           fsr2h	equ	0xFDA
 15006                           fsr2l	equ	0xFD9
 15007                           status	equ	0xFD8
 15008                           
 15009 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
 15010 ;; Defined at:
 15011 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;		None
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      enum E7008
 15018 ;; Registers used:
 15019 ;;		wreg, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15025 ;;      Params:         0       0       0       0       0       0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0
 15027 ;;      Temps:          0       0       0       0       0       0       0
 15028 ;;      Totals:         0       0       0       0       0       0       0
 15029 ;;Total ram usage:        0 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    1
 15032 ;; This function calls:
 15033 ;;		i2_i2c1_driver_sendNACK
 15034 ;; This function is called by:
 15035 ;;		i2_do_I2C_RX
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           	psect	text84
 15040  0031C0                     __ptext84:
 15041                           	opt stack 0
 15042  0031C0                     i2_do_I2C_DO_NACK_RESTART:
 15043                           	opt stack 18
 15044                           
 15045                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 15046                           
 15047                           ;incstack = 0
 15048  0031C0  EC06  F019         	call	i2_i2c1_driver_sendNACK	;wreg free
 15049                           
 15050                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 15051  0031C4  0E09               	movlw	9
 15052  0031C6  0012               	return	
 15053  0031C8                     __end_ofi2_do_I2C_DO_NACK_RESTART:
 15054                           	opt stack 0
 15055                           tosu	equ	0xFFF
 15056                           tosh	equ	0xFFE
 15057                           tosl	equ	0xFFD
 15058                           pclatu	equ	0xFFB
 15059                           pclath	equ	0xFFA
 15060                           tblptru	equ	0xFF8
 15061                           tblptrh	equ	0xFF7
 15062                           tblptrl	equ	0xFF6
 15063                           tablat	equ	0xFF5
 15064                           prodh	equ	0xFF4
 15065                           prodl	equ	0xFF3
 15066                           intcon	equ	0xFF2
 15067                           intcon2	equ	0xFF1
 15068                           postinc0	equ	0xFEE
 15069                           fsr0h	equ	0xFEA
 15070                           fsr0l	equ	0xFE9
 15071                           wreg	equ	0xFE8
 15072                           indf1	equ	0xFE7
 15073                           postdec1	equ	0xFE5
 15074                           plusw1	equ	0xFE3
 15075                           fsr1h	equ	0xFE2
 15076                           fsr1l	equ	0xFE1
 15077                           indf2	equ	0xFDF
 15078                           postinc2	equ	0xFDE
 15079                           postdec2	equ	0xFDD
 15080                           plusw2	equ	0xFDB
 15081                           fsr2h	equ	0xFDA
 15082                           fsr2l	equ	0xFD9
 15083                           status	equ	0xFD8
 15084                           
 15085 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
 15086 ;; Defined at:
 15087 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;		None
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;		None
 15092 ;; Return value:  Size  Location     Type
 15093 ;;                  1    wreg      enum E7008
 15094 ;; Registers used:
 15095 ;;		wreg, cstack
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15101 ;;      Params:         0       0       0       0       0       0       0
 15102 ;;      Locals:         0       0       0       0       0       0       0
 15103 ;;      Temps:          0       0       0       0       0       0       0
 15104 ;;      Totals:         0       0       0       0       0       0       0
 15105 ;;Total ram usage:        0 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; Hardware stack levels required when called:    1
 15108 ;; This function calls:
 15109 ;;		i2_i2c1_driver_sendNACK
 15110 ;; This function is called by:
 15111 ;;		i2_do_I2C_RX
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           	psect	text85
 15116  0031C8                     __ptext85:
 15117                           	opt stack 0
 15118  0031C8                     i2_do_I2C_DO_NACK_STOP:
 15119                           	opt stack 18
 15120                           
 15121                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 15122                           
 15123                           ;incstack = 0
 15124  0031C8  EC06  F019         	call	i2_i2c1_driver_sendNACK	;wreg free
 15125                           
 15126                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 15127  0031CC  0E0A               	movlw	10
 15128  0031CE  0012               	return	
 15129  0031D0                     __end_ofi2_do_I2C_DO_NACK_STOP:
 15130                           	opt stack 0
 15131                           tosu	equ	0xFFF
 15132                           tosh	equ	0xFFE
 15133                           tosl	equ	0xFFD
 15134                           pclatu	equ	0xFFB
 15135                           pclath	equ	0xFFA
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           intcon	equ	0xFF2
 15143                           intcon2	equ	0xFF1
 15144                           postinc0	equ	0xFEE
 15145                           fsr0h	equ	0xFEA
 15146                           fsr0l	equ	0xFE9
 15147                           wreg	equ	0xFE8
 15148                           indf1	equ	0xFE7
 15149                           postdec1	equ	0xFE5
 15150                           plusw1	equ	0xFE3
 15151                           fsr1h	equ	0xFE2
 15152                           fsr1l	equ	0xFE1
 15153                           indf2	equ	0xFDF
 15154                           postinc2	equ	0xFDE
 15155                           postdec2	equ	0xFDD
 15156                           plusw2	equ	0xFDB
 15157                           fsr2h	equ	0xFDA
 15158                           fsr2l	equ	0xFD9
 15159                           status	equ	0xFD8
 15160                           
 15161 ;; *************** function i2_do_I2C_DO_ACK *****************
 15162 ;; Defined at:
 15163 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      enum E7008
 15170 ;; Registers used:
 15171 ;;		wreg, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15177 ;;      Params:         0       0       0       0       0       0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0
 15180 ;;      Totals:         0       0       0       0       0       0       0
 15181 ;;Total ram usage:        0 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    1
 15184 ;; This function calls:
 15185 ;;		i2_i2c1_driver_sendACK
 15186 ;; This function is called by:
 15187 ;; This function uses a non-reentrant model
 15188 ;;
 15189                           
 15190                           	psect	text86
 15191  0031D0                     __ptext86:
 15192                           	opt stack 0
 15193  0031D0                     i2_do_I2C_DO_ACK:
 15194                           	opt stack 19
 15195                           
 15196                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 15197                           
 15198                           ;incstack = 0
 15199  0031D0  EC09  F019         	call	i2_i2c1_driver_sendACK	;wreg free
 15200                           
 15201                           ;i2c_master.c: 302: return I2C_RCEN;
 15202  0031D4  0E05               	movlw	5
 15203  0031D6  0012               	return	
 15204  0031D8                     __end_ofi2_do_I2C_DO_ACK:
 15205                           	opt stack 0
 15206                           tosu	equ	0xFFF
 15207                           tosh	equ	0xFFE
 15208                           tosl	equ	0xFFD
 15209                           pclatu	equ	0xFFB
 15210                           pclath	equ	0xFFA
 15211                           tblptru	equ	0xFF8
 15212                           tblptrh	equ	0xFF7
 15213                           tblptrl	equ	0xFF6
 15214                           tablat	equ	0xFF5
 15215                           prodh	equ	0xFF4
 15216                           prodl	equ	0xFF3
 15217                           intcon	equ	0xFF2
 15218                           intcon2	equ	0xFF1
 15219                           postinc0	equ	0xFEE
 15220                           fsr0h	equ	0xFEA
 15221                           fsr0l	equ	0xFE9
 15222                           wreg	equ	0xFE8
 15223                           indf1	equ	0xFE7
 15224                           postdec1	equ	0xFE5
 15225                           plusw1	equ	0xFE3
 15226                           fsr1h	equ	0xFE2
 15227                           fsr1l	equ	0xFE1
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           plusw2	equ	0xFDB
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function i2_do_I2C_RCEN *****************
 15237 ;; Defined at:
 15238 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;		None
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;		None
 15243 ;; Return value:  Size  Location     Type
 15244 ;;                  1    wreg      enum E7008
 15245 ;; Registers used:
 15246 ;;		wreg, cstack
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15252 ;;      Params:         0       0       0       0       0       0       0
 15253 ;;      Locals:         0       0       0       0       0       0       0
 15254 ;;      Temps:          0       0       0       0       0       0       0
 15255 ;;      Totals:         0       0       0       0       0       0       0
 15256 ;;Total ram usage:        0 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    1
 15259 ;; This function calls:
 15260 ;;		i2_i2c1_driver_startRX
 15261 ;; This function is called by:
 15262 ;; This function uses a non-reentrant model
 15263 ;;
 15264                           
 15265                           	psect	text87
 15266  003152                     __ptext87:
 15267                           	opt stack 0
 15268  003152                     i2_do_I2C_RCEN:
 15269                           	opt stack 19
 15270                           
 15271                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 15272                           
 15273                           ;incstack = 0
 15274  003152  0100               	movlb	0	; () banked
 15275  003154  97B4               	bcf	_i2c_status& (0+255),3,b
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;i2c_master.c: 295: i2c1_driver_startRX();
 15279  003156  EC25  F019         	call	i2_i2c1_driver_startRX	;wreg free
 15280                           
 15281                           ;i2c_master.c: 296: return I2C_RX;
 15282  00315A  0E04               	movlw	4
 15283  00315C  0012               	return	
 15284  00315E                     __end_ofi2_do_I2C_RCEN:
 15285                           	opt stack 0
 15286                           tosu	equ	0xFFF
 15287                           tosh	equ	0xFFE
 15288                           tosl	equ	0xFFD
 15289                           pclatu	equ	0xFFB
 15290                           pclath	equ	0xFFA
 15291                           tblptru	equ	0xFF8
 15292                           tblptrh	equ	0xFF7
 15293                           tblptrl	equ	0xFF6
 15294                           tablat	equ	0xFF5
 15295                           prodh	equ	0xFF4
 15296                           prodl	equ	0xFF3
 15297                           intcon	equ	0xFF2
 15298                           intcon2	equ	0xFF1
 15299                           postinc0	equ	0xFEE
 15300                           fsr0h	equ	0xFEA
 15301                           fsr0l	equ	0xFE9
 15302                           wreg	equ	0xFE8
 15303                           indf1	equ	0xFE7
 15304                           postdec1	equ	0xFE5
 15305                           plusw1	equ	0xFE3
 15306                           fsr1h	equ	0xFE2
 15307                           fsr1l	equ	0xFE1
 15308                           indf2	equ	0xFDF
 15309                           postinc2	equ	0xFDE
 15310                           postdec2	equ	0xFDD
 15311                           plusw2	equ	0xFDB
 15312                           fsr2h	equ	0xFDA
 15313                           fsr2l	equ	0xFD9
 15314                           status	equ	0xFD8
 15315                           
 15316 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
 15317 ;; Defined at:
 15318 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;		None
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;		None
 15323 ;; Return value:  Size  Location     Type
 15324 ;;                  1    wreg      enum E7008
 15325 ;; Registers used:
 15326 ;;		wreg, status,2, status,0, cstack
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15332 ;;      Params:         0       0       0       0       0       0       0
 15333 ;;      Locals:         0       0       0       0       0       0       0
 15334 ;;      Temps:          0       0       0       0       0       0       0
 15335 ;;      Totals:         0       0       0       0       0       0       0
 15336 ;;Total ram usage:        0 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; Hardware stack levels required when called:    1
 15339 ;; This function calls:
 15340 ;;		i2_i2c1_driver_TXData
 15341 ;; This function is called by:
 15342 ;; This function uses a non-reentrant model
 15343 ;;
 15344                           
 15345                           	psect	text88
 15346  0030B2                     __ptext88:
 15347                           	opt stack 0
 15348  0030B2                     i2_do_I2C_SEND_ADR_WRITE:
 15349                           	opt stack 19
 15350                           
 15351                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 15352                           
 15353                           ;incstack = 0
 15354  0030B2  0100               	movlb	0	; () banked
 15355  0030B4  87B4               	bsf	_i2c_status& (0+255),3,b
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 15359  0030B6  51B5               	movf	(_i2c_status+1)& (0+255),w,b
 15360  0030B8  25B5               	addwf	(_i2c_status+1)& (0+255),w,b
 15361  0030BA  ECFC  F018         	call	i2_i2c1_driver_TXData
 15362                           
 15363                           ;i2c_master.c: 289: return I2C_TX;
 15364  0030BE  0E03               	movlw	3
 15365  0030C0  0012               	return	
 15366  0030C2                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
 15367                           	opt stack 0
 15368                           tosu	equ	0xFFF
 15369                           tosh	equ	0xFFE
 15370                           tosl	equ	0xFFD
 15371                           pclatu	equ	0xFFB
 15372                           pclath	equ	0xFFA
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           intcon2	equ	0xFF1
 15381                           postinc0	equ	0xFEE
 15382                           fsr0h	equ	0xFEA
 15383                           fsr0l	equ	0xFE9
 15384                           wreg	equ	0xFE8
 15385                           indf1	equ	0xFE7
 15386                           postdec1	equ	0xFE5
 15387                           plusw1	equ	0xFE3
 15388                           fsr1h	equ	0xFE2
 15389                           fsr1l	equ	0xFE1
 15390                           indf2	equ	0xFDF
 15391                           postinc2	equ	0xFDE
 15392                           postdec2	equ	0xFDD
 15393                           plusw2	equ	0xFDB
 15394                           fsr2h	equ	0xFDA
 15395                           fsr2l	equ	0xFD9
 15396                           status	equ	0xFD8
 15397                           
 15398 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
 15399 ;; Defined at:
 15400 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15401 ;; Parameters:    Size  Location     Type
 15402 ;;		None
 15403 ;; Auto vars:     Size  Location     Type
 15404 ;;		None
 15405 ;; Return value:  Size  Location     Type
 15406 ;;                  1    wreg      enum E7008
 15407 ;; Registers used:
 15408 ;;		wreg, status,0, cstack
 15409 ;; Tracked objects:
 15410 ;;		On entry : 0/0
 15411 ;;		On exit  : 0/0
 15412 ;;		Unchanged: 0/0
 15413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15414 ;;      Params:         0       0       0       0       0       0       0
 15415 ;;      Locals:         0       0       0       0       0       0       0
 15416 ;;      Temps:          0       0       0       0       0       0       0
 15417 ;;      Totals:         0       0       0       0       0       0       0
 15418 ;;Total ram usage:        0 bytes
 15419 ;; Hardware stack levels used:    1
 15420 ;; Hardware stack levels required when called:    1
 15421 ;; This function calls:
 15422 ;;		i2_i2c1_driver_TXData
 15423 ;; This function is called by:
 15424 ;; This function uses a non-reentrant model
 15425 ;;
 15426                           
 15427                           	psect	text89
 15428  0030C2                     __ptext89:
 15429                           	opt stack 0
 15430  0030C2                     i2_do_I2C_SEND_ADR_READ:
 15431                           	opt stack 19
 15432                           
 15433                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 15434                           
 15435                           ;incstack = 0
 15436  0030C2  0100               	movlb	0	; () banked
 15437  0030C4  87B4               	bsf	_i2c_status& (0+255),3,b
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 15441  0030C6  80D8               	bsf	status,0,c
 15442  0030C8  35B5               	rlcf	(_i2c_status+1)& (0+255),w,b
 15443  0030CA  ECFC  F018         	call	i2_i2c1_driver_TXData
 15444                           
 15445                           ;i2c_master.c: 282: return I2C_RCEN;
 15446  0030CE  0E05               	movlw	5
 15447  0030D0  0012               	return	
 15448  0030D2                     __end_ofi2_do_I2C_SEND_ADR_READ:
 15449                           	opt stack 0
 15450                           tosu	equ	0xFFF
 15451                           tosh	equ	0xFFE
 15452                           tosl	equ	0xFFD
 15453                           pclatu	equ	0xFFB
 15454                           pclath	equ	0xFFA
 15455                           tblptru	equ	0xFF8
 15456                           tblptrh	equ	0xFF7
 15457                           tblptrl	equ	0xFF6
 15458                           tablat	equ	0xFF5
 15459                           prodh	equ	0xFF4
 15460                           prodl	equ	0xFF3
 15461                           intcon	equ	0xFF2
 15462                           intcon2	equ	0xFF1
 15463                           postinc0	equ	0xFEE
 15464                           fsr0h	equ	0xFEA
 15465                           fsr0l	equ	0xFE9
 15466                           wreg	equ	0xFE8
 15467                           indf1	equ	0xFE7
 15468                           postdec1	equ	0xFE5
 15469                           plusw1	equ	0xFE3
 15470                           fsr1h	equ	0xFE2
 15471                           fsr1l	equ	0xFE1
 15472                           indf2	equ	0xFDF
 15473                           postinc2	equ	0xFDE
 15474                           postdec2	equ	0xFDD
 15475                           plusw2	equ	0xFDB
 15476                           fsr2h	equ	0xFDA
 15477                           fsr2l	equ	0xFD9
 15478                           status	equ	0xFD8
 15479                           
 15480 ;; *************** function i2_do_I2C_SEND_STOP *****************
 15481 ;; Defined at:
 15482 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15483 ;; Parameters:    Size  Location     Type
 15484 ;;		None
 15485 ;; Auto vars:     Size  Location     Type
 15486 ;;		None
 15487 ;; Return value:  Size  Location     Type
 15488 ;;                  1    wreg      enum E7008
 15489 ;; Registers used:
 15490 ;;		wreg, cstack
 15491 ;; Tracked objects:
 15492 ;;		On entry : 0/0
 15493 ;;		On exit  : 0/0
 15494 ;;		Unchanged: 0/0
 15495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15496 ;;      Params:         0       0       0       0       0       0       0
 15497 ;;      Locals:         0       0       0       0       0       0       0
 15498 ;;      Temps:          0       0       0       0       0       0       0
 15499 ;;      Totals:         0       0       0       0       0       0       0
 15500 ;;Total ram usage:        0 bytes
 15501 ;; Hardware stack levels used:    1
 15502 ;; Hardware stack levels required when called:    1
 15503 ;; This function calls:
 15504 ;;		i2_i2c1_driver_stop
 15505 ;; This function is called by:
 15506 ;;		i2_do_I2C_DO_ADDRESS_NACK
 15507 ;;		i2_do_I2C_TX
 15508 ;;		i2_do_I2C_TX_EMPTY
 15509 ;; This function uses a non-reentrant model
 15510 ;;
 15511                           
 15512                           	psect	text90
 15513  0031D8                     __ptext90:
 15514                           	opt stack 0
 15515  0031D8                     i2_do_I2C_SEND_STOP:
 15516                           	opt stack 18
 15517                           
 15518                           ;i2c_master.c: 274: i2c1_driver_stop();
 15519                           
 15520                           ;incstack = 0
 15521  0031D8  EC2B  F019         	call	i2_i2c1_driver_stop	;wreg free
 15522                           
 15523                           ;i2c_master.c: 275: return I2C_IDLE;
 15524  0031DC  0E00               	movlw	0
 15525  0031DE  0012               	return	
 15526  0031E0                     __end_ofi2_do_I2C_SEND_STOP:
 15527                           	opt stack 0
 15528                           tosu	equ	0xFFF
 15529                           tosh	equ	0xFFE
 15530                           tosl	equ	0xFFD
 15531                           pclatu	equ	0xFFB
 15532                           pclath	equ	0xFFA
 15533                           tblptru	equ	0xFF8
 15534                           tblptrh	equ	0xFF7
 15535                           tblptrl	equ	0xFF6
 15536                           tablat	equ	0xFF5
 15537                           prodh	equ	0xFF4
 15538                           prodl	equ	0xFF3
 15539                           intcon	equ	0xFF2
 15540                           intcon2	equ	0xFF1
 15541                           postinc0	equ	0xFEE
 15542                           fsr0h	equ	0xFEA
 15543                           fsr0l	equ	0xFE9
 15544                           wreg	equ	0xFE8
 15545                           indf1	equ	0xFE7
 15546                           postdec1	equ	0xFE5
 15547                           plusw1	equ	0xFE3
 15548                           fsr1h	equ	0xFE2
 15549                           fsr1l	equ	0xFE1
 15550                           indf2	equ	0xFDF
 15551                           postinc2	equ	0xFDE
 15552                           postdec2	equ	0xFDD
 15553                           plusw2	equ	0xFDB
 15554                           fsr2h	equ	0xFDA
 15555                           fsr2l	equ	0xFD9
 15556                           status	equ	0xFD8
 15557                           
 15558 ;; *************** function i2_do_I2C_SEND_RESTART *****************
 15559 ;; Defined at:
 15560 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15561 ;; Parameters:    Size  Location     Type
 15562 ;;		None
 15563 ;; Auto vars:     Size  Location     Type
 15564 ;;		None
 15565 ;; Return value:  Size  Location     Type
 15566 ;;                  1    wreg      enum E7008
 15567 ;; Registers used:
 15568 ;;		wreg, cstack
 15569 ;; Tracked objects:
 15570 ;;		On entry : 0/0
 15571 ;;		On exit  : 0/0
 15572 ;;		Unchanged: 0/0
 15573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15574 ;;      Params:         0       0       0       0       0       0       0
 15575 ;;      Locals:         0       0       0       0       0       0       0
 15576 ;;      Temps:          0       0       0       0       0       0       0
 15577 ;;      Totals:         0       0       0       0       0       0       0
 15578 ;;Total ram usage:        0 bytes
 15579 ;; Hardware stack levels used:    1
 15580 ;; Hardware stack levels required when called:    1
 15581 ;; This function calls:
 15582 ;;		i2_i2c1_driver_restart
 15583 ;; This function is called by:
 15584 ;;		i2_do_I2C_DO_ADDRESS_NACK
 15585 ;;		i2_do_I2C_TX_EMPTY
 15586 ;; This function uses a non-reentrant model
 15587 ;;
 15588                           
 15589                           	psect	text91
 15590  0031E0                     __ptext91:
 15591                           	opt stack 0
 15592  0031E0                     i2_do_I2C_SEND_RESTART:
 15593                           	opt stack 18
 15594                           
 15595                           ;i2c_master.c: 268: i2c1_driver_restart();
 15596                           
 15597                           ;incstack = 0
 15598  0031E0  EC2D  F019         	call	i2_i2c1_driver_restart	;wreg free
 15599                           
 15600                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 15601  0031E4  0E01               	movlw	1
 15602  0031E6  0012               	return	
 15603  0031E8                     __end_ofi2_do_I2C_SEND_RESTART:
 15604                           	opt stack 0
 15605                           tosu	equ	0xFFF
 15606                           tosh	equ	0xFFE
 15607                           tosl	equ	0xFFD
 15608                           pclatu	equ	0xFFB
 15609                           pclath	equ	0xFFA
 15610                           tblptru	equ	0xFF8
 15611                           tblptrh	equ	0xFF7
 15612                           tblptrl	equ	0xFF6
 15613                           tablat	equ	0xFF5
 15614                           prodh	equ	0xFF4
 15615                           prodl	equ	0xFF3
 15616                           intcon	equ	0xFF2
 15617                           intcon2	equ	0xFF1
 15618                           postinc0	equ	0xFEE
 15619                           fsr0h	equ	0xFEA
 15620                           fsr0l	equ	0xFE9
 15621                           wreg	equ	0xFE8
 15622                           indf1	equ	0xFE7
 15623                           postdec1	equ	0xFE5
 15624                           plusw1	equ	0xFE3
 15625                           fsr1h	equ	0xFE2
 15626                           fsr1l	equ	0xFE1
 15627                           indf2	equ	0xFDF
 15628                           postinc2	equ	0xFDE
 15629                           postdec2	equ	0xFDD
 15630                           plusw2	equ	0xFDB
 15631                           fsr2h	equ	0xFDA
 15632                           fsr2l	equ	0xFD9
 15633                           status	equ	0xFD8
 15634                           
 15635 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
 15636 ;; Defined at:
 15637 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      enum E7008
 15644 ;; Registers used:
 15645 ;;		wreg, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15651 ;;      Params:         0       0       0       0       0       0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0
 15654 ;;      Totals:         0       0       0       0       0       0       0
 15655 ;;Total ram usage:        0 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    1
 15658 ;; This function calls:
 15659 ;;		i2_i2c1_driver_restart
 15660 ;; This function is called by:
 15661 ;;		i2_do_I2C_TX
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           	psect	text92
 15666  0031E8                     __ptext92:
 15667                           	opt stack 0
 15668  0031E8                     i2_do_I2C_SEND_RESTART_WRITE:
 15669                           	opt stack 18
 15670                           
 15671                           ;i2c_master.c: 262: i2c1_driver_restart();
 15672                           
 15673                           ;incstack = 0
 15674  0031E8  EC2D  F019         	call	i2_i2c1_driver_restart	;wreg free
 15675                           
 15676                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 15677  0031EC  0E02               	movlw	2
 15678  0031EE  0012               	return	
 15679  0031F0                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
 15680                           	opt stack 0
 15681                           tosu	equ	0xFFF
 15682                           tosh	equ	0xFFE
 15683                           tosl	equ	0xFFD
 15684                           pclatu	equ	0xFFB
 15685                           pclath	equ	0xFFA
 15686                           tblptru	equ	0xFF8
 15687                           tblptrh	equ	0xFF7
 15688                           tblptrl	equ	0xFF6
 15689                           tablat	equ	0xFF5
 15690                           prodh	equ	0xFF4
 15691                           prodl	equ	0xFF3
 15692                           intcon	equ	0xFF2
 15693                           intcon2	equ	0xFF1
 15694                           postinc0	equ	0xFEE
 15695                           fsr0h	equ	0xFEA
 15696                           fsr0l	equ	0xFE9
 15697                           wreg	equ	0xFE8
 15698                           indf1	equ	0xFE7
 15699                           postdec1	equ	0xFE5
 15700                           plusw1	equ	0xFE3
 15701                           fsr1h	equ	0xFE2
 15702                           fsr1l	equ	0xFE1
 15703                           indf2	equ	0xFDF
 15704                           postinc2	equ	0xFDE
 15705                           postdec2	equ	0xFDD
 15706                           plusw2	equ	0xFDB
 15707                           fsr2h	equ	0xFDA
 15708                           fsr2l	equ	0xFD9
 15709                           status	equ	0xFD8
 15710                           
 15711 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
 15712 ;; Defined at:
 15713 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15714 ;; Parameters:    Size  Location     Type
 15715 ;;		None
 15716 ;; Auto vars:     Size  Location     Type
 15717 ;;		None
 15718 ;; Return value:  Size  Location     Type
 15719 ;;                  1    wreg      enum E7008
 15720 ;; Registers used:
 15721 ;;		wreg, cstack
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15727 ;;      Params:         0       0       0       0       0       0       0
 15728 ;;      Locals:         0       0       0       0       0       0       0
 15729 ;;      Temps:          0       0       0       0       0       0       0
 15730 ;;      Totals:         0       0       0       0       0       0       0
 15731 ;;Total ram usage:        0 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    1
 15734 ;; This function calls:
 15735 ;;		i2_i2c1_driver_restart
 15736 ;; This function is called by:
 15737 ;;		i2_do_I2C_TX
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	text93
 15742  0031F0                     __ptext93:
 15743                           	opt stack 0
 15744  0031F0                     i2_do_I2C_SEND_RESTART_READ:
 15745                           	opt stack 18
 15746                           
 15747                           ;i2c_master.c: 256: i2c1_driver_restart();
 15748                           
 15749                           ;incstack = 0
 15750  0031F0  EC2D  F019         	call	i2_i2c1_driver_restart	;wreg free
 15751                           
 15752                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 15753  0031F4  0E01               	movlw	1
 15754  0031F6  0012               	return	
 15755  0031F8                     __end_ofi2_do_I2C_SEND_RESTART_READ:
 15756                           	opt stack 0
 15757                           tosu	equ	0xFFF
 15758                           tosh	equ	0xFFE
 15759                           tosl	equ	0xFFD
 15760                           pclatu	equ	0xFFB
 15761                           pclath	equ	0xFFA
 15762                           tblptru	equ	0xFF8
 15763                           tblptrh	equ	0xFF7
 15764                           tblptrl	equ	0xFF6
 15765                           tablat	equ	0xFF5
 15766                           prodh	equ	0xFF4
 15767                           prodl	equ	0xFF3
 15768                           intcon	equ	0xFF2
 15769                           intcon2	equ	0xFF1
 15770                           postinc0	equ	0xFEE
 15771                           fsr0h	equ	0xFEA
 15772                           fsr0l	equ	0xFE9
 15773                           wreg	equ	0xFE8
 15774                           indf1	equ	0xFE7
 15775                           postdec1	equ	0xFE5
 15776                           plusw1	equ	0xFE3
 15777                           fsr1h	equ	0xFE2
 15778                           fsr1l	equ	0xFE1
 15779                           indf2	equ	0xFDF
 15780                           postinc2	equ	0xFDE
 15781                           postdec2	equ	0xFDD
 15782                           plusw2	equ	0xFDB
 15783                           fsr2h	equ	0xFDA
 15784                           fsr2l	equ	0xFD9
 15785                           status	equ	0xFD8
 15786                           
 15787 ;; *************** function i2_do_I2C_IDLE *****************
 15788 ;; Defined at:
 15789 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15790 ;; Parameters:    Size  Location     Type
 15791 ;;		None
 15792 ;; Auto vars:     Size  Location     Type
 15793 ;;		None
 15794 ;; Return value:  Size  Location     Type
 15795 ;;                  1    wreg      enum E7008
 15796 ;; Registers used:
 15797 ;;		wreg, status,2
 15798 ;; Tracked objects:
 15799 ;;		On entry : 0/0
 15800 ;;		On exit  : 0/0
 15801 ;;		Unchanged: 0/0
 15802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15803 ;;      Params:         0       0       0       0       0       0       0
 15804 ;;      Locals:         0       0       0       0       0       0       0
 15805 ;;      Temps:          0       0       0       0       0       0       0
 15806 ;;      Totals:         0       0       0       0       0       0       0
 15807 ;;Total ram usage:        0 bytes
 15808 ;; Hardware stack levels used:    1
 15809 ;; This function calls:
 15810 ;;		Nothing
 15811 ;; This function is called by:
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text94
 15816  00315E                     __ptext94:
 15817                           	opt stack 0
 15818  00315E                     i2_do_I2C_IDLE:
 15819                           	opt stack 20
 15820                           
 15821                           ;i2c_master.c: 249: i2c_status.busy = 0;
 15822                           
 15823                           ;incstack = 0
 15824  00315E  0100               	movlb	0	; () banked
 15825  003160  91B4               	bcf	_i2c_status& (0+255),0,b
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 15829  003162  0E00               	movlw	0
 15830  003164  6FBF               	movwf	(_i2c_status+11)& (0+255),b
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;i2c_master.c: 251: return I2C_RESET;
 15834  003166  0E0E               	movlw	14
 15835  003168  0012               	return	
 15836  00316A                     __end_ofi2_do_I2C_IDLE:
 15837                           	opt stack 0
 15838                           tosu	equ	0xFFF
 15839                           tosh	equ	0xFFE
 15840                           tosl	equ	0xFFD
 15841                           pclatu	equ	0xFFB
 15842                           pclath	equ	0xFFA
 15843                           tblptru	equ	0xFF8
 15844                           tblptrh	equ	0xFF7
 15845                           tblptrl	equ	0xFF6
 15846                           tablat	equ	0xFF5
 15847                           prodh	equ	0xFF4
 15848                           prodl	equ	0xFF3
 15849                           intcon	equ	0xFF2
 15850                           intcon2	equ	0xFF1
 15851                           postinc0	equ	0xFEE
 15852                           fsr0h	equ	0xFEA
 15853                           fsr0l	equ	0xFE9
 15854                           wreg	equ	0xFE8
 15855                           indf1	equ	0xFE7
 15856                           postdec1	equ	0xFE5
 15857                           plusw1	equ	0xFE3
 15858                           fsr1h	equ	0xFE2
 15859                           fsr1l	equ	0xFE1
 15860                           indf2	equ	0xFDF
 15861                           postinc2	equ	0xFDE
 15862                           postdec2	equ	0xFDD
 15863                           plusw2	equ	0xFDB
 15864                           fsr2h	equ	0xFDA
 15865                           fsr2l	equ	0xFD9
 15866                           status	equ	0xFD8
 15867                           
 15868 ;; *************** function i2_do_I2C_RESET *****************
 15869 ;; Defined at:
 15870 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 15871 ;; Parameters:    Size  Location     Type
 15872 ;;		None
 15873 ;; Auto vars:     Size  Location     Type
 15874 ;;		None
 15875 ;; Return value:  Size  Location     Type
 15876 ;;                  1    wreg      enum E7008
 15877 ;; Registers used:
 15878 ;;		wreg, status,2, cstack
 15879 ;; Tracked objects:
 15880 ;;		On entry : 0/0
 15881 ;;		On exit  : 0/0
 15882 ;;		Unchanged: 0/0
 15883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15884 ;;      Params:         0       0       0       0       0       0       0
 15885 ;;      Locals:         0       0       0       0       0       0       0
 15886 ;;      Temps:          0       0       0       0       0       0       0
 15887 ;;      Totals:         0       0       0       0       0       0       0
 15888 ;;Total ram usage:        0 bytes
 15889 ;; Hardware stack levels used:    1
 15890 ;; Hardware stack levels required when called:    1
 15891 ;; This function calls:
 15892 ;;		i2_i2c1_driver_resetBus
 15893 ;; This function is called by:
 15894 ;; This function uses a non-reentrant model
 15895 ;;
 15896                           
 15897                           	psect	text95
 15898  0030D2                     __ptext95:
 15899                           	opt stack 0
 15900  0030D2                     i2_do_I2C_RESET:
 15901                           	opt stack 19
 15902                           
 15903                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 15904                           
 15905                           ; BSR set to: 0
 15906                           ;incstack = 0
 15907  0030D2  EC32  F019         	call	i2_i2c1_driver_resetBus	;wreg free
 15908                           
 15909                           ;i2c_master.c: 242: i2c_status.busy = 0;
 15910  0030D6  0100               	movlb	0	; () banked
 15911  0030D8  91B4               	bcf	_i2c_status& (0+255),0,b
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 15915  0030DA  0E00               	movlw	0
 15916  0030DC  6FBF               	movwf	(_i2c_status+11)& (0+255),b
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;i2c_master.c: 244: return I2C_RESET;
 15920  0030DE  0E0E               	movlw	14
 15921  0030E0  0012               	return	
 15922  0030E2                     __end_ofi2_do_I2C_RESET:
 15923                           	opt stack 0
 15924                           tosu	equ	0xFFF
 15925                           tosh	equ	0xFFE
 15926                           tosl	equ	0xFFD
 15927                           pclatu	equ	0xFFB
 15928                           pclath	equ	0xFFA
 15929                           tblptru	equ	0xFF8
 15930                           tblptrh	equ	0xFF7
 15931                           tblptrl	equ	0xFF6
 15932                           tablat	equ	0xFF5
 15933                           prodh	equ	0xFF4
 15934                           prodl	equ	0xFF3
 15935                           intcon	equ	0xFF2
 15936                           intcon2	equ	0xFF1
 15937                           postinc0	equ	0xFEE
 15938                           fsr0h	equ	0xFEA
 15939                           fsr0l	equ	0xFE9
 15940                           wreg	equ	0xFE8
 15941                           indf1	equ	0xFE7
 15942                           postdec1	equ	0xFE5
 15943                           plusw1	equ	0xFE3
 15944                           fsr1h	equ	0xFE2
 15945                           fsr1l	equ	0xFE1
 15946                           indf2	equ	0xFDF
 15947                           postinc2	equ	0xFDE
 15948                           postdec2	equ	0xFDD
 15949                           plusw2	equ	0xFDB
 15950                           fsr2h	equ	0xFDA
 15951                           fsr2l	equ	0xFD9
 15952                           status	equ	0xFD8
 15953                           
 15954 ;; *************** function i2_do_I2C_TX_EMPTY *****************
 15955 ;; Defined at:
 15956 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 15957 ;; Parameters:    Size  Location     Type
 15958 ;;		None
 15959 ;; Auto vars:     Size  Location     Type
 15960 ;;		None
 15961 ;; Return value:  Size  Location     Type
 15962 ;;                  1    wreg      enum E7008
 15963 ;; Registers used:
 15964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 15965 ;; Tracked objects:
 15966 ;;		On entry : 0/0
 15967 ;;		On exit  : 0/0
 15968 ;;		Unchanged: 0/0
 15969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15970 ;;      Params:         0       0       0       0       0       0       0
 15971 ;;      Locals:         0       0       0       0       0       0       0
 15972 ;;      Temps:          0       0       0       0       0       0       0
 15973 ;;      Totals:         0       0       0       0       0       0       0
 15974 ;;Total ram usage:        0 bytes
 15975 ;; Hardware stack levels used:    1
 15976 ;; Hardware stack levels required when called:    2
 15977 ;; This function calls:
 15978 ;;		i2_do_I2C_SEND_RESTART
 15979 ;;		i2_do_I2C_SEND_STOP
 15980 ;;		i2_mssp1_setIRQ
 15981 ;;		i2_returnReset
 15982 ;;		i2_returnStop
 15983 ;; This function is called by:
 15984 ;; This function uses a non-reentrant model
 15985 ;;
 15986                           
 15987                           	psect	text96
 15988  002A64                     __ptext96:
 15989                           	opt stack 0
 15990  002A64                     i2_do_I2C_TX_EMPTY:
 15991                           	opt stack 18
 15992                           
 15993                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;incstack = 0
 15997  002A64  0100               	movlb	0	; () banked
 15998  002A66  85B4               	bsf	_i2c_status& (0+255),2,b
 15999                           
 16000                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 16001  002A68  D00A               	goto	i2l251
 16002  002A6A                     
 16003                           ;i2c_master.c: 388: case i2c_restart_write:
 16004                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 16005                           
 16006                           ; BSR set to: 0
 16007                           
 16008                           ; BSR set to: 0
 16009  002A6A  ECF0  F018         	call	i2_do_I2C_SEND_RESTART	;wreg free
 16010  002A6E  0012               	return	
 16011  002A70                     
 16012                           ;i2c_master.c: 391: mssp1_setIRQ();
 16013  002A70  EC21  F019         	call	i2_mssp1_setIRQ	;wreg free
 16014                           
 16015                           ;i2c_master.c: 392: return I2C_TX;
 16016  002A74  0E03               	movlw	3
 16017  002A76  0012               	return	
 16018  002A78                     
 16019                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 16020                           
 16021                           ;i2c_master.c: 394: case i2c_stop:
 16022  002A78  ECEC  F018         	call	i2_do_I2C_SEND_STOP	;wreg free
 16023                           
 16024                           ;i2c_master.c: 396: }
 16025  002A7C  0012               	return	
 16026  002A7E                     i2l251:
 16027  002A7E  C0CC  F001         	movff	_i2c_status+24,i2returnReset@p
 16028  002A82  C0CD  F002         	movff	_i2c_status+25,i2returnReset@p+1
 16029  002A86  EE20  F0C0         	lfsr	2,_i2c_status+12
 16030  002A8A  D801               	call	i2u653_48
 16031  002A8C  D00A               	goto	i2u653_49
 16032  002A8E                     i2u653_48:
 16033  002A8E  0005               	push	
 16034  002A90  6EFA               	movwf	pclath,c
 16035  002A92  50DE               	movf	postinc2,w,c
 16036  002A94  6EFD               	movwf	tosl,c
 16037  002A96  50DE               	movf	postinc2,w,c
 16038  002A98  6EFE               	movwf	tosh,c
 16039  002A9A  50F8               	movf	tblptru,w,c
 16040  002A9C  6EFF               	movwf	tosu,c
 16041  002A9E  50FA               	movf	pclath,w,c
 16042  002AA0  0012               	return		;indir
 16043  002AA2                     i2u653_49:
 16044                           
 16045                           ; Switch size 1, requested type "space"
 16046                           ; Number of cases is 4, Range of values is 1 to 4
 16047                           ; switch strategies available:
 16048                           ; Name         Instructions Cycles
 16049                           ; simple_byte           13     7 (average)
 16050                           ;	Chosen strategy is simple_byte
 16051  002AA2  0A01               	xorlw	1	; case 1
 16052  002AA4  B4D8               	btfsc	status,2,c
 16053  002AA6  D7E8               	goto	i2l256
 16054  002AA8  0A03               	xorlw	3	; case 2
 16055  002AAA  B4D8               	btfsc	status,2,c
 16056  002AAC  D7DE               	goto	i2l252
 16057  002AAE  0A01               	xorlw	1	; case 3
 16058  002AB0  B4D8               	btfsc	status,2,c
 16059  002AB2  D7DB               	goto	i2l252
 16060  002AB4  0A07               	xorlw	7	; case 4
 16061  002AB6  B4D8               	btfsc	status,2,c
 16062  002AB8  D7DB               	goto	i2l255
 16063  002ABA  D7DE               	goto	i2l256
 16064  002ABC                     __end_ofi2_do_I2C_TX_EMPTY:
 16065                           	opt stack 0
 16066                           tosu	equ	0xFFF
 16067                           tosh	equ	0xFFE
 16068                           tosl	equ	0xFFD
 16069                           pclatu	equ	0xFFB
 16070                           pclath	equ	0xFFA
 16071                           tblptru	equ	0xFF8
 16072                           tblptrh	equ	0xFF7
 16073                           tblptrl	equ	0xFF6
 16074                           tablat	equ	0xFF5
 16075                           prodh	equ	0xFF4
 16076                           prodl	equ	0xFF3
 16077                           intcon	equ	0xFF2
 16078                           intcon2	equ	0xFF1
 16079                           postinc0	equ	0xFEE
 16080                           fsr0h	equ	0xFEA
 16081                           fsr0l	equ	0xFE9
 16082                           wreg	equ	0xFE8
 16083                           indf1	equ	0xFE7
 16084                           postdec1	equ	0xFE5
 16085                           plusw1	equ	0xFE3
 16086                           fsr1h	equ	0xFE2
 16087                           fsr1l	equ	0xFE1
 16088                           indf2	equ	0xFDF
 16089                           postinc2	equ	0xFDE
 16090                           postdec2	equ	0xFDD
 16091                           plusw2	equ	0xFDB
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8
 16095                           
 16096 ;; *************** function i2_mssp1_setIRQ *****************
 16097 ;; Defined at:
 16098 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;		None
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;		None
 16103 ;; Return value:  Size  Location     Type
 16104 ;;                  1    wreg      void 
 16105 ;; Registers used:
 16106 ;;		None
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16112 ;;      Params:         0       0       0       0       0       0       0
 16113 ;;      Locals:         0       0       0       0       0       0       0
 16114 ;;      Temps:          0       0       0       0       0       0       0
 16115 ;;      Totals:         0       0       0       0       0       0       0
 16116 ;;Total ram usage:        0 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		i2_do_I2C_TX_EMPTY
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           	psect	text97
 16126  003242                     __ptext97:
 16127                           	opt stack 0
 16128  003242                     i2_mssp1_setIRQ:
 16129                           	opt stack 19
 16130                           
 16131                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
 16132                           
 16133                           ;incstack = 0
 16134  003242  869E               	bsf	3998,3,c	;volatile
 16135  003244  0012               	return		;funcret
 16136  003246                     __end_ofi2_mssp1_setIRQ:
 16137                           	opt stack 0
 16138                           tosu	equ	0xFFF
 16139                           tosh	equ	0xFFE
 16140                           tosl	equ	0xFFD
 16141                           pclatu	equ	0xFFB
 16142                           pclath	equ	0xFFA
 16143                           tblptru	equ	0xFF8
 16144                           tblptrh	equ	0xFF7
 16145                           tblptrl	equ	0xFF6
 16146                           tablat	equ	0xFF5
 16147                           prodh	equ	0xFF4
 16148                           prodl	equ	0xFF3
 16149                           intcon	equ	0xFF2
 16150                           intcon2	equ	0xFF1
 16151                           postinc0	equ	0xFEE
 16152                           fsr0h	equ	0xFEA
 16153                           fsr0l	equ	0xFE9
 16154                           wreg	equ	0xFE8
 16155                           indf1	equ	0xFE7
 16156                           postdec1	equ	0xFE5
 16157                           plusw1	equ	0xFE3
 16158                           fsr1h	equ	0xFE2
 16159                           fsr1l	equ	0xFE1
 16160                           indf2	equ	0xFDF
 16161                           postinc2	equ	0xFDE
 16162                           postdec2	equ	0xFDD
 16163                           plusw2	equ	0xFDB
 16164                           fsr2h	equ	0xFDA
 16165                           fsr2l	equ	0xFD9
 16166                           status	equ	0xFD8
 16167                           
 16168 ;; *************** function i2_i2c1_driver_isNACK *****************
 16169 ;; Defined at:
 16170 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 16171 ;; Parameters:    Size  Location     Type
 16172 ;;		None
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;		None
 16175 ;; Return value:  Size  Location     Type
 16176 ;;		None               void
 16177 ;; Registers used:
 16178 ;;		wreg, status,2, status,0
 16179 ;; Tracked objects:
 16180 ;;		On entry : 0/0
 16181 ;;		On exit  : 0/0
 16182 ;;		Unchanged: 0/0
 16183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16184 ;;      Params:         0       0       0       0       0       0       0
 16185 ;;      Locals:         0       0       0       0       0       0       0
 16186 ;;      Temps:          1       0       0       0       0       0       0
 16187 ;;      Totals:         1       0       0       0       0       0       0
 16188 ;;Total ram usage:        1 bytes
 16189 ;; Hardware stack levels used:    1
 16190 ;; This function calls:
 16191 ;;		Nothing
 16192 ;; This function is called by:
 16193 ;;		i2_do_I2C_TX
 16194 ;;		i2_i2c_ISR
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           	psect	text98
 16199  003056                     __ptext98:
 16200                           	opt stack 0
 16201  003056                     i2_i2c1_driver_isNACK:
 16202                           	opt stack 20
 16203                           
 16204                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 16205                           
 16206                           ;incstack = 0
 16207  003056  50C5               	movf	4037,w,c	;volatile
 16208  003058  0BBF               	andlw	-65
 16209  00305A  0940               	iorlw	64
 16210  00305C  6EC5               	movwf	4037,c	;volatile
 16211  00305E  38C5               	swapf	4037,w,c	;volatile
 16212  003060  32E8               	rrcf	wreg,f,c
 16213  003062  32E8               	rrcf	wreg,f,c
 16214  003064  0B01               	andlw	1
 16215  003066  6E01               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
 16216  003068  3001               	rrcf	??i2_i2c1_driver_isNACK,w,c
 16217  00306A  0012               	return	
 16218  00306C                     __end_ofi2_i2c1_driver_isNACK:
 16219                           	opt stack 0
 16220                           tosu	equ	0xFFF
 16221                           tosh	equ	0xFFE
 16222                           tosl	equ	0xFFD
 16223                           pclatu	equ	0xFFB
 16224                           pclath	equ	0xFFA
 16225                           tblptru	equ	0xFF8
 16226                           tblptrh	equ	0xFF7
 16227                           tblptrl	equ	0xFF6
 16228                           tablat	equ	0xFF5
 16229                           prodh	equ	0xFF4
 16230                           prodl	equ	0xFF3
 16231                           intcon	equ	0xFF2
 16232                           intcon2	equ	0xFF1
 16233                           postinc0	equ	0xFEE
 16234                           fsr0h	equ	0xFEA
 16235                           fsr0l	equ	0xFE9
 16236                           wreg	equ	0xFE8
 16237                           indf1	equ	0xFE7
 16238                           postdec1	equ	0xFE5
 16239                           plusw1	equ	0xFE3
 16240                           fsr1h	equ	0xFE2
 16241                           fsr1l	equ	0xFE1
 16242                           indf2	equ	0xFDF
 16243                           postinc2	equ	0xFDE
 16244                           postdec2	equ	0xFDD
 16245                           plusw2	equ	0xFDB
 16246                           fsr2h	equ	0xFDA
 16247                           fsr2l	equ	0xFD9
 16248                           status	equ	0xFD8
 16249                           
 16250 ;; *************** function i2_i2c1_driver_TXData *****************
 16251 ;; Defined at:
 16252 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 16253 ;; Parameters:    Size  Location     Type
 16254 ;;  d               1    wreg     unsigned char 
 16255 ;; Auto vars:     Size  Location     Type
 16256 ;;  d               1    0[COMRAM] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;                  1    wreg      void 
 16259 ;; Registers used:
 16260 ;;		wreg
 16261 ;; Tracked objects:
 16262 ;;		On entry : 0/0
 16263 ;;		On exit  : 0/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16266 ;;      Params:         0       0       0       0       0       0       0
 16267 ;;      Locals:         1       0       0       0       0       0       0
 16268 ;;      Temps:          0       0       0       0       0       0       0
 16269 ;;      Totals:         1       0       0       0       0       0       0
 16270 ;;Total ram usage:        1 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; This function calls:
 16273 ;;		Nothing
 16274 ;; This function is called by:
 16275 ;;		i2_do_I2C_SEND_ADR_READ
 16276 ;;		i2_do_I2C_SEND_ADR_WRITE
 16277 ;;		i2_do_I2C_TX
 16278 ;; This function uses a non-reentrant model
 16279 ;;
 16280                           
 16281                           	psect	text99
 16282  0031F8                     __ptext99:
 16283                           	opt stack 0
 16284  0031F8                     i2_i2c1_driver_TXData:
 16285                           	opt stack 19
 16286                           
 16287                           ;incstack = 0
 16288                           ;i2i2c1_driver_TXData@d stored from wreg
 16289  0031F8  6E01               	movwf	i2i2c1_driver_TXData@d,c
 16290                           
 16291                           ;i2c1_driver.c: 188: SSP1BUF = d;
 16292  0031FA  C001  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
 16293  0031FE  0012               	return		;funcret
 16294  003200                     __end_ofi2_i2c1_driver_TXData:
 16295                           	opt stack 0
 16296                           tosu	equ	0xFFF
 16297                           tosh	equ	0xFFE
 16298                           tosl	equ	0xFFD
 16299                           pclatu	equ	0xFFB
 16300                           pclath	equ	0xFFA
 16301                           tblptru	equ	0xFF8
 16302                           tblptrh	equ	0xFF7
 16303                           tblptrl	equ	0xFF6
 16304                           tablat	equ	0xFF5
 16305                           prodh	equ	0xFF4
 16306                           prodl	equ	0xFF3
 16307                           intcon	equ	0xFF2
 16308                           intcon2	equ	0xFF1
 16309                           postinc0	equ	0xFEE
 16310                           fsr0h	equ	0xFEA
 16311                           fsr0l	equ	0xFE9
 16312                           wreg	equ	0xFE8
 16313                           indf1	equ	0xFE7
 16314                           postdec1	equ	0xFE5
 16315                           plusw1	equ	0xFE3
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           plusw2	equ	0xFDB
 16322                           fsr2h	equ	0xFDA
 16323                           fsr2l	equ	0xFD9
 16324                           status	equ	0xFD8
 16325                           
 16326 ;; *************** function i2_i2c1_driver_getRXData *****************
 16327 ;; Defined at:
 16328 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;		None
 16331 ;; Auto vars:     Size  Location     Type
 16332 ;;		None
 16333 ;; Return value:  Size  Location     Type
 16334 ;;                  1    wreg      unsigned char 
 16335 ;; Registers used:
 16336 ;;		wreg, status,2
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16342 ;;      Params:         0       0       0       0       0       0       0
 16343 ;;      Locals:         0       0       0       0       0       0       0
 16344 ;;      Temps:          0       0       0       0       0       0       0
 16345 ;;      Totals:         0       0       0       0       0       0       0
 16346 ;;Total ram usage:        0 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; This function calls:
 16349 ;;		Nothing
 16350 ;; This function is called by:
 16351 ;;		i2_do_I2C_RX
 16352 ;; This function uses a non-reentrant model
 16353 ;;
 16354                           
 16355                           	psect	text100
 16356  003246                     __ptext100:
 16357                           	opt stack 0
 16358  003246                     i2_i2c1_driver_getRXData:
 16359                           	opt stack 19
 16360                           
 16361                           ;i2c1_driver.c: 173: return SSP1BUF;
 16362                           
 16363                           ;incstack = 0
 16364  003246  50C9               	movf	4041,w,c	;volatile
 16365  003248  0012               	return	
 16366  00324A                     __end_ofi2_i2c1_driver_getRXData:
 16367                           	opt stack 0
 16368                           tosu	equ	0xFFF
 16369                           tosh	equ	0xFFE
 16370                           tosl	equ	0xFFD
 16371                           pclatu	equ	0xFFB
 16372                           pclath	equ	0xFFA
 16373                           tblptru	equ	0xFF8
 16374                           tblptrh	equ	0xFF7
 16375                           tblptrl	equ	0xFF6
 16376                           tablat	equ	0xFF5
 16377                           prodh	equ	0xFF4
 16378                           prodl	equ	0xFF3
 16379                           intcon	equ	0xFF2
 16380                           intcon2	equ	0xFF1
 16381                           postinc0	equ	0xFEE
 16382                           fsr0h	equ	0xFEA
 16383                           fsr0l	equ	0xFE9
 16384                           wreg	equ	0xFE8
 16385                           indf1	equ	0xFE7
 16386                           postdec1	equ	0xFE5
 16387                           plusw1	equ	0xFE3
 16388                           fsr1h	equ	0xFE2
 16389                           fsr1l	equ	0xFE1
 16390                           indf2	equ	0xFDF
 16391                           postinc2	equ	0xFDE
 16392                           postdec2	equ	0xFDD
 16393                           plusw2	equ	0xFDB
 16394                           fsr2h	equ	0xFDA
 16395                           fsr2l	equ	0xFD9
 16396                           status	equ	0xFD8
 16397                           
 16398 ;; *************** function i2_i2c1_driver_sendNACK *****************
 16399 ;; Defined at:
 16400 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;		None
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;		None
 16405 ;; Return value:  Size  Location     Type
 16406 ;;                  1    wreg      void 
 16407 ;; Registers used:
 16408 ;;		None
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16414 ;;      Params:         0       0       0       0       0       0       0
 16415 ;;      Locals:         0       0       0       0       0       0       0
 16416 ;;      Temps:          0       0       0       0       0       0       0
 16417 ;;      Totals:         0       0       0       0       0       0       0
 16418 ;;Total ram usage:        0 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; This function calls:
 16421 ;;		Nothing
 16422 ;; This function is called by:
 16423 ;;		i2_do_I2C_DO_NACK_STOP
 16424 ;;		i2_do_I2C_DO_NACK_RESTART
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           	psect	text101
 16429  00320C                     __ptext101:
 16430                           	opt stack 0
 16431  00320C                     i2_i2c1_driver_sendNACK:
 16432                           	opt stack 18
 16433                           
 16434                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 16435                           
 16436                           ;incstack = 0
 16437  00320C  8AC5               	bsf	4037,5,c	;volatile
 16438                           
 16439                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 16440  00320E  88C5               	bsf	4037,4,c	;volatile
 16441  003210  0012               	return		;funcret
 16442  003212                     __end_ofi2_i2c1_driver_sendNACK:
 16443                           	opt stack 0
 16444                           tosu	equ	0xFFF
 16445                           tosh	equ	0xFFE
 16446                           tosl	equ	0xFFD
 16447                           pclatu	equ	0xFFB
 16448                           pclath	equ	0xFFA
 16449                           tblptru	equ	0xFF8
 16450                           tblptrh	equ	0xFF7
 16451                           tblptrl	equ	0xFF6
 16452                           tablat	equ	0xFF5
 16453                           prodh	equ	0xFF4
 16454                           prodl	equ	0xFF3
 16455                           intcon	equ	0xFF2
 16456                           intcon2	equ	0xFF1
 16457                           postinc0	equ	0xFEE
 16458                           fsr0h	equ	0xFEA
 16459                           fsr0l	equ	0xFE9
 16460                           wreg	equ	0xFE8
 16461                           indf1	equ	0xFE7
 16462                           postdec1	equ	0xFE5
 16463                           plusw1	equ	0xFE3
 16464                           fsr1h	equ	0xFE2
 16465                           fsr1l	equ	0xFE1
 16466                           indf2	equ	0xFDF
 16467                           postinc2	equ	0xFDE
 16468                           postdec2	equ	0xFDD
 16469                           plusw2	equ	0xFDB
 16470                           fsr2h	equ	0xFDA
 16471                           fsr2l	equ	0xFD9
 16472                           status	equ	0xFD8
 16473                           
 16474 ;; *************** function i2_i2c1_driver_resetBus *****************
 16475 ;; Defined at:
 16476 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 16477 ;; Parameters:    Size  Location     Type
 16478 ;;		None
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;		None
 16481 ;; Return value:  Size  Location     Type
 16482 ;;                  1    wreg      void 
 16483 ;; Registers used:
 16484 ;;		None
 16485 ;; Tracked objects:
 16486 ;;		On entry : 0/0
 16487 ;;		On exit  : 0/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16490 ;;      Params:         0       0       0       0       0       0       0
 16491 ;;      Locals:         0       0       0       0       0       0       0
 16492 ;;      Temps:          0       0       0       0       0       0       0
 16493 ;;      Totals:         0       0       0       0       0       0       0
 16494 ;;Total ram usage:        0 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; This function calls:
 16497 ;;		Nothing
 16498 ;; This function is called by:
 16499 ;;		i2_do_I2C_RESET
 16500 ;; This function uses a non-reentrant model
 16501 ;;
 16502                           
 16503                           	psect	text102
 16504  003264                     __ptext102:
 16505                           	opt stack 0
 16506  003264                     i2_i2c1_driver_resetBus:
 16507                           	opt stack 19
 16508                           
 16509                           ;incstack = 0
 16510  003264  0012               	return		;funcret
 16511  003266                     __end_ofi2_i2c1_driver_resetBus:
 16512                           	opt stack 0
 16513                           tosu	equ	0xFFF
 16514                           tosh	equ	0xFFE
 16515                           tosl	equ	0xFFD
 16516                           pclatu	equ	0xFFB
 16517                           pclath	equ	0xFFA
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           intcon2	equ	0xFF1
 16526                           postinc0	equ	0xFEE
 16527                           fsr0h	equ	0xFEA
 16528                           fsr0l	equ	0xFE9
 16529                           wreg	equ	0xFE8
 16530                           indf1	equ	0xFE7
 16531                           postdec1	equ	0xFE5
 16532                           plusw1	equ	0xFE3
 16533                           fsr1h	equ	0xFE2
 16534                           fsr1l	equ	0xFE1
 16535                           indf2	equ	0xFDF
 16536                           postinc2	equ	0xFDE
 16537                           postdec2	equ	0xFDD
 16538                           plusw2	equ	0xFDB
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           
 16543 ;; *************** function i2_i2c1_driver_startRX *****************
 16544 ;; Defined at:
 16545 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;		None
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;		None
 16550 ;; Return value:  Size  Location     Type
 16551 ;;                  1    wreg      void 
 16552 ;; Registers used:
 16553 ;;		None
 16554 ;; Tracked objects:
 16555 ;;		On entry : 0/0
 16556 ;;		On exit  : 0/0
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16559 ;;      Params:         0       0       0       0       0       0       0
 16560 ;;      Locals:         0       0       0       0       0       0       0
 16561 ;;      Temps:          0       0       0       0       0       0       0
 16562 ;;      Totals:         0       0       0       0       0       0       0
 16563 ;;Total ram usage:        0 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; This function calls:
 16566 ;;		Nothing
 16567 ;; This function is called by:
 16568 ;;		i2_do_I2C_RCEN
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           	psect	text103
 16573  00324A                     __ptext103:
 16574                           	opt stack 0
 16575  00324A                     i2_i2c1_driver_startRX:
 16576                           	opt stack 19
 16577                           
 16578                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 16579                           
 16580                           ;incstack = 0
 16581  00324A  86C5               	bsf	4037,3,c	;volatile
 16582  00324C  0012               	return		;funcret
 16583  00324E                     __end_ofi2_i2c1_driver_startRX:
 16584                           	opt stack 0
 16585                           tosu	equ	0xFFF
 16586                           tosh	equ	0xFFE
 16587                           tosl	equ	0xFFD
 16588                           pclatu	equ	0xFFB
 16589                           pclath	equ	0xFFA
 16590                           tblptru	equ	0xFF8
 16591                           tblptrh	equ	0xFF7
 16592                           tblptrl	equ	0xFF6
 16593                           tablat	equ	0xFF5
 16594                           prodh	equ	0xFF4
 16595                           prodl	equ	0xFF3
 16596                           intcon	equ	0xFF2
 16597                           intcon2	equ	0xFF1
 16598                           postinc0	equ	0xFEE
 16599                           fsr0h	equ	0xFEA
 16600                           fsr0l	equ	0xFE9
 16601                           wreg	equ	0xFE8
 16602                           indf1	equ	0xFE7
 16603                           postdec1	equ	0xFE5
 16604                           plusw1	equ	0xFE3
 16605                           fsr1h	equ	0xFE2
 16606                           fsr1l	equ	0xFE1
 16607                           indf2	equ	0xFDF
 16608                           postinc2	equ	0xFDE
 16609                           postdec2	equ	0xFDD
 16610                           plusw2	equ	0xFDB
 16611                           fsr2h	equ	0xFDA
 16612                           fsr2l	equ	0xFD9
 16613                           status	equ	0xFD8
 16614                           
 16615 ;; *************** function i2_returnReset *****************
 16616 ;; Defined at:
 16617 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16618 ;; Parameters:    Size  Location     Type
 16619 ;;  p               2    0[COMRAM] PTR void 
 16620 ;;		 -> NULL(0), 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;		None
 16623 ;; Return value:  Size  Location     Type
 16624 ;;                  1    wreg      enum E6842
 16625 ;; Registers used:
 16626 ;;		wreg
 16627 ;; Tracked objects:
 16628 ;;		On entry : 0/0
 16629 ;;		On exit  : 0/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16632 ;;      Params:         2       0       0       0       0       0       0
 16633 ;;      Locals:         0       0       0       0       0       0       0
 16634 ;;      Temps:          0       0       0       0       0       0       0
 16635 ;;      Totals:         2       0       0       0       0       0       0
 16636 ;;Total ram usage:        2 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;; This function uses a non-reentrant model
 16642 ;;
 16643                           
 16644                           	psect	text104
 16645  00324E                     __ptext104:
 16646                           	opt stack 0
 16647  00324E                     i2_returnReset:
 16648                           	opt stack 19
 16649                           
 16650                           ;i2c_master.c: 450: return i2c_reset_link;
 16651                           
 16652                           ;incstack = 0
 16653  00324E  0E05               	movlw	5
 16654  003250  0012               	return	
 16655  003252                     __end_ofi2_returnReset:
 16656                           	opt stack 0
 16657                           tosu	equ	0xFFF
 16658                           tosh	equ	0xFFE
 16659                           tosl	equ	0xFFD
 16660                           pclatu	equ	0xFFB
 16661                           pclath	equ	0xFFA
 16662                           tblptru	equ	0xFF8
 16663                           tblptrh	equ	0xFF7
 16664                           tblptrl	equ	0xFF6
 16665                           tablat	equ	0xFF5
 16666                           prodh	equ	0xFF4
 16667                           prodl	equ	0xFF3
 16668                           intcon	equ	0xFF2
 16669                           intcon2	equ	0xFF1
 16670                           postinc0	equ	0xFEE
 16671                           fsr0h	equ	0xFEA
 16672                           fsr0l	equ	0xFE9
 16673                           wreg	equ	0xFE8
 16674                           indf1	equ	0xFE7
 16675                           postdec1	equ	0xFE5
 16676                           plusw1	equ	0xFE3
 16677                           fsr1h	equ	0xFE2
 16678                           fsr1l	equ	0xFE1
 16679                           indf2	equ	0xFDF
 16680                           postinc2	equ	0xFDE
 16681                           postdec2	equ	0xFDD
 16682                           plusw2	equ	0xFDB
 16683                           fsr2h	equ	0xFDA
 16684                           fsr2l	equ	0xFD9
 16685                           status	equ	0xFD8
 16686                           
 16687 ;; *************** function i2_returnStop *****************
 16688 ;; Defined at:
 16689 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16690 ;; Parameters:    Size  Location     Type
 16691 ;;  p               2    0[COMRAM] PTR void 
 16692 ;;		 -> NULL(0), 
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;		None
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  1    wreg      enum E6842
 16697 ;; Registers used:
 16698 ;;		wreg
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16704 ;;      Params:         2       0       0       0       0       0       0
 16705 ;;      Locals:         0       0       0       0       0       0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0
 16707 ;;      Totals:         2       0       0       0       0       0       0
 16708 ;;Total ram usage:        2 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; This function calls:
 16711 ;;		Nothing
 16712 ;; This function is called by:
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text105
 16717  003252                     __ptext105:
 16718                           	opt stack 0
 16719  003252                     i2_returnStop:
 16720                           	opt stack 19
 16721                           
 16722                           ;i2c_master.c: 445: return i2c_stop;
 16723                           
 16724                           ;incstack = 0
 16725  003252  0E01               	movlw	1
 16726  003254  0012               	return	
 16727  003256                     __end_ofi2_returnStop:
 16728                           	opt stack 0
 16729                           tosu	equ	0xFFF
 16730                           tosh	equ	0xFFE
 16731                           tosl	equ	0xFFD
 16732                           pclatu	equ	0xFFB
 16733                           pclath	equ	0xFFA
 16734                           tblptru	equ	0xFF8
 16735                           tblptrh	equ	0xFF7
 16736                           tblptrl	equ	0xFF6
 16737                           tablat	equ	0xFF5
 16738                           prodh	equ	0xFF4
 16739                           prodl	equ	0xFF3
 16740                           intcon	equ	0xFF2
 16741                           intcon2	equ	0xFF1
 16742                           postinc0	equ	0xFEE
 16743                           fsr0h	equ	0xFEA
 16744                           fsr0l	equ	0xFE9
 16745                           wreg	equ	0xFE8
 16746                           indf1	equ	0xFE7
 16747                           postdec1	equ	0xFE5
 16748                           plusw1	equ	0xFE3
 16749                           fsr1h	equ	0xFE2
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           plusw2	equ	0xFDB
 16755                           fsr2h	equ	0xFDA
 16756                           fsr2l	equ	0xFD9
 16757                           status	equ	0xFD8
 16758                           
 16759 ;; *************** function i2_i2c1_driver_stop *****************
 16760 ;; Defined at:
 16761 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;		None
 16764 ;; Auto vars:     Size  Location     Type
 16765 ;;		None
 16766 ;; Return value:  Size  Location     Type
 16767 ;;                  1    wreg      void 
 16768 ;; Registers used:
 16769 ;;		None
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16775 ;;      Params:         0       0       0       0       0       0       0
 16776 ;;      Locals:         0       0       0       0       0       0       0
 16777 ;;      Temps:          0       0       0       0       0       0       0
 16778 ;;      Totals:         0       0       0       0       0       0       0
 16779 ;;Total ram usage:        0 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; This function calls:
 16782 ;;		Nothing
 16783 ;; This function is called by:
 16784 ;;		i2_do_I2C_SEND_STOP
 16785 ;; This function uses a non-reentrant model
 16786 ;;
 16787                           
 16788                           	psect	text106
 16789  003256                     __ptext106:
 16790                           	opt stack 0
 16791  003256                     i2_i2c1_driver_stop:
 16792                           	opt stack 18
 16793                           
 16794                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 16795                           
 16796                           ;incstack = 0
 16797  003256  84C5               	bsf	4037,2,c	;volatile
 16798  003258  0012               	return		;funcret
 16799  00325A                     __end_ofi2_i2c1_driver_stop:
 16800                           	opt stack 0
 16801                           tosu	equ	0xFFF
 16802                           tosh	equ	0xFFE
 16803                           tosl	equ	0xFFD
 16804                           pclatu	equ	0xFFB
 16805                           pclath	equ	0xFFA
 16806                           tblptru	equ	0xFF8
 16807                           tblptrh	equ	0xFF7
 16808                           tblptrl	equ	0xFF6
 16809                           tablat	equ	0xFF5
 16810                           prodh	equ	0xFF4
 16811                           prodl	equ	0xFF3
 16812                           intcon	equ	0xFF2
 16813                           intcon2	equ	0xFF1
 16814                           postinc0	equ	0xFEE
 16815                           fsr0h	equ	0xFEA
 16816                           fsr0l	equ	0xFE9
 16817                           wreg	equ	0xFE8
 16818                           indf1	equ	0xFE7
 16819                           postdec1	equ	0xFE5
 16820                           plusw1	equ	0xFE3
 16821                           fsr1h	equ	0xFE2
 16822                           fsr1l	equ	0xFE1
 16823                           indf2	equ	0xFDF
 16824                           postinc2	equ	0xFDE
 16825                           postdec2	equ	0xFDD
 16826                           plusw2	equ	0xFDB
 16827                           fsr2h	equ	0xFDA
 16828                           fsr2l	equ	0xFD9
 16829                           status	equ	0xFD8
 16830                           
 16831 ;; *************** function i2_i2c1_driver_restart *****************
 16832 ;; Defined at:
 16833 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;		None
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;		None
 16838 ;; Return value:  Size  Location     Type
 16839 ;;                  1    wreg      void 
 16840 ;; Registers used:
 16841 ;;		None
 16842 ;; Tracked objects:
 16843 ;;		On entry : 0/0
 16844 ;;		On exit  : 0/0
 16845 ;;		Unchanged: 0/0
 16846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16847 ;;      Params:         0       0       0       0       0       0       0
 16848 ;;      Locals:         0       0       0       0       0       0       0
 16849 ;;      Temps:          0       0       0       0       0       0       0
 16850 ;;      Totals:         0       0       0       0       0       0       0
 16851 ;;Total ram usage:        0 bytes
 16852 ;; Hardware stack levels used:    1
 16853 ;; This function calls:
 16854 ;;		Nothing
 16855 ;; This function is called by:
 16856 ;;		i2_do_I2C_SEND_RESTART_READ
 16857 ;;		i2_do_I2C_SEND_RESTART_WRITE
 16858 ;;		i2_do_I2C_SEND_RESTART
 16859 ;; This function uses a non-reentrant model
 16860 ;;
 16861                           
 16862                           	psect	text107
 16863  00325A                     __ptext107:
 16864                           	opt stack 0
 16865  00325A                     i2_i2c1_driver_restart:
 16866                           	opt stack 18
 16867                           
 16868                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 16869                           
 16870                           ;incstack = 0
 16871  00325A  82C5               	bsf	4037,1,c	;volatile
 16872  00325C  0012               	return		;funcret
 16873  00325E                     __end_ofi2_i2c1_driver_restart:
 16874                           	opt stack 0
 16875                           tosu	equ	0xFFF
 16876                           tosh	equ	0xFFE
 16877                           tosl	equ	0xFFD
 16878                           pclatu	equ	0xFFB
 16879                           pclath	equ	0xFFA
 16880                           tblptru	equ	0xFF8
 16881                           tblptrh	equ	0xFF7
 16882                           tblptrl	equ	0xFF6
 16883                           tablat	equ	0xFF5
 16884                           prodh	equ	0xFF4
 16885                           prodl	equ	0xFF3
 16886                           intcon	equ	0xFF2
 16887                           intcon2	equ	0xFF1
 16888                           postinc0	equ	0xFEE
 16889                           fsr0h	equ	0xFEA
 16890                           fsr0l	equ	0xFE9
 16891                           wreg	equ	0xFE8
 16892                           indf1	equ	0xFE7
 16893                           postdec1	equ	0xFE5
 16894                           plusw1	equ	0xFE3
 16895                           fsr1h	equ	0xFE2
 16896                           fsr1l	equ	0xFE1
 16897                           indf2	equ	0xFDF
 16898                           postinc2	equ	0xFDE
 16899                           postdec2	equ	0xFDD
 16900                           plusw2	equ	0xFDB
 16901                           fsr2h	equ	0xFDA
 16902                           fsr2l	equ	0xFD9
 16903                           status	equ	0xFD8
 16904                           
 16905 ;; *************** function i2_i2c1_driver_sendACK *****************
 16906 ;; Defined at:
 16907 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 16908 ;; Parameters:    Size  Location     Type
 16909 ;;		None
 16910 ;; Auto vars:     Size  Location     Type
 16911 ;;		None
 16912 ;; Return value:  Size  Location     Type
 16913 ;;                  1    wreg      void 
 16914 ;; Registers used:
 16915 ;;		None
 16916 ;; Tracked objects:
 16917 ;;		On entry : 0/0
 16918 ;;		On exit  : 0/0
 16919 ;;		Unchanged: 0/0
 16920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16921 ;;      Params:         0       0       0       0       0       0       0
 16922 ;;      Locals:         0       0       0       0       0       0       0
 16923 ;;      Temps:          0       0       0       0       0       0       0
 16924 ;;      Totals:         0       0       0       0       0       0       0
 16925 ;;Total ram usage:        0 bytes
 16926 ;; Hardware stack levels used:    1
 16927 ;; This function calls:
 16928 ;;		Nothing
 16929 ;; This function is called by:
 16930 ;;		i2_do_I2C_DO_ACK
 16931 ;;		i2_do_I2C_RX
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           	psect	text108
 16936  003212                     __ptext108:
 16937                           	opt stack 0
 16938  003212                     i2_i2c1_driver_sendACK:
 16939                           	opt stack 19
 16940                           
 16941                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 16942                           
 16943                           ;incstack = 0
 16944  003212  9AC5               	bcf	4037,5,c	;volatile
 16945                           
 16946                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 16947  003214  88C5               	bsf	4037,4,c	;volatile
 16948  003216  0012               	return		;funcret
 16949  003218                     __end_ofi2_i2c1_driver_sendACK:
 16950                           	opt stack 0
 16951                           tosu	equ	0xFFF
 16952                           tosh	equ	0xFFE
 16953                           tosl	equ	0xFFD
 16954                           pclatu	equ	0xFFB
 16955                           pclath	equ	0xFFA
 16956                           tblptru	equ	0xFF8
 16957                           tblptrh	equ	0xFF7
 16958                           tblptrl	equ	0xFF6
 16959                           tablat	equ	0xFF5
 16960                           prodh	equ	0xFF4
 16961                           prodl	equ	0xFF3
 16962                           intcon	equ	0xFF2
 16963                           intcon2	equ	0xFF1
 16964                           postinc0	equ	0xFEE
 16965                           fsr0h	equ	0xFEA
 16966                           fsr0l	equ	0xFE9
 16967                           wreg	equ	0xFE8
 16968                           indf1	equ	0xFE7
 16969                           postdec1	equ	0xFE5
 16970                           plusw1	equ	0xFE3
 16971                           fsr1h	equ	0xFE2
 16972                           fsr1l	equ	0xFE1
 16973                           indf2	equ	0xFDF
 16974                           postinc2	equ	0xFDE
 16975                           postdec2	equ	0xFDD
 16976                           plusw2	equ	0xFDB
 16977                           fsr2h	equ	0xFDA
 16978                           fsr2l	equ	0xFD9
 16979                           status	equ	0xFD8
 16980                           
 16981 ;; *************** function _i2c_busCollisionISR *****************
 16982 ;; Defined at:
 16983 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 16984 ;; Parameters:    Size  Location     Type
 16985 ;;		None
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;		None
 16988 ;; Return value:  Size  Location     Type
 16989 ;;                  1    wreg      void 
 16990 ;; Registers used:
 16991 ;;		cstack
 16992 ;; Tracked objects:
 16993 ;;		On entry : 0/0
 16994 ;;		On exit  : 0/0
 16995 ;;		Unchanged: 0/0
 16996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16997 ;;      Params:         0       0       0       0       0       0       0
 16998 ;;      Locals:         0       0       0       0       0       0       0
 16999 ;;      Temps:          0       0       0       0       0       0       0
 17000 ;;      Totals:         0       0       0       0       0       0       0
 17001 ;;Total ram usage:        0 bytes
 17002 ;; Hardware stack levels used:    1
 17003 ;; Hardware stack levels required when called:    1
 17004 ;; This function calls:
 17005 ;;		_i2c1_driver_clearBusCollision
 17006 ;; This function is called by:
 17007 ;;		_i2c_open
 17008 ;;		_INTERRUPT_InterruptManager
 17009 ;; This function uses a non-reentrant model
 17010 ;;
 17011                           
 17012                           	psect	text109
 17013  003218                     __ptext109:
 17014                           	opt stack 0
 17015  003218                     _i2c_busCollisionISR:
 17016                           	opt stack 20
 17017                           
 17018                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 17019                           
 17020                           ;incstack = 0
 17021  003218  EC2F  F019         	call	_i2c1_driver_clearBusCollision	;wreg free
 17022  00321C  0012               	return		;funcret
 17023  00321E                     __end_of_i2c_busCollisionISR:
 17024                           	opt stack 0
 17025                           tosu	equ	0xFFF
 17026                           tosh	equ	0xFFE
 17027                           tosl	equ	0xFFD
 17028                           pclatu	equ	0xFFB
 17029                           pclath	equ	0xFFA
 17030                           tblptru	equ	0xFF8
 17031                           tblptrh	equ	0xFF7
 17032                           tblptrl	equ	0xFF6
 17033                           tablat	equ	0xFF5
 17034                           prodh	equ	0xFF4
 17035                           prodl	equ	0xFF3
 17036                           intcon	equ	0xFF2
 17037                           intcon2	equ	0xFF1
 17038                           postinc0	equ	0xFEE
 17039                           fsr0h	equ	0xFEA
 17040                           fsr0l	equ	0xFE9
 17041                           wreg	equ	0xFE8
 17042                           indf1	equ	0xFE7
 17043                           postdec1	equ	0xFE5
 17044                           plusw1	equ	0xFE3
 17045                           fsr1h	equ	0xFE2
 17046                           fsr1l	equ	0xFE1
 17047                           indf2	equ	0xFDF
 17048                           postinc2	equ	0xFDE
 17049                           postdec2	equ	0xFDD
 17050                           plusw2	equ	0xFDB
 17051                           fsr2h	equ	0xFDA
 17052                           fsr2l	equ	0xFD9
 17053                           status	equ	0xFD8
 17054                           
 17055 ;; *************** function _i2c1_driver_clearBusCollision *****************
 17056 ;; Defined at:
 17057 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 17058 ;; Parameters:    Size  Location     Type
 17059 ;;		None
 17060 ;; Auto vars:     Size  Location     Type
 17061 ;;		None
 17062 ;; Return value:  Size  Location     Type
 17063 ;;                  1    wreg      void 
 17064 ;; Registers used:
 17065 ;;		None
 17066 ;; Tracked objects:
 17067 ;;		On entry : 0/0
 17068 ;;		On exit  : 0/0
 17069 ;;		Unchanged: 0/0
 17070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17071 ;;      Params:         0       0       0       0       0       0       0
 17072 ;;      Locals:         0       0       0       0       0       0       0
 17073 ;;      Temps:          0       0       0       0       0       0       0
 17074 ;;      Totals:         0       0       0       0       0       0       0
 17075 ;;Total ram usage:        0 bytes
 17076 ;; Hardware stack levels used:    1
 17077 ;; This function calls:
 17078 ;;		Nothing
 17079 ;; This function is called by:
 17080 ;;		_i2c_busCollisionISR
 17081 ;; This function uses a non-reentrant model
 17082 ;;
 17083                           
 17084                           	psect	text110
 17085  00325E                     __ptext110:
 17086                           	opt stack 0
 17087  00325E                     _i2c1_driver_clearBusCollision:
 17088                           	opt stack 20
 17089                           
 17090                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
 17091                           
 17092                           ;incstack = 0
 17093  00325E  96A1               	bcf	4001,3,c	;volatile
 17094  003260  0012               	return		;funcret
 17095  003262                     __end_of_i2c1_driver_clearBusCollision:
 17096                           	opt stack 0
 17097                           tosu	equ	0xFFF
 17098                           tosh	equ	0xFFE
 17099                           tosl	equ	0xFFD
 17100                           pclatu	equ	0xFFB
 17101                           pclath	equ	0xFFA
 17102                           tblptru	equ	0xFF8
 17103                           tblptrh	equ	0xFF7
 17104                           tblptrl	equ	0xFF6
 17105                           tablat	equ	0xFF5
 17106                           prodh	equ	0xFF4
 17107                           prodl	equ	0xFF3
 17108                           intcon	equ	0xFF2
 17109                           intcon2	equ	0xFF1
 17110                           postinc0	equ	0xFEE
 17111                           fsr0h	equ	0xFEA
 17112                           fsr0l	equ	0xFE9
 17113                           wreg	equ	0xFE8
 17114                           indf1	equ	0xFE7
 17115                           postdec1	equ	0xFE5
 17116                           plusw1	equ	0xFE3
 17117                           fsr1h	equ	0xFE2
 17118                           fsr1l	equ	0xFE1
 17119                           indf2	equ	0xFDF
 17120                           postinc2	equ	0xFDE
 17121                           postdec2	equ	0xFDD
 17122                           plusw2	equ	0xFDB
 17123                           fsr2h	equ	0xFDA
 17124                           fsr2l	equ	0xFD9
 17125                           status	equ	0xFD8
 17126                           
 17127 ;; *************** function _EUSART2_Transmit_ISR *****************
 17128 ;; Defined at:
 17129 ;;		line 157 in file "mcc_generated_files/eusart2.c"
 17130 ;; Parameters:    Size  Location     Type
 17131 ;;		None
 17132 ;; Auto vars:     Size  Location     Type
 17133 ;;		None
 17134 ;; Return value:  Size  Location     Type
 17135 ;;                  1    wreg      void 
 17136 ;; Registers used:
 17137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17138 ;; Tracked objects:
 17139 ;;		On entry : 0/0
 17140 ;;		On exit  : 0/0
 17141 ;;		Unchanged: 0/0
 17142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17143 ;;      Params:         0       0       0       0       0       0       0
 17144 ;;      Locals:         0       0       0       0       0       0       0
 17145 ;;      Temps:          0       0       0       0       0       0       0
 17146 ;;      Totals:         0       0       0       0       0       0       0
 17147 ;;Total ram usage:        0 bytes
 17148 ;; Hardware stack levels used:    1
 17149 ;; This function calls:
 17150 ;;		Nothing
 17151 ;; This function is called by:
 17152 ;;		_EUSART2_Initialize
 17153 ;;		_INTERRUPT_InterruptManager
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           	psect	text111
 17158  002E44                     __ptext111:
 17159                           	opt stack 0
 17160  002E44                     _EUSART2_Transmit_ISR:
 17161                           	opt stack 21
 17162                           
 17163                           ;eusart2.c: 161: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 17164                           
 17165                           ;incstack = 0
 17166  002E44  0E08               	movlw	8
 17167  002E46  6046               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 17168  002E48  D012               	goto	i2l668
 17169                           
 17170                           ;eusart2.c: 162: {
 17171                           ;eusart2.c: 163: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
 17172  002E4A  503E               	movf	_eusart2TxTail,w,c	;volatile
 17173  002E4C  0D01               	mullw	1
 17174  002E4E  0EF0               	movlw	low _eusart2TxBuffer
 17175  002E50  24F3               	addwf	prodl,w,c
 17176  002E52  6ED9               	movwf	fsr2l,c
 17177  002E54  0E00               	movlw	high _eusart2TxBuffer
 17178  002E56  20F4               	addwfc	prodh,w,c
 17179  002E58  6EDA               	movwf	fsr2h,c
 17180  002E5A  50DF               	movf	indf2,w,c
 17181  002E5C  6E73               	movwf	3955,c	;volatile
 17182  002E5E  2A3E               	incf	_eusart2TxTail,f,c	;volatile
 17183                           
 17184                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 17185  002E60  0E07               	movlw	7
 17186  002E62  643E               	cpfsgt	_eusart2TxTail,c	;volatile
 17187  002E64  D002               	goto	i2l669
 17188                           
 17189                           ;eusart2.c: 165: {
 17190                           ;eusart2.c: 166: eusart2TxTail = 0;
 17191  002E66  0E00               	movlw	0
 17192  002E68  6E3E               	movwf	_eusart2TxTail,c	;volatile
 17193  002E6A                     i2l669:
 17194                           
 17195                           ;eusart2.c: 167: }
 17196                           ;eusart2.c: 168: eusart2TxBufferRemaining++;
 17197  002E6A  2A46               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 17198                           
 17199                           ;eusart2.c: 169: }
 17200  002E6C  0012               	return	
 17201  002E6E                     i2l668:
 17202                           
 17203                           ;eusart2.c: 170: else
 17204                           ;eusart2.c: 171: {
 17205                           ;eusart2.c: 172: PIE3bits.TX2IE = 0;
 17206  002E6E  98A3               	bcf	4003,4,c	;volatile
 17207  002E70  0012               	return	
 17208  002E72                     __end_of_EUSART2_Transmit_ISR:
 17209                           	opt stack 0
 17210                           tosu	equ	0xFFF
 17211                           tosh	equ	0xFFE
 17212                           tosl	equ	0xFFD
 17213                           pclatu	equ	0xFFB
 17214                           pclath	equ	0xFFA
 17215                           tblptru	equ	0xFF8
 17216                           tblptrh	equ	0xFF7
 17217                           tblptrl	equ	0xFF6
 17218                           tablat	equ	0xFF5
 17219                           prodh	equ	0xFF4
 17220                           prodl	equ	0xFF3
 17221                           intcon	equ	0xFF2
 17222                           intcon2	equ	0xFF1
 17223                           postinc0	equ	0xFEE
 17224                           fsr0h	equ	0xFEA
 17225                           fsr0l	equ	0xFE9
 17226                           wreg	equ	0xFE8
 17227                           indf1	equ	0xFE7
 17228                           postdec1	equ	0xFE5
 17229                           plusw1	equ	0xFE3
 17230                           fsr1h	equ	0xFE2
 17231                           fsr1l	equ	0xFE1
 17232                           indf2	equ	0xFDF
 17233                           postinc2	equ	0xFDE
 17234                           postdec2	equ	0xFDD
 17235                           plusw2	equ	0xFDB
 17236                           fsr2h	equ	0xFDA
 17237                           fsr2l	equ	0xFD9
 17238                           status	equ	0xFD8
 17239                           
 17240 ;; *************** function _EUSART2_Receive_ISR *****************
 17241 ;; Defined at:
 17242 ;;		line 199 in file "mcc_generated_files/eusart2.c"
 17243 ;; Parameters:    Size  Location     Type
 17244 ;;		None
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;  temp            1    2[COMRAM] unsigned char 
 17247 ;;  temp            1    1[COMRAM] unsigned char 
 17248 ;; Return value:  Size  Location     Type
 17249 ;;                  1    wreg      void 
 17250 ;; Registers used:
 17251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17252 ;; Tracked objects:
 17253 ;;		On entry : 0/0
 17254 ;;		On exit  : 0/0
 17255 ;;		Unchanged: 0/0
 17256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17257 ;;      Params:         0       0       0       0       0       0       0
 17258 ;;      Locals:         2       0       0       0       0       0       0
 17259 ;;      Temps:          1       0       0       0       0       0       0
 17260 ;;      Totals:         3       0       0       0       0       0       0
 17261 ;;Total ram usage:        3 bytes
 17262 ;; Hardware stack levels used:    1
 17263 ;; This function calls:
 17264 ;;		Nothing
 17265 ;; This function is called by:
 17266 ;;		_EUSART2_Initialize
 17267 ;;		_INTERRUPT_InterruptManager
 17268 ;; This function uses a non-reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text112
 17272  002820                     __ptext112:
 17273                           	opt stack 0
 17274  002820                     _EUSART2_Receive_ISR:
 17275                           	opt stack 21
 17276                           
 17277                           ;eusart2.c: 201: if(1 == RCSTA2bits.OERR)
 17278                           
 17279                           ;incstack = 0
 17280  002820  A271               	btfss	3953,1,c	;volatile
 17281  002822  D002               	goto	i2l674
 17282                           
 17283                           ;eusart2.c: 202: {
 17284                           ;eusart2.c: 205: RCSTA2bits.CREN = 0;
 17285  002824  9871               	bcf	3953,4,c	;volatile
 17286                           
 17287                           ;eusart2.c: 206: RCSTA2bits.CREN = 1;
 17288  002826  8871               	bsf	3953,4,c	;volatile
 17289  002828                     i2l674:
 17290                           
 17291                           ;eusart2.c: 207: }
 17292                           ;eusart2.c: 209: if(receiveStateFeedBack == RECEIVINGFEEDBACK) {
 17293  002828  5040               	movf	_receiveStateFeedBack,w,c
 17294  00282A  A4D8               	btfss	status,2,c
 17295  00282C  D020               	goto	i2l675
 17296                           
 17297                           ;eusart2.c: 210: eusart2RxBuffer[eusart2RxHead] = RCREG2;
 17298  00282E  503D               	movf	_eusart2RxHead,w,c	;volatile
 17299  002830  0D01               	mullw	1
 17300  002832  0EE8               	movlw	low _eusart2RxBuffer
 17301  002834  24F3               	addwf	prodl,w,c
 17302  002836  6ED9               	movwf	fsr2l,c
 17303  002838  0E00               	movlw	high _eusart2RxBuffer
 17304  00283A  20F4               	addwfc	prodh,w,c
 17305  00283C  6EDA               	movwf	fsr2h,c
 17306  00283E  CF74 FFDF          	movff	3956,indf2	;volatile
 17307                           
 17308                           ;eusart2.c: 213: if(eusart2RxBuffer[eusart2RxHead] == 13) {
 17309  002842  503D               	movf	_eusart2RxHead,w,c	;volatile
 17310  002844  0D01               	mullw	1
 17311  002846  0EE8               	movlw	low _eusart2RxBuffer
 17312  002848  24F3               	addwf	prodl,w,c
 17313  00284A  6ED9               	movwf	fsr2l,c
 17314  00284C  0E00               	movlw	high _eusart2RxBuffer
 17315  00284E  20F4               	addwfc	prodh,w,c
 17316  002850  6EDA               	movwf	fsr2h,c
 17317  002852  0E0D               	movlw	13
 17318  002854  18DE               	xorwf	postinc2,w,c
 17319  002856  A4D8               	btfss	status,2,c
 17320  002858  D002               	goto	i2l676
 17321                           
 17322                           ;eusart2.c: 214: receiveStateFeedBack = RECEIVEDFEEDBACK;
 17323  00285A  0E01               	movlw	1
 17324  00285C  6E40               	movwf	_receiveStateFeedBack,c
 17325  00285E                     i2l676:
 17326                           
 17327                           ;eusart2.c: 215: }
 17328                           ;eusart2.c: 218: if(8 <= eusart2RxHead) {
 17329  00285E  0E07               	movlw	7
 17330  002860  643D               	cpfsgt	_eusart2RxHead,c	;volatile
 17331  002862  D002               	goto	i2l677
 17332                           
 17333                           ;eusart2.c: 219: receiveStateFeedBack = OFFEEDBACK;
 17334  002864  0E02               	movlw	2
 17335  002866  6E40               	movwf	_receiveStateFeedBack,c
 17336  002868                     i2l677:
 17337                           
 17338                           ;eusart2.c: 220: }
 17339                           ;eusart2.c: 222: eusart2RxHead++;
 17340  002868  2A3D               	incf	_eusart2RxHead,f,c	;volatile
 17341                           
 17342                           ;eusart2.c: 223: eusart2RxCount++;
 17343  00286A  2A3B               	incf	_eusart2RxCount,f,c	;volatile
 17344                           
 17345                           ;eusart2.c: 224: } else if(receiveStateFeedBack == RECEIVEDFEEDBACK || receiveStateFeedB
      +                          ack == OFFEEDBACK) {
 17346  00286C  0012               	return	
 17347  00286E                     i2l675:
 17348  00286E  0440               	decf	_receiveStateFeedBack,w,c
 17349  002870  B4D8               	btfsc	status,2,c
 17350  002872  D004               	goto	i2u404_40
 17351  002874  0E02               	movlw	2
 17352  002876  1840               	xorwf	_receiveStateFeedBack,w,c
 17353  002878  A4D8               	btfss	status,2,c
 17354  00287A  D003               	goto	i2l679
 17355  00287C                     i2u404_40:
 17356                           
 17357                           ;eusart2.c: 225: uint8_t temp = RCREG2;
 17358  00287C  CF74 F002          	movff	3956,EUSART2_Receive_ISR@temp	;volatile
 17359                           
 17360                           ;eusart2.c: 226: } else {
 17361  002880  0012               	return	
 17362  002882                     i2l679:
 17363                           
 17364                           ;eusart2.c: 227: uint8_t temp = RCREG2;
 17365  002882  CF74 F003          	movff	3956,EUSART2_Receive_ISR@temp_1598	;volatile
 17366  002886  0012               	return	
 17367  002888                     __end_of_EUSART2_Receive_ISR:
 17368                           	opt stack 0
 17369                           tosu	equ	0xFFF
 17370                           tosh	equ	0xFFE
 17371                           tosl	equ	0xFFD
 17372                           pclatu	equ	0xFFB
 17373                           pclath	equ	0xFFA
 17374                           tblptru	equ	0xFF8
 17375                           tblptrh	equ	0xFF7
 17376                           tblptrl	equ	0xFF6
 17377                           tablat	equ	0xFF5
 17378                           prodh	equ	0xFF4
 17379                           prodl	equ	0xFF3
 17380                           intcon	equ	0xFF2
 17381                           intcon2	equ	0xFF1
 17382                           postinc0	equ	0xFEE
 17383                           fsr0h	equ	0xFEA
 17384                           fsr0l	equ	0xFE9
 17385                           wreg	equ	0xFE8
 17386                           indf1	equ	0xFE7
 17387                           postdec1	equ	0xFE5
 17388                           plusw1	equ	0xFE3
 17389                           fsr1h	equ	0xFE2
 17390                           fsr1l	equ	0xFE1
 17391                           indf2	equ	0xFDF
 17392                           postinc2	equ	0xFDE
 17393                           postdec2	equ	0xFDD
 17394                           plusw2	equ	0xFDB
 17395                           fsr2h	equ	0xFDA
 17396                           fsr2l	equ	0xFD9
 17397                           status	equ	0xFD8
 17398                           
 17399 ;; *************** function _EUSART1_Transmit_ISR *****************
 17400 ;; Defined at:
 17401 ;;		line 143 in file "mcc_generated_files/eusart1.c"
 17402 ;; Parameters:    Size  Location     Type
 17403 ;;		None
 17404 ;; Auto vars:     Size  Location     Type
 17405 ;;		None
 17406 ;; Return value:  Size  Location     Type
 17407 ;;                  1    wreg      void 
 17408 ;; Registers used:
 17409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17410 ;; Tracked objects:
 17411 ;;		On entry : 0/0
 17412 ;;		On exit  : 0/0
 17413 ;;		Unchanged: 0/0
 17414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17415 ;;      Params:         0       0       0       0       0       0       0
 17416 ;;      Locals:         0       0       0       0       0       0       0
 17417 ;;      Temps:          0       0       0       0       0       0       0
 17418 ;;      Totals:         0       0       0       0       0       0       0
 17419 ;;Total ram usage:        0 bytes
 17420 ;; Hardware stack levels used:    1
 17421 ;; This function calls:
 17422 ;;		Nothing
 17423 ;; This function is called by:
 17424 ;;		_INTERRUPT_InterruptManager
 17425 ;; This function uses a non-reentrant model
 17426 ;;
 17427                           
 17428                           	psect	text113
 17429  002E72                     __ptext113:
 17430                           	opt stack 0
 17431  002E72                     _EUSART1_Transmit_ISR:
 17432                           	opt stack 21
 17433                           
 17434                           ;eusart1.c: 147: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17435                           
 17436                           ;incstack = 0
 17437  002E72  0E10               	movlw	16
 17438  002E74  6045               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 17439  002E76  D012               	goto	i2l755
 17440                           
 17441                           ;eusart1.c: 148: {
 17442                           ;eusart1.c: 149: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17443  002E78  5038               	movf	_eusart1TxTail,w,c	;volatile
 17444  002E7A  0D01               	mullw	1
 17445  002E7C  0E68               	movlw	low _eusart1TxBuffer
 17446  002E7E  24F3               	addwf	prodl,w,c
 17447  002E80  6ED9               	movwf	fsr2l,c
 17448  002E82  0E01               	movlw	high _eusart1TxBuffer
 17449  002E84  20F4               	addwfc	prodh,w,c
 17450  002E86  6EDA               	movwf	fsr2h,c
 17451  002E88  50DF               	movf	indf2,w,c
 17452  002E8A  6EAD               	movwf	4013,c	;volatile
 17453  002E8C  2A38               	incf	_eusart1TxTail,f,c	;volatile
 17454                           
 17455                           ;eusart1.c: 150: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17456  002E8E  0E0F               	movlw	15
 17457  002E90  6438               	cpfsgt	_eusart1TxTail,c	;volatile
 17458  002E92  D002               	goto	i2l756
 17459                           
 17460                           ;eusart1.c: 151: {
 17461                           ;eusart1.c: 152: eusart1TxTail = 0;
 17462  002E94  0E00               	movlw	0
 17463  002E96  6E38               	movwf	_eusart1TxTail,c	;volatile
 17464  002E98                     i2l756:
 17465                           
 17466                           ;eusart1.c: 153: }
 17467                           ;eusart1.c: 154: eusart1TxBufferRemaining++;
 17468  002E98  2A45               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 17469                           
 17470                           ;eusart1.c: 155: }
 17471  002E9A  0012               	return	
 17472  002E9C                     i2l755:
 17473                           
 17474                           ;eusart1.c: 156: else
 17475                           ;eusart1.c: 157: {
 17476                           ;eusart1.c: 158: PIE1bits.TX1IE = 0;
 17477  002E9C  989D               	bcf	3997,4,c	;volatile
 17478  002E9E  0012               	return	
 17479  002EA0                     __end_of_EUSART1_Transmit_ISR:
 17480                           	opt stack 0
 17481                           tosu	equ	0xFFF
 17482                           tosh	equ	0xFFE
 17483                           tosl	equ	0xFFD
 17484                           pclatu	equ	0xFFB
 17485                           pclath	equ	0xFFA
 17486                           tblptru	equ	0xFF8
 17487                           tblptrh	equ	0xFF7
 17488                           tblptrl	equ	0xFF6
 17489                           tablat	equ	0xFF5
 17490                           prodh	equ	0xFF4
 17491                           prodl	equ	0xFF3
 17492                           intcon	equ	0xFF2
 17493                           intcon2	equ	0xFF1
 17494                           postinc0	equ	0xFEE
 17495                           fsr0h	equ	0xFEA
 17496                           fsr0l	equ	0xFE9
 17497                           wreg	equ	0xFE8
 17498                           indf1	equ	0xFE7
 17499                           postdec1	equ	0xFE5
 17500                           plusw1	equ	0xFE3
 17501                           fsr1h	equ	0xFE2
 17502                           fsr1l	equ	0xFE1
 17503                           indf2	equ	0xFDF
 17504                           postinc2	equ	0xFDE
 17505                           postdec2	equ	0xFDD
 17506                           plusw2	equ	0xFDB
 17507                           fsr2h	equ	0xFDA
 17508                           fsr2l	equ	0xFD9
 17509                           status	equ	0xFD8
 17510                           
 17511 ;; *************** function _EUSART1_Receive_ISR *****************
 17512 ;; Defined at:
 17513 ;;		line 164 in file "mcc_generated_files/eusart1.c"
 17514 ;; Parameters:    Size  Location     Type
 17515 ;;		None
 17516 ;; Auto vars:     Size  Location     Type
 17517 ;;  temp            1    4[COMRAM] unsigned char 
 17518 ;;  temp            1    3[COMRAM] unsigned char 
 17519 ;;  receivedChar    1    5[COMRAM] unsigned char 
 17520 ;; Return value:  Size  Location     Type
 17521 ;;                  1    wreg      void 
 17522 ;; Registers used:
 17523 ;;		wreg, status,2, status,0, cstack
 17524 ;; Tracked objects:
 17525 ;;		On entry : 0/0
 17526 ;;		On exit  : 0/0
 17527 ;;		Unchanged: 0/0
 17528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17529 ;;      Params:         0       0       0       0       0       0       0
 17530 ;;      Locals:         3       0       0       0       0       0       0
 17531 ;;      Temps:          0       0       0       0       0       0       0
 17532 ;;      Totals:         3       0       0       0       0       0       0
 17533 ;;Total ram usage:        3 bytes
 17534 ;; Hardware stack levels used:    1
 17535 ;; Hardware stack levels required when called:    1
 17536 ;; This function calls:
 17537 ;;		_sram_write
 17538 ;; This function is called by:
 17539 ;;		_INTERRUPT_InterruptManager
 17540 ;; This function uses a non-reentrant model
 17541 ;;
 17542                           
 17543                           	psect	text114
 17544  002B60                     __ptext114:
 17545                           	opt stack 0
 17546  002B60                     _EUSART1_Receive_ISR:
 17547                           	opt stack 20
 17548                           
 17549                           ;eusart1.c: 166: if(1 == RCSTA1bits.OERR)
 17550                           
 17551                           ;incstack = 0
 17552  002B60  A2AB               	btfss	4011,1,c	;volatile
 17553  002B62  D002               	goto	i2l761
 17554                           
 17555                           ;eusart1.c: 167: {
 17556                           ;eusart1.c: 170: RCSTA1bits.CREN = 0;
 17557  002B64  98AB               	bcf	4011,4,c	;volatile
 17558                           
 17559                           ;eusart1.c: 171: RCSTA1bits.CREN = 1;
 17560  002B66  88AB               	bsf	4011,4,c	;volatile
 17561  002B68                     i2l761:
 17562                           
 17563                           ;eusart1.c: 172: }
 17564                           ;eusart1.c: 174: if(receiveState == RECEIVING) {
 17565  002B68  503A               	movf	_receiveState,w,c
 17566  002B6A  A4D8               	btfss	status,2,c
 17567  002B6C  D015               	goto	i2l762
 17568                           
 17569                           ;eusart1.c: 176: uint8_t receivedChar = RCREG1;
 17570  002B6E  CFAE F006          	movff	4014,EUSART1_Receive_ISR@receivedChar	;volatile
 17571                           
 17572                           ;eusart1.c: 177: sram_write(eusart1RxHead, receivedChar);
 17573  002B72  C006  F001         	movff	EUSART1_Receive_ISR@receivedChar,sram_write@data
 17574  002B76  5037               	movf	_eusart1RxHead,w,c	;volatile
 17575  002B78  EC50  F017         	call	_sram_write
 17576                           
 17577                           ;eusart1.c: 180: if(receivedChar == 13) {
 17578  002B7C  0E0D               	movlw	13
 17579  002B7E  1806               	xorwf	EUSART1_Receive_ISR@receivedChar,w,c
 17580  002B80  A4D8               	btfss	status,2,c
 17581  002B82  D002               	goto	i2l763
 17582                           
 17583                           ;eusart1.c: 181: receiveState = RECEIVED;
 17584  002B84  0E01               	movlw	1
 17585  002B86  6E3A               	movwf	_receiveState,c
 17586  002B88                     i2l763:
 17587                           
 17588                           ;eusart1.c: 182: }
 17589                           ;eusart1.c: 185: if(16 <= eusart1RxHead) {
 17590  002B88  0E0F               	movlw	15
 17591  002B8A  6437               	cpfsgt	_eusart1RxHead,c	;volatile
 17592  002B8C  D002               	goto	i2l764
 17593                           
 17594                           ;eusart1.c: 186: receiveState = OF;
 17595  002B8E  0E02               	movlw	2
 17596  002B90  6E3A               	movwf	_receiveState,c
 17597  002B92                     i2l764:
 17598                           
 17599                           ;eusart1.c: 187: }
 17600                           ;eusart1.c: 189: eusart1RxHead++;
 17601  002B92  2A37               	incf	_eusart1RxHead,f,c	;volatile
 17602                           
 17603                           ;eusart1.c: 190: eusart1RxCount++;
 17604  002B94  2A35               	incf	_eusart1RxCount,f,c	;volatile
 17605                           
 17606                           ;eusart1.c: 191: } else if(receiveState == RECEIVED || receiveState == OF) {
 17607  002B96  0012               	return	
 17608  002B98                     i2l762:
 17609  002B98  043A               	decf	_receiveState,w,c
 17610  002B9A  B4D8               	btfsc	status,2,c
 17611  002B9C  D004               	goto	i2u396_40
 17612  002B9E  0E02               	movlw	2
 17613  002BA0  183A               	xorwf	_receiveState,w,c
 17614  002BA2  A4D8               	btfss	status,2,c
 17615  002BA4  D003               	goto	i2l766
 17616  002BA6                     i2u396_40:
 17617                           
 17618                           ;eusart1.c: 192: uint8_t temp = RCREG1;
 17619  002BA6  CFAE F004          	movff	4014,EUSART1_Receive_ISR@temp	;volatile
 17620                           
 17621                           ;eusart1.c: 193: } else {
 17622  002BAA  0012               	return	
 17623  002BAC                     i2l766:
 17624                           
 17625                           ;eusart1.c: 194: uint8_t temp = RCREG1;
 17626  002BAC  CFAE F005          	movff	4014,EUSART1_Receive_ISR@temp_1741	;volatile
 17627  002BB0  0012               	return	
 17628  002BB2                     __end_of_EUSART1_Receive_ISR:
 17629                           	opt stack 0
 17630                           tosu	equ	0xFFF
 17631                           tosh	equ	0xFFE
 17632                           tosl	equ	0xFFD
 17633                           pclatu	equ	0xFFB
 17634                           pclath	equ	0xFFA
 17635                           tblptru	equ	0xFF8
 17636                           tblptrh	equ	0xFF7
 17637                           tblptrl	equ	0xFF6
 17638                           tablat	equ	0xFF5
 17639                           prodh	equ	0xFF4
 17640                           prodl	equ	0xFF3
 17641                           intcon	equ	0xFF2
 17642                           intcon2	equ	0xFF1
 17643                           postinc0	equ	0xFEE
 17644                           fsr0h	equ	0xFEA
 17645                           fsr0l	equ	0xFE9
 17646                           wreg	equ	0xFE8
 17647                           indf1	equ	0xFE7
 17648                           postdec1	equ	0xFE5
 17649                           plusw1	equ	0xFE3
 17650                           fsr1h	equ	0xFE2
 17651                           fsr1l	equ	0xFE1
 17652                           indf2	equ	0xFDF
 17653                           postinc2	equ	0xFDE
 17654                           postdec2	equ	0xFDD
 17655                           plusw2	equ	0xFDB
 17656                           fsr2h	equ	0xFDA
 17657                           fsr2l	equ	0xFD9
 17658                           status	equ	0xFD8
 17659                           
 17660 ;; *************** function _sram_write *****************
 17661 ;; Defined at:
 17662 ;;		line 50 in file "sram_control.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;  address         1    wreg     unsigned char 
 17665 ;;  data            1    0[COMRAM] unsigned char 
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;  address         1    2[COMRAM] unsigned char 
 17668 ;; Return value:  Size  Location     Type
 17669 ;;                  1    wreg      void 
 17670 ;; Registers used:
 17671 ;;		wreg, status,2, status,0
 17672 ;; Tracked objects:
 17673 ;;		On entry : 0/0
 17674 ;;		On exit  : 0/0
 17675 ;;		Unchanged: 0/0
 17676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17677 ;;      Params:         1       0       0       0       0       0       0
 17678 ;;      Locals:         1       0       0       0       0       0       0
 17679 ;;      Temps:          1       0       0       0       0       0       0
 17680 ;;      Totals:         3       0       0       0       0       0       0
 17681 ;;Total ram usage:        3 bytes
 17682 ;; Hardware stack levels used:    1
 17683 ;; This function calls:
 17684 ;;		Nothing
 17685 ;; This function is called by:
 17686 ;;		_EUSART1_Receive_ISR
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           	psect	text115
 17691  002EA0                     __ptext115:
 17692                           	opt stack 0
 17693  002EA0                     _sram_write:
 17694                           	opt stack 20
 17695                           
 17696                           ;incstack = 0
 17697                           ;sram_write@address stored from wreg
 17698  002EA0  6E03               	movwf	sram_write@address,c
 17699                           
 17700                           ;sram_control.c: 52: PORTBbits.RB6 = 1;
 17701  002EA2  8C81               	bsf	3969,6,c	;volatile
 17702                           
 17703                           ;sram_control.c: 53: PORTBbits.RB5 = 0;
 17704  002EA4  9A81               	bcf	3969,5,c	;volatile
 17705                           
 17706                           ;sram_control.c: 54: PORTB = (PORTB & 0xE0) | (address & 0x1F);
 17707  002EA6  C003  F002         	movff	sram_write@address,??_sram_write
 17708  002EAA  0E1F               	movlw	31
 17709  002EAC  1602               	andwf	??_sram_write,f,c
 17710  002EAE  5081               	movf	3969,w,c	;volatile
 17711  002EB0  0BE0               	andlw	224
 17712  002EB2  1002               	iorwf	??_sram_write,w,c
 17713  002EB4  6E81               	movwf	3969,c	;volatile
 17714                           
 17715                           ;sram_control.c: 57: TRISA = 0x00;
 17716  002EB6  0E00               	movlw	0
 17717  002EB8  6E92               	movwf	3986,c	;volatile
 17718                           
 17719                           ;sram_control.c: 60: PORTA = data;
 17720  002EBA  C001  FF80         	movff	sram_write@data,3968	;volatile
 17721                           
 17722                           ;sram_control.c: 62: _delay((unsigned long)((1)*(16000000/4000000.0)));
 17723  002EBE  D000               	nop2		;2 cycle nop
 17724  002EC0  D000               	nop2		;2 cycle nop
 17725                           
 17726                           ;sram_control.c: 65: PORTBbits.RB5 = 1;
 17727  002EC2  8A81               	bsf	3969,5,c	;volatile
 17728                           
 17729                           ;sram_control.c: 66: _delay((unsigned long)((1)*(16000000/4000000.0)));
 17730  002EC4  D000               	nop2		;2 cycle nop
 17731  002EC6  D000               	nop2		;2 cycle nop
 17732                           
 17733                           ;sram_control.c: 69: PORTBbits.RB6 = 1;
 17734  002EC8  8C81               	bsf	3969,6,c	;volatile
 17735                           
 17736                           ;sram_control.c: 70: TRISA = 0xFF;
 17737  002ECA  6892               	setf	3986,c	;volatile
 17738  002ECC  0012               	return		;funcret
 17739  002ECE                     __end_of_sram_write:
 17740                           	opt stack 0
 17741                           tosu	equ	0xFFF
 17742                           tosh	equ	0xFFE
 17743                           tosl	equ	0xFFD
 17744                           pclatu	equ	0xFFB
 17745                           pclath	equ	0xFFA
 17746                           tblptru	equ	0xFF8
 17747                           tblptrh	equ	0xFF7
 17748                           tblptrl	equ	0xFF6
 17749                           tablat	equ	0xFF5
 17750                           prodh	equ	0xFF4
 17751                           prodl	equ	0xFF3
 17752                           intcon	equ	0xFF2
 17753                           intcon2	equ	0xFF1
 17754                           postinc0	equ	0xFEE
 17755                           fsr0h	equ	0xFEA
 17756                           fsr0l	equ	0xFE9
 17757                           wreg	equ	0xFE8
 17758                           indf1	equ	0xFE7
 17759                           postdec1	equ	0xFE5
 17760                           plusw1	equ	0xFE3
 17761                           fsr1h	equ	0xFE2
 17762                           fsr1l	equ	0xFE1
 17763                           indf2	equ	0xFDF
 17764                           postinc2	equ	0xFDE
 17765                           postdec2	equ	0xFDD
 17766                           plusw2	equ	0xFDB
 17767                           fsr2h	equ	0xFDA
 17768                           fsr2l	equ	0xFD9
 17769                           status	equ	0xFD8
 17770                           tosu	equ	0xFFF
 17771                           tosh	equ	0xFFE
 17772                           tosl	equ	0xFFD
 17773                           pclatu	equ	0xFFB
 17774                           pclath	equ	0xFFA
 17775                           tblptru	equ	0xFF8
 17776                           tblptrh	equ	0xFF7
 17777                           tblptrl	equ	0xFF6
 17778                           tablat	equ	0xFF5
 17779                           prodh	equ	0xFF4
 17780                           prodl	equ	0xFF3
 17781                           intcon	equ	0xFF2
 17782                           intcon2	equ	0xFF1
 17783                           postinc0	equ	0xFEE
 17784                           fsr0h	equ	0xFEA
 17785                           fsr0l	equ	0xFE9
 17786                           wreg	equ	0xFE8
 17787                           indf1	equ	0xFE7
 17788                           postdec1	equ	0xFE5
 17789                           plusw1	equ	0xFE3
 17790                           fsr1h	equ	0xFE2
 17791                           fsr1l	equ	0xFE1
 17792                           indf2	equ	0xFDF
 17793                           postinc2	equ	0xFDE
 17794                           postdec2	equ	0xFDD
 17795                           plusw2	equ	0xFDB
 17796                           fsr2h	equ	0xFDA
 17797                           fsr2l	equ	0xFD9
 17798                           status	equ	0xFD8
 17799                           
 17800                           	psect	text116
 17801  000000                     __ptext116:
 17802                           	opt stack 0
 17803                           tosu	equ	0xFFF
 17804                           tosh	equ	0xFFE
 17805                           tosl	equ	0xFFD
 17806                           pclatu	equ	0xFFB
 17807                           pclath	equ	0xFFA
 17808                           tblptru	equ	0xFF8
 17809                           tblptrh	equ	0xFF7
 17810                           tblptrl	equ	0xFF6
 17811                           tablat	equ	0xFF5
 17812                           prodh	equ	0xFF4
 17813                           prodl	equ	0xFF3
 17814                           intcon	equ	0xFF2
 17815                           intcon2	equ	0xFF1
 17816                           postinc0	equ	0xFEE
 17817                           fsr0h	equ	0xFEA
 17818                           fsr0l	equ	0xFE9
 17819                           wreg	equ	0xFE8
 17820                           indf1	equ	0xFE7
 17821                           postdec1	equ	0xFE5
 17822                           plusw1	equ	0xFE3
 17823                           fsr1h	equ	0xFE2
 17824                           fsr1l	equ	0xFE1
 17825                           indf2	equ	0xFDF
 17826                           postinc2	equ	0xFDE
 17827                           postdec2	equ	0xFDD
 17828                           plusw2	equ	0xFDB
 17829                           fsr2h	equ	0xFDA
 17830                           fsr2l	equ	0xFD9
 17831                           status	equ	0xFD8
 17832                           
 17833                           	psect	rparam
 17834  0000                     tosu	equ	0xFFF
 17835                           tosh	equ	0xFFE
 17836                           tosl	equ	0xFFD
 17837                           pclatu	equ	0xFFB
 17838                           pclath	equ	0xFFA
 17839                           tblptru	equ	0xFF8
 17840                           tblptrh	equ	0xFF7
 17841                           tblptrl	equ	0xFF6
 17842                           tablat	equ	0xFF5
 17843                           prodh	equ	0xFF4
 17844                           prodl	equ	0xFF3
 17845                           intcon	equ	0xFF2
 17846                           intcon2	equ	0xFF1
 17847                           postinc0	equ	0xFEE
 17848                           fsr0h	equ	0xFEA
 17849                           fsr0l	equ	0xFE9
 17850                           wreg	equ	0xFE8
 17851                           indf1	equ	0xFE7
 17852                           postdec1	equ	0xFE5
 17853                           plusw1	equ	0xFE3
 17854                           fsr1h	equ	0xFE2
 17855                           fsr1l	equ	0xFE1
 17856                           indf2	equ	0xFDF
 17857                           postinc2	equ	0xFDE
 17858                           postdec2	equ	0xFDD
 17859                           plusw2	equ	0xFDB
 17860                           fsr2h	equ	0xFDA
 17861                           fsr2l	equ	0xFD9
 17862                           status	equ	0xFD8
 17863                           
 17864                           	psect	temp
 17865  000047                     btemp:
 17866                           	opt stack 0
 17867  000047                     	ds	1
 17868  0000                     int$flags	set	btemp
 17869  0000                     wtemp6	set	btemp+1
 17870                           tosu	equ	0xFFF
 17871                           tosh	equ	0xFFE
 17872                           tosl	equ	0xFFD
 17873                           pclatu	equ	0xFFB
 17874                           pclath	equ	0xFFA
 17875                           tblptru	equ	0xFF8
 17876                           tblptrh	equ	0xFF7
 17877                           tblptrl	equ	0xFF6
 17878                           tablat	equ	0xFF5
 17879                           prodh	equ	0xFF4
 17880                           prodl	equ	0xFF3
 17881                           intcon	equ	0xFF2
 17882                           intcon2	equ	0xFF1
 17883                           postinc0	equ	0xFEE
 17884                           fsr0h	equ	0xFEA
 17885                           fsr0l	equ	0xFE9
 17886                           wreg	equ	0xFE8
 17887                           indf1	equ	0xFE7
 17888                           postdec1	equ	0xFE5
 17889                           plusw1	equ	0xFE3
 17890                           fsr1h	equ	0xFE2
 17891                           fsr1l	equ	0xFE1
 17892                           indf2	equ	0xFDF
 17893                           postinc2	equ	0xFDE
 17894                           postdec2	equ	0xFDD
 17895                           plusw2	equ	0xFDB
 17896                           fsr2h	equ	0xFDA
 17897                           fsr2l	equ	0xFD9
 17898                           status	equ	0xFD8


Data Sizes:
    Strings     659
    Constant    118
    Data        82
    BSS         103
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      70
    BANK0           160     84     154
    BANK1           256     22     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2862	PTR const FTN()enum E7008 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S112$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> main@newBuffer(BANK1[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_21(CODE[21]), STR_20(CODE[22]), STR_19(CODE[21]), STR_18(CODE[38]), 
		 -> STR_17(CODE[21]), STR_16(CODE[36]), STR_15(CODE[18]), STR_14(CODE[21]), 
		 -> STR_13(CODE[57]), STR_12(CODE[20]), STR_11(CODE[35]), STR_10(CODE[25]), 
		 -> STR_9(CODE[24]), STR_8(CODE[81]), STR_7(CODE[28]), STR_6(CODE[49]), 
		 -> STR_5(CODE[26]), STR_4(CODE[22]), STR_3(CODE[29]), STR_2(CODE[27]), 
		 -> STR_1(CODE[101]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    EUSART2_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    i2c1_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), Absolute function(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7008[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 2
		 -> sendDataToRemoteNode@buffer(COMRAM[2]), 

    S112$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S112$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S112$data_ptr	PTR unsigned char  size(2) Largest target is 2
		 -> sendDataToRemoteNode@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 2
		 -> sendDataToRemoteNode@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _printf->___ftmul
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftge->___ftdiv
    _printString->_EUSART1_Write
    _atoi->___wmul
    ___wmul->___awdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    i2_i2c_ISR->i2_do_I2C_TX
    _EUSART1_Receive_ISR->_sram_write

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  115214
                                             80 BANK0      4     4      0
                                              0 BANK1     22    22      0
                 _EUSART1_Initialize
            _SRAM_CONTROL_INITIALIZE
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                               _atoi
                        _printString
                             _printf
               _sendDataToRemoteNode
                          _sram_read
 ---------------------------------------------------------------------------------
 (1) _sram_read                                            3     3      0      65
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _sendDataToRemoteNode                                 3     1      2    2489
                                             29 COMRAM     3     1      2
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     242
                                             24 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             26 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterWrite                                      0     0      0    1328
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1328
                                             27 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1260
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1170
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             25 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    36      5   73695
                                             40 BANK0     40    35      5
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   16690
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             25 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   16411
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6461
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             24 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3145
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     821
                                             19 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5454
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4858
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2718
                                              6 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _printString                                         54    54      0     198
                                             25 COMRAM     2     2      0
                                              0 BANK0     52    52      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2    5825
                                             44 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5302
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    6213
                                             36 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    4616
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        2     0      2     121
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        2     0      2     121
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SRAM_CONTROL_INITIALIZE                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     688
                                              6 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (10) i2_i2c_ISR                                           0     0      0     519
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (11) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (11) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART2_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART2_Receive_ISR                                 3     3      0       2
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 3     3      0     167
                                              3 COMRAM     3     3      0
                         _sram_write
 ---------------------------------------------------------------------------------
 (11) _sram_write                                          3     2      1     120
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Initialize
   _SRAM_CONTROL_INITIALIZE
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftge
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftsub
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _atoi
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _isdigit
   _printString
     _EUSART1_Write
   _printf
     ___awdiv
       ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sendDataToRemoteNode
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer
   _sram_read

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     _sram_write
   _EUSART1_Transmit_ISR *
   _EUSART2_Receive_ISR *
   _EUSART2_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     16      78       6       46.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     54      9A       4       96.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     158       9        0.0%
DATA                 0      0     158      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb  5 10:52:11 2018

                ??i2_i2c1_driver_startRX 0001                             returnReset@p 0019  
               _eusart1TxBufferRemaining 0045            _do_I2C_SEND_RESTART$intlevel0 3120  
                           ___awdiv@sign 0024                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 311A                     __size_of_do_I2C_RCEN 0012  
                    ___wmul@multiplicand 0029                  EUSART2_Receive_ISR@temp 0002  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                           ___ftadd@exp1 0081                             ___ftadd@exp2 0080  
                            __CFG_LVP$ON 000000                             ___ftadd@sign 007F  
                                    l215 2C1C                                      l223 2460  
                                    l216 2C10                                      l224 2426  
                                    l225 2414                                      l161 2E2E  
                                    l234 248E                                      l242 2702  
                                    l251 296E                                      l219 2C16  
                                    l227 241A                                      l243 26F6  
                                    l163 2E40                                      l252 295A  
                                    l228 2420                                      l245 26FC  
                                    l173 2FB4                                      l174 2FA4  
                                    l255 2960                                      l239 26F2  
                                    l263 2BD0                                      l256 2968  
                                    l901 10D6                                      l910 1412  
                                    l743 2D7E                                      l744 2DA2  
                                    l904 1296                                      l745 2DA0  
                                    l860 29BC                                      l846 291A  
                                    l918 1476                                      l870 0C0A  
                                    l855 29C2                                      l871 0BEE  
                                    l848 294C                                      l856 29B0  
                                    l880 0D52                                      l857 29DC  
                                    l873 0EC4                                      l881 0D16  
                                    l858 29B4                                      l890 0EB4  
                                    l874 0C2C                                      l971 1AC8  
                                    l859 29B8                                      l883 0E42  
                                    l868 0F18                                      l892 0F0A  
                                    l876 0EEE                                      l981 1886  
                                    l885 0E52                                      l877 0CA4  
                                    l869 0BE2                                      l974 16A2  
                                    l894 147C                                      l886 0E6E  
                                    l975 15C8                                      l895 0F28  
                                    l887 0E7E                                      l879 0CFC  
                                    l968 19F8                                      l896 111A  
                                    l888 0EA4                                      l985 012C  
                                    l978 167C                                      l994 018A  
                                    l986 013E                                      l979 17D2  
                                    l899 10B4                                      l996 025A  
                                    l988 015A                                      l997 0244  
                                    l989 0152                                      l998 020C  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
        __end_ofi2_i2c1_driver_getRXData 324A             __size_of_i2c_masterOperation 0032  
                   _returnStop$intlevel0 318E                             ___awmod@sign 001E  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA2bits 000F72          i2c1_driver_setBusCollisionISR@f 0019  
                            i2_do_I2C_RX 273C                              i2_do_I2C_TX 252C  
                           ___ftdiv@cntr 0060                             ___ftdiv@sign 0065  
                                   l1001 02FC                                     l1010 029E  
                                   l1020 033E                                     l1012 02AE  
                                   l1004 0268                                     l1021 0380  
                                   l1005 032A                                     l1013 02A8  
                                   l1031 054C                                     l1023 0412  
                                   l1015 02D6                                     l1024 047A  
                                   l1016 02C2                                     l1008 026C  
                                   l1041 0674                                     l1009 0288  
                                   l1050 06CE                                     l1042 068E  
                                   l1026 04A0                                     l1018 02EA  
                                   l1019 093C                                     l1027 04DE  
                                   l1300 2808                                     l1060 07D4  
                                   l1028 05A2                                     l1301 2816  
                                   l1061 07EC                                     l1053 0792  
                                   l1045 06BC                                     l1037 0608  
                                   l1062 0918                                     l1054 0706  
                                   l1046 06AE                                     l1311 1E08  
                                   l1063 083E                                     l1400 1C46  
                                   l1080 0A76                                     l1056 07AC  
                                   l1401 1C62                                     l1313 1E26  
                                   l1081 0A7E                                     l1073 09E6  
                                   l1065 0932                                     l1057 079E  
                                   l1049 06DC                                     l1410 2190  
                                   l1402 1C92                                     l1314 1E68  
                                   l1082 0AB6                                     l1066 0924  
                                   l1307 2DBA                                     l1411 21B6  
                                   l1323 1EFA                                     l1315 1E98  
                                   l1083 0A9C                                     l1075 0A06  
                                   l1059 07D0                                     l1260 21EE  
                                   l1324 1EEE                                     l1092 0B70  
                                   l1076 0A28                                     l1068 0976  
                                   l1261 21EA                                     l1501 266E  
                                   l1317 1ED6                                     l1421 1DAE  
                                   l1093 0AF0                                     l1069 098E  
                                   l1350 2336                                     l1502 2662  
                                   l1318 1EC6                                     l1422 1D9E  
                                   l1078 0A4A                                     l1343 22E4  
                                   l1407 212A                                     l1263 2230  
                                   l1511 28A6                                     l1415 1CE4  
                                   l1079 0A52                                     l1344 22DA  
                                   l1432 24CC                                     l1512 289A  
                                   l1280 25E0                                     l1409 2152  
                                   l1433 24FC                                     l1505 26A2  
                                   l1417 1D10                                     l1441 205C  
                                   l1346 2318                                     l1266 227E  
                                   l1450 2F5C                                     l1506 26B0  
                                   l1522 2A1A                                     l1418 1D4A  
                                   l1282 25FE                                     l1442 208E  
                                   l1347 2302                                     l1267 2242  
                                   l1515 28CE                                     l1523 2A0E  
                                   l1427 1DD2                                     l1419 1D72  
                                   l1283 25F6                                     l1443 209E  
                                   l1460 1F40                                     l1516 28DC  
                                   l1428 1DC6                                     l1292 27C4  
                                   l1349 2340                                     l1269 22B2  
                                   l1293 27D0                                     l1445 20B6  
                                   l1374 1B5E                                     l1462 1FB8  
                                   l1286 261E                                     l1446 20C6  
                                   l1383 1BEE                                     l1471 1FF8  
                                   l1463 1FA8                                     l1287 2628  
                                   l1279 25D0                                     l1295 27E6  
                                   l1439 2034                                     l1456 2D42  
                                   l1288 2636                                     l1296 27DE  
                                   l1378 1B88                                     l1475 2F80  
                                   l1299 27FE                                     l1388 1BE4  
                                   l1468 1FDC                                     l1397 1C22  
                                   l1389 1BDA                                     l1469 1FD0  
                                   l1398 1C18                                     l6026 2528  
                                   l7202 02C2                                     l6344 2D6E  
                                   l7324 06CE                                     l7502 227A  
                                   l7094 290A                                     l7342 079E  
                                   l7318 06AE                                     l7272 0526  
                                   l7264 04DE                                     l7292 060C  
                                   l7198 02A8                                     l7712 0E34  
                                   l7458 0AF0                                     l7714 0E42  
                                   l7396 0992                           i2_mssp1_setIRQ 3242  
                 __size_ofi2_do_I2C_IDLE 000C                                     l7798 146C  
                                   STR_1 7D6B                                     STR_2 7F31  
                                   STR_3 7EF8                                     STR_4 7F97  
                                   STR_5 7F4C                                     STR_6 7E5A  
                                   STR_7 7F15                                     STR_8 7DD0  
                                   STR_9 7F7F                   __size_ofi2_do_I2C_RCEN 000C  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                             printf@tmpval 009C  
                                   u6111 1CC8                                     u6131 1CF4  
                                   u7020 09CA                                     u5510 234A  
                                   u5328 2C2C                                     u5440 30AC  
                                   u6321 1F24                                     u5329 2C40  
                                   u6410 2672                                     u5611 1B1C  
                                   u6340 1F5E                                     u6260 1F00  
                                   u7140 0ABE                                     u5348 2436  
                                   u5621 1B30                                     u5349 244A  
                                   u5470 22CC                                     u5710 1BB8  
                                   u6190 1DD8                                     u7150 0AD4  
                                   u5438 2BE6                                     u5390 3070  
                                   u5439 2BFA                                     u6440 28AA  
                                   u5448 30AE                                     u6345 1F56  
                                   u5650 1B50                                     u7170 0B82  
                                   u5378 2712                                     u7251 2110  
                                   u5379 2726                                     u6380 1FE2  
                                   u5388 297E                                     u6541 28F8  
                                   u5821 201C                                     u5389 2992  
                                   u5750 1BF6                                     u5910 2602  
                                   u6710 03B8                                     u7271 213A  
                                   u5680 1B7A                                     u5841 2044  
                                   u6715 03AE                                     u5780 1C2A  
                                   u7700 132E                                     u7620 0FD0  
                                   u6830 0644                                     u6750 04B0  
                                   u6590 01E8                     ?_do_I2C_SEND_RESTART 0001  
                                   u6920 07BA                                     u6760 04F0  
                                   u7720 13C2                                     u5970 27EA  
                                   u6930 07CA                                     u7570 0DCE  
                                   u7660 11B2                                     u7580 0E8A  
                                   u6790 0526                                     u7590 0E8C  
                                   u7680 1246                                     u6890 06EA  
                                   u7747 3076                                     u7757 2936  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART1_Write 2D6C        __size_of_do_I2C_SEND_RESTART_READ 000E  
                   __end_ofi2_returnStop 3256                ?_do_I2C_SEND_RESTART_READ 0001  
                                   _atoi 21E8                                     _main 0BA0  
                           ___ftpack@arg 0019                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                             ___ftpack@exp 001C  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 0047                            __CFG_BORV$190 000000  
                           printString@i 0092                    ?_do_I2C_SEND_ADR_READ 0001  
                      sram_write@address 0003                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0001  
                                   start 011A                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 2E72                            _i2c_setBuffer 2F88  
                           ___ftmul@cntr 006A                          __end_of_i2c_ISR 2C00  
                           ___param_bank 000000                             ___ftmul@sign 006B  
               ??_do_I2C_DO_NACK_RESTART 0019                             ___fttol@exp1 0081  
                           ___fttol@lval 007D                             _do_I2C_RESET 2FFE  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3152  
                                  ?_atoi 002D                 __end_of_i2c1_driver_open 2FD2  
                                  ?_main 0001                          __end_of___awdiv 2640  
               __end_of_i2c1_driver_stop 3232                          __end_of___ftadd 1CB8  
                                  STR_10 7F66                                    STR_11 7ED5  
                                  STR_12 7FD8                                    STR_20 7FAD  
                                  STR_21 7FC3                                    STR_13 7E21  
                                  STR_14 7FC3                                    STR_15 7FEC  
                                  STR_16 7EB1                                    STR_17 7FC3  
                                  STR_18 7E8B                                    STR_19 7FC3  
                        __end_of___awmod 2820                          __end_of___ftdiv 21E8  
                        __end_of___ftneg 2F6A                          __end_of___lldiv 26C2  
                        __end_of___ftmul 2100                          ___awdiv@divisor 0021  
                        __end_of___llmod 28EE                          __end_of___ftsub 2D6C  
                        __end_of___fttol 200A               __end_of_i2c1_driver_TXData 31C0  
                         __CFG_DEBUG$OFF 000000                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l215 2CF8                                    i2l223 2582  
                                  i2l216 2CEC                                    i2l224 2548  
                                  i2l225 2536                                    i2l401 00CE  
                                  i2l234 25B0                                    i2l242 2776  
                                  i2l251 2A7E                                    i2l219 2CF2  
                                  i2l227 253C                                    i2l243 276A  
                                  i2l252 2A6A                                    i2l228 2542  
                                  i2l245 2770                                    i2l255 2A70  
                                  i2l239 2766                                    i2l263 2CB2  
                                  i2l256 2A78                                    i2l391 006C  
                                  i2l393 0084                                    i2l395 009A  
                                  i2l397 00B8                                    i2l399 00C4  
                                  i2l761 2B68                                    i2l762 2B98  
                                  i2l674 2828                                    i2l763 2B88  
                                  i2l755 2E9C                                    i2l675 286E  
                                  i2l764 2B92                                    i2l756 2E98  
                                  i2l676 285E                                    i2l668 2E6E  
                                  i2l677 2868                                    i2l669 2E6A  
                                  i2l766 2BAC                                    i2l679 2882  
                        ___awdiv@counter 0023                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                           main@newSpeed 0161                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                             ___lltoft@exp 0029  
                   _EUSART1_Transmit_ISR 2E72                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 001B                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 3252                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 3246  
                         __CFG_EBTRB$OFF 000000                            ___awtoft@sign 0024  
             __end_of_i2c1_driver_isNACK 302A                          __end_of_dpowers 7D1D  
                     __size_ofi2_i2c_ISR 0048                                    _scale 148C  
                        __end_of_isdigit 2F88               ?_do_I2C_SEND_RESTART_WRITE 0001  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001D  
                                  atoi@a 0063                                    atoi@s 002D  
                                  _putch 3192                    ??_do_I2C_SEND_RESTART 0019  
                                  main@i 015A                            i2returnStop@p 0001  
 __end_of_i2c1_driver_setBusCollisionISR 317E  __size_of_i2c1_driver_setBusCollisionISR 000A  
         _i2c1_driver_setBusCollisionISR 3174                           ?_EUSART1_Write 0001  
                                  pclath 000FFA                                    tablat 000FF5  
                __size_of_mssp1_clearIRQ 0004                                    plusw1 000FE3  
                                  plusw2 000FDB                   ?_do_I2C_SEND_ADR_WRITE 0001  
                                  status 000FD8                                    wtemp6 0048  
                          sram_read@data 001B                           __CFG_HFOFST$ON 000000  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 0019  
                         __CFG_PBADEN$ON 000000    __end_of_EUSART2_SetTxInterruptHandler 31A6  
 __size_of_EUSART2_SetTxInterruptHandler 000A            _EUSART2_SetTxInterruptHandler 319C  
        __size_ofi2_i2c1_driver_resetBus 0002                            _fsmStateTable 0132  
                        __initialization 2B0E                               _i2c_poller 2FA2  
                           __end_of_atoi 22BC                               _i2c_status 00B4  
             __end_of_EUSART1_Initialize 2E12                             __end_of_main 148C  
                          i2_do_I2C_IDLE 315E                            i2_do_I2C_RCEN 3152  
                       __end_of_i2c_open 2404              ?_INTERRUPT_InterruptManager 0001  
                       i2_mssp1_clearIRQ 323E         __end_ofi2_do_I2C_DO_ADDRESS_NACK 2D2A  
                          _do_I2C_DO_ACK 30FE                                   ??_atoi 0060  
                                 ??_main 00B0                            ___fttol@sign1 007C  
                          _do_I2C_TX$362 001A            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000002                     __size_of__tdiv_to_l_ 0132  
                  ?_EUSART1_Transmit_ISR 0001            __size_of_i2c1_driver_resetBus 0002  
                ?_do_I2C_DO_ADDRESS_NACK 0001                          ?i2_mssp1_setIRQ 0001  
     __end_ofi2_do_I2C_SEND_RESTART_READ 31F8               i2_do_I2C_SEND_RESTART_READ 31F0  
             __end_of_EUSART2_Initialize 2C9A                 _eusart2TxBufferRemaining 0046  
                       ___llmod@dividend 0026                                   ?_scale 006C  
                       ___awdiv@dividend 001F                         __end_of___awtoft 2DDE  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                       __end_of___ftpack 236A                 __size_ofi2_do_I2C_DO_ACK 0008  
                       __end_of___lltoft 2A64                           __CFG_WDTEN$OFF 000000  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _RCSTA1 000FAB                                   _RCSTA2 000F71  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                  i2_do_I2C_SEND_ADR_WRITE 30B2  
                 ??_do_I2C_SEND_ADR_READ 0019                            main@newBuffer 0154  
                              ??_i2c_ISR 001C                            main@errorBits 0166  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                                 _TXSTA1 000FAC                                   _TXSTA2 000F72  
                          main@parameter 0152                  ??i2_do_I2C_SEND_RESTART 0001  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 3226                         __end_of__powers_ 7D44  
                     i2_i2c1_driver_stop 3256                      _do_I2C_RX$intlevel0 26C8  
                                 ___ftge 249A              __end_of_do_I2C_DO_NACK_STOP 30FE  
                         ?i2_do_I2C_IDLE 0001                                   ___wmul 2F20  
                        _i2c_masterWrite 31B0                           ?i2_do_I2C_RCEN 0001  
               ?_SRAM_CONTROL_INITIALIZE 0001                                ??___awdiv 0023  
  __end_of_i2c1_driver_clearBusCollision 3262   __size_of_i2c1_driver_clearBusCollision 0004  
          _i2c1_driver_clearBusCollision 325E                                ??___ftadd 007C  
                         __CFG_STVREN$ON 000000                                ??___awmod 001D  
                              ??___ftdiv 002B                                ??___ftneg 001C  
                              ??___lldiv 0021                                ??___ftmul 002D  
                              ??___llmod 002E                                ??___ftsub 0030  
                              ??___fttol 0077                        __end_ofi2_i2c_ISR 2CE2  
        __size_of_do_I2C_DO_NACK_RESTART 000E                                   _fround 18AC  
                         i2returnReset@p 0001                                   clear_0 2B34  
                                 clear_1 2B40                                   clear_2 2B4C  
                       ___awdiv@quotient 0025                           ?_do_I2C_DO_ACK 0001  
                        ___awmod@divisor 001B                            main@tempSpeed 0157  
                        ___awmod@counter 001D                                   _printf 011E  
                    ?i2_i2c1_driver_stop 0001                   i2_i2c1_driver_sendNACK 320C  
                  ___ftmul@f3_as_product 0067                   i2c1_driver_setI2cISR@f 0019  
            __end_of_i2c1_driver_sendACK 320C           __end_of_do_I2C_DO_ADDRESS_NACK 2C4E  
                              ??_isdigit 0019                   i2_i2c1_driver_resetBus 3264  
                           __mediumconst 7CF4     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 3236                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_returnReset 0019                     _EUSART2_Transmit_ISR 2E44  
          _do_I2C_DO_NACK_STOP$intlevel0 30F6                    _i2c1_driver_setI2cISR 316A  
            __end_of_i2c1_driver_startRX 322E                          ??_EUSART1_Write 0019  
                  __size_ofi2_returnStop 0004                          _eusart1RxBuffer 00D8  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 31D0                             ?_printString 0001  
                        _eusart1TxBuffer 0168                          _eusart2RxBuffer 00E8  
                      _SYSTEM_Initialize 302A                          _eusart2TxBuffer 00F0  
                             __accesstop 0060                     ??i2_i2c1_driver_stop 0001  
                __end_of__initialization 2B52                          ??_i2c_setBuffer 001D  
         _do_I2C_SEND_ADR_READ$intlevel0 2FEE                         _do_I2C_SEND_STOP 310C  
                             ___ftadd@f1 0076                               ___ftadd@f2 0079  
                     __size_of_do_I2C_RX 007A                       __size_of_do_I2C_TX 0096  
                             ___ftge@ff1 0066                               ___ftge@ff2 0069  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 30B2                               ___ftdiv@f1 0025  
                             ___ftdiv@f2 0028                               ___ftdiv@f3 0061  
                    _i2c_masterOperation 2E12                 __size_of_do_I2C_TX_EMPTY 005E  
                             ___ftneg@f1 0019                               ___awtoft@c 0021  
                             ___ftmul@f1 0060                               ___ftmul@f2 0063  
         __size_ofi2_i2c1_driver_sendACK 0006               __end_of_mssp1_waitForEvent 307E  
          __end_ofi2_i2c1_driver_sendACK 3218                               ___ftsub@f1 0082  
                             ___ftsub@f2 0085                               ___fttol@f1 0073  
                            ?_i2c_poller 0001                           __pcstackCOMRAM 0001  
                    _do_I2C_TX$intlevel0 240A                             __pidataBANK1 2ABC  
                    ??_SYSTEM_Initialize 001B           __size_ofi2_i2c1_driver_restart 0004  
          __end_ofi2_i2c1_driver_restart 325E                               ___lltoft@c 0021  
         __size_ofi2_i2c1_driver_startRX 0004                            __end_of_scale 18AC  
          __end_ofi2_i2c1_driver_startRX 324E           ?_EUSART2_SetTxInterruptHandler 0019  
                          __end_of_putch 319C             __end_of_sendDataToRemoteNode 2A08  
                           i2_returnStop 3252                           i2_do_I2C_RESET 30D2  
                 ??_EUSART1_Transmit_ISR 0001                               __div_to_l_ 1DEA  
                   ?_i2c_masterOperation 0001                    ?_EUSART2_Transmit_ISR 0001  
               i2_do_I2C_DO_ADDRESS_NACK 2CE2              __end_of_EUSART1_Receive_ISR 2BB2  
                           ?i2_do_I2C_RX 0001                             ?i2_do_I2C_TX 0001  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                          __div_to_l_@exp1 0024  
                        __div_to_l_@cntr 0023                ?i2_do_I2C_DO_NACK_RESTART 0001  
                 _do_I2C_DO_NACK_RESTART 30E2                                  ??_scale 0030  
              __end_of_SYSTEM_Initialize 3040                ??i2_do_I2C_SEND_ADR_WRITE 0001  
                        __div_to_l_@quot 001F                                  ??_putch 001A  
                          _eusart1RxHead 0037               __end_ofi2_do_I2C_SEND_STOP 31E0  
                          _eusart2RxHead 003D                            _eusart1TxHead 0039  
                          _eusart1RxTail 0036                           _mssp1_clearIRQ 321E  
                          _eusart2TxHead 003F                               __pbssBANK0 00B4  
                             __pbssBANK1 0168                            _eusart2RxTail 003C  
                          _eusart1TxTail 0038                            _eusart2TxTail 003E  
          __size_ofi2_i2c1_driver_TXData 0008                          __CFG_PLLCFG$OFF 000000  
                              ?_i2c_open 0001                               __pnvCOMRAM 0043  
                __end_of_i2c_masterWrite 31B8                            __div_to_l_@f1 0019  
                          __div_to_l_@f2 001C                   ?_i2c1_driver_getRXData 0001  
        __end_of_SRAM_CONTROL_INITIALIZE 3056                        ??i2_do_I2C_DO_ACK 0001  
          __size_ofi2_i2c1_driver_isNACK 0016                    _do_I2C_IDLE$intlevel0 3096  
                      i2_do_I2C_TX_EMPTY 2A64                          ??i2_do_I2C_IDLE 0001  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0001  
                     __CFG_CCP2MX$PORTC1 000000                            ??_do_I2C_IDLE 0019  
                          ??_do_I2C_RCEN 0019                                  ?___ftge 0066  
                     ?i2_do_I2C_TX_EMPTY 0001                                  ?___wmul 0027  
                     __CFG_CCP3MX$PORTB5 000000                          ??_do_I2C_DO_ACK 0019  
                 __end_ofi2_do_I2C_RESET 30E2                                  ?_fround 006C  
                    i2c_setBuffer@buffer 0019                                ?___awtoft 0021  
                              ?___ftpack 0019                                  ?_printf 0088  
                              ?___lltoft 0021           ?_i2c1_driver_clearBusCollision 0001  
                    ??i2_do_I2C_TX_EMPTY 0001                    ??_i2c_masterOperation 001C  
                      ?_i2c1_driver_open 0001                        __end_of_do_I2C_RX 273C  
                      __end_of_do_I2C_TX 249A                 ??i2_do_I2C_SEND_ADR_READ 0001  
                      ?_i2c1_driver_stop 0001                   ?_i2c1_driver_setI2cISR 0019  
                     ??_i2c1_driver_open 0019                       __size_of_sram_read 0028  
                     ??_i2c1_driver_stop 0019                                  _OSCCON2 000FD2  
                          ?_mssp1_setIRQ 0001              __end_of_EUSART2_Receive_ISR 2888  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                   __end_of_mssp1_clearIRQ 3222  
                                _SSP1MSK 000FCA                      __size_of_i2c_poller 001A  
                ??_do_I2C_SEND_ADR_WRITE 001A      _do_I2C_SEND_RESTART_WRITE$intlevel0 312E  
            ??_do_I2C_SEND_RESTART_WRITE 0019                       _i2c1_driver_TXData 31B8  
                         sram_write@data 0001                               ??_i2c_open 001B  
               __end_ofi2_mssp1_clearIRQ 3242                       _i2c1_driver_i2cISR 0030  
                                _i2c_ISR 2BB2                __end_ofi2_do_I2C_TX_EMPTY 2ABC  
             sendDataToRemoteNode@buffer 0041                  i2_i2c1_driver_getRXData 3246  
                        __CFG_PWRTEN$OFF 000000                        __end_of__npowers_ 7D6B  
                                __Hparam 0000                    _returnReset$intlevel0 3184  
                  _do_I2C_RCEN$intlevel0 3084                               _scale$2860 006F  
                     _i2c1_driver_isNACK 3014                      ?_i2c1_driver_TXData 0001  
                                __Lparam 0000               sendDataToRemoteNode@status 0034  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 2C06                          __size_of___ftge 0092  
                                ___awdiv 25BC                                  ___ftadd 1B0A  
                                ___awmod 27B0                                  ___ftdiv 2100  
                                ___ftneg 2F46                                  ___lldiv 2640  
                        __size_of___wmul 0026                                  ___ftmul 200A  
                                ___llmod 2888                                  ___ftsub 2D2A  
                                ___fttol 1F12                        ??_do_I2C_TX_EMPTY 0019  
                    ?_i2c1_driver_isNACK 0001                          ?i2_do_I2C_RESET 0001  
                                __pcinit 2B0E                               ??___awtoft 0024  
                             ??___ftpack 001E                          __size_of_fround 025E  
                                __ramtop 0600                               ??___lltoft 0025  
                                __ptext0 0BA0                                  __ptext1 2EF8  
                                __ptext2 29AC                                  __ptext3 2F88  
                                __ptext4 236A                                  __ptext5 316A  
                                __ptext6 3174                                  __ptext7 2FBC  
                                __ptext8 31B0                                  __ptext9 2E12  
                    __end_of_do_I2C_IDLE 30A2                          __size_of_printf 0A82  
                    __end_of_do_I2C_RCEN 3090                         ??i2_mssp1_setIRQ 0001  
                            ?__div_to_l_ 0019                                  _dpowers 7CF5  
                  _OSCILLATOR_Initialize 3144                   ??_EUSART2_Transmit_ISR 0001  
                                _isdigit 2F6A              __end_of_do_I2C_SEND_RESTART 3128  
                         ??_mssp1_setIRQ 0019                         ___awmod@dividend 0019  
                   ??_i2c1_driver_TXData 0019                       _EUSART1_Initialize 2DDE  
               ??_PIN_MANAGER_Initialize 0019                   i2c_masterOperation@ret 001D  
                        ?_mssp1_clearIRQ 0001               _do_I2C_SEND_STOP$intlevel0 3112  
            ?i2_do_I2C_SEND_RESTART_READ 0001                 _do_I2C_SEND_RESTART_READ 3136  
             __size_of_SYSTEM_Initialize 0016                                  main@set 015D  
                   __size_of_returnReset 000A                     end_of_initialization 2B52  
                   ??_i2c1_driver_isNACK 0019                      ?_EUSART1_Initialize 0001  
           __end_of_i2c1_driver_sendNACK 3206                            __Lmediumconst 7CF4  
                         main@printError 015C                     _sendDataToRemoteNode 29AC  
                   __size_of_printString 0060                         ?_i2c_masterWrite 0001  
           __end_of_i2c1_driver_resetBus 3264                          ___lldiv@divisor 001D  
                        ___lldiv@counter 0025                       _EUSART2_Initialize 2C4E  
                      __end_of_sram_read 2F20           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 00AF                                  printf@f 0088  
          __end_ofi2_do_I2C_SEND_RESTART 31E8                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   __size_ofi2_returnReset 0004  
           ?i2_do_I2C_SEND_RESTART_WRITE 0001                _do_I2C_SEND_RESTART_WRITE 3128  
                ?i2_i2c1_driver_sendNACK 0001             EUSART1_Receive_ISR@temp_1741 0005  
                         __tdiv_to_l_@f1 0019                           __tdiv_to_l_@f2 001C  
                   ??_EUSART1_Initialize 0019                      ?_EUSART2_Initialize 0001  
                          ??__tdiv_to_l_ 001F                  ?i2_i2c1_driver_resetBus 0001  
                             _returnStop 3188                                _PORTBbits 000F81  
               __end_of_do_I2C_SEND_STOP 311A                                i2_i2c_ISR 2C9A  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                               _sram_write 2EA0  
       __size_of_SRAM_CONTROL_INITIALIZE 0016                              returnStop@p 0019  
                             main@i_1873 015F                      EUSART1_Write@txData 0019  
                   __size_ofi2_do_I2C_RX 0074                     __size_ofi2_do_I2C_TX 0090  
                   ??_EUSART2_Initialize 001B                ??i2_i2c1_driver_getRXData 0001  
                  ?_sendDataToRemoteNode 001E          EUSART1_Receive_ISR@receivedChar 0006  
                            ___ftdiv@exp 0064                              printf@width 00AB  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                    __size_of__div_to_l_ 0128                              ___ftmul@exp 0066  
                           ??_i2c_poller 001C           __end_ofi2_i2c1_driver_sendNACK 3212  
                            _do_I2C_IDLE 3090                              _do_I2C_RCEN 307E  
           __end_of_INTERRUPT_Initialize 323E           __end_ofi2_i2c1_driver_resetBus 3266  
                         __end_of___ftge 252C               ??i2_do_I2C_DO_ADDRESS_NACK 0001  
                         __end_of___wmul 2F46         __end_ofi2_do_I2C_DO_NACK_RESTART 31C8  
          ??i2_do_I2C_SEND_RESTART_WRITE 0001                       _mssp1_IRQisEnabled 30A2  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_fround 1B0A  
                             ?i2_i2c_ISR 0001             __size_of_do_I2C_DO_NACK_STOP 000E  
                         __end_of_printf 0BA0                       _mssp1_waitForEvent 306C  
                ?_do_I2C_DO_NACK_RESTART 0001                      start_initialization 2B0E  
                    _i2c_busCollisionISR 3218          __size_of_PIN_MANAGER_Initialize 002A  
                    ?_mssp1_IRQisEnabled 0001                      __end_of__tdiv_to_l_ 1DEA  
                        i2_do_I2C_DO_ACK 31D0                            i2_returnReset 324E  
                        i2_do_I2C_TX$362 0001                      ?_mssp1_waitForEvent 0019  
                            putch@txData 001A                       __end_of_i2c_poller 2FBC  
           __size_of_i2c1_driver_sendACK 0006                    __end_of_EUSART1_Write 2DA6  
                        i2c_open@address 001C                       printString@welcome 0060  
                i2c_setBuffer@bufferSize 001B                  ??_i2c1_driver_getRXData 0019  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 31C8  
                        ___llmod@divisor 002A                          ___llmod@counter 002E  
                 i2_do_I2C_SEND_ADR_READ 30C2                    __end_of_i2c_setBuffer 2FA2  
                      __size_of_i2c_open 009A                     ?_i2c_busCollisionISR 0001  
                   __end_of_mssp1_setIRQ 3226                     ??_mssp1_IRQisEnabled 0019  
                     i2_do_I2C_SEND_STOP 31D8                                 ??___ftge 006C  
                               ??___wmul 002B                     ??_mssp1_waitForEvent 001B  
                  i2_i2c1_driver_sendACK 3212                            ?_do_I2C_RESET 0001  
           __end_ofi2_i2c1_driver_TXData 3200                              __pdataBANK1 0100  
                  i2i2c1_driver_TXData@d 0001                                 ??_fround 0030  
              _do_I2C_TX_EMPTY$intlevel0 2954      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 325A                              ?_returnStop 0019  
                               ??_printf 008D                      ?i2_do_I2C_SEND_STOP 0001  
                ??_i2c1_driver_setI2cISR 001B                    i2_i2c1_driver_startRX 324A  
         __end_of_do_I2C_DO_NACK_RESTART 30F0                           _eusart1RxCount 0035  
                   _i2c1_driver_sendNACK 3200                               fround@prec 0075  
                         _eusart2RxCount 003B                        __size_of___awtoft 0038  
                      __size_of___ftpack 00AE             __end_ofi2_i2c1_driver_isNACK 306C  
                            ?_sram_write 0001                        __size_of___lltoft 005C  
                            __pbssCOMRAM 0030                     _i2c1_driver_resetBus 3262  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 0060  
                          __pcstackBANK1 0152                           ?i2_returnReset 0001  
                              _do_I2C_RX 26C2                                _do_I2C_TX 2404  
                           _isdigit$2358 001A                   ??_sendDataToRemoteNode 0020  
         __size_of_do_I2C_SEND_ADR_WRITE 0016            __end_of_do_I2C_SEND_ADR_WRITE 2FE8  
        ??_EUSART2_SetRxInterruptHandler 001B             __size_of_EUSART1_Receive_ISR 0052  
                   ??i2_do_I2C_SEND_STOP 0001                __size_of_i2c1_driver_open 0016  
                      ?i2_mssp1_clearIRQ 0001                __size_of_i2c1_driver_stop 0004  
               sendDataToRemoteNode@data 001E                                 ?_i2c_ISR 0001  
        _do_I2C_SEND_ADR_WRITE$intlevel0 2FD8                          _do_I2C_TX_EMPTY 294E  
                              __pnvBANK0 00F8                       ??i2_mssp1_clearIRQ 0001  
                  ??_i2c_busCollisionISR 0001                   _PIN_MANAGER_Initialize 2ECE  
                       ??i2_do_I2C_RESET 0001                                __pintcode 0008  
                          __pmediumconst 7CF4                    __end_ofi2_do_I2C_IDLE 316A  
                  __end_ofi2_do_I2C_RCEN 315E                           ??_do_I2C_RESET 0019  
                               ?___awdiv 001F                                __ptext100 3246  
                              __ptext101 320C                                __ptext110 325E  
                              __ptext102 3264                                __ptext111 2E44  
                              __ptext103 324A                                __ptext112 2820  
                              __ptext104 324E                                __ptext113 2E72  
                              __ptext105 3252                                __ptext114 2B60  
                              __ptext106 3256                                __ptext115 2EA0  
                              __ptext107 325A                                __ptext116 0000  
                              __ptext108 3212                                __ptext109 3218  
                               ?___ftadd 0076                                 ?___awmod 0019  
            __end_of_i2c_masterOperation 2E44                                 ?___ftdiv 0025  
                               ?___ftneg 0019                                 ?___lldiv 0019  
                               ?___ftmul 0060                                 ?___llmod 0026  
                               ?___ftsub 0082                                __npowers_ 7D44  
                               ?___fttol 0073                 ??_do_I2C_DO_ADDRESS_NACK 0019  
            _i2c1_driver_busCollisionISR 0032        _EUSART2_TxDefaultInterruptHandler 0043  
                  __end_of_do_I2C_DO_ACK 310C             ??_INTERRUPT_InterruptManager 0007  
                       __CFG_PRICLKEN$ON 000000                              __tdiv_to_l_ 1CB8  
   EUSART2_SetTxInterruptHandler@handler 0019               ??_do_I2C_SEND_RESTART_READ 0019  
                  ?_i2c1_driver_sendNACK 0001                              ??i2_i2c_ISR 0003  
                __end_ofi2_do_I2C_DO_ACK 31D8                             ??__div_to_l_ 001F  
                       ??_mssp1_clearIRQ 0019                                 _BAUDCON1 000FB8  
                               _BAUDCON2 000F70                                 ?_isdigit 0001  
               i2_do_I2C_DO_NACK_RESTART 31C0                    ?_i2c1_driver_resetBus 0001  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0001  
                _SRAM_CONTROL_INITIALIZE 3040                               ?_do_I2C_RX 0001  
                             ?_do_I2C_TX 0001                        _i2c1_driver_start 3236  
                         __size_of_scale 0420                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 323A                        _i2c_ISR$intlevel0 2BB8  
                     ?_i2c1_driver_start 0001                   ?i2_do_I2C_DO_NACK_STOP 0001  
                           _receiveState 003A             __size_of_EUSART2_Receive_ISR 0068  
                         ___wmul@product 002B                      __size_of_returnStop 000A  
                               _PIE1bits 000F9D                                 _PIE2bits 000FA0  
                               _PIE3bits 000FA3     EUSART2_SetRxInterruptHandler@handler 0019  
                    ??_i2c1_driver_start 0019      __size_of_INTERRUPT_InterruptManager 0112  
                               i2u404_40 287C                                 _PIR1bits 000F9E  
                     __end_of__div_to_l_ 1F12                                 _PIR2bits 000FA1  
                               _PIR3bits 000FA4                      __size_of_sram_write 002E  
                               i2u396_40 2BA6                                 i2u652_48 2786  
                               i2u652_49 279A                                 i2u653_48 2A8E  
                               i2u733_48 2CC8                                 i2u653_49 2AA2  
                               i2u733_49 2CDC                                 i2u742_48 0076  
                               i2u647_48 2D08                                 i2u647_49 2D1C  
                               i2u649_48 2558                                 i2u745_48 008E  
                               i2u649_49 256C                                 i2u739_48 0060  
                               i2u748_48 00A4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                   ?i2_i2c1_driver_sendACK 0001  
                               _SSP1CON1 000FC6                                 _SSP1CON2 000FC5  
                               _SSP1STAT 000FC7                   ?i2_i2c1_driver_restart 0001  
                              _sram_read 2EF8                   ?i2_i2c1_driver_startRX 0001  
                      ___wmul@multiplier 0027                        ?_do_I2C_SEND_STOP 0001  
                             printf@flag 00A6                               printf@fval 00A8  
                             printf@prec 00AD                          ??i2_returnReset 0003  
                              main@speed 0163                __end_of_i2c1_driver_start 323A  
                          ??_returnReset 001B                       ??_do_I2C_SEND_STOP 0019  
            __size_of_i2c1_driver_TXData 0008            __size_of_EUSART2_Transmit_ISR 002E  
      __end_of_do_I2C_SEND_RESTART_WRITE 3136           sendDataToRemoteNode@commandPWM 0020  
                __end_of_do_I2C_TX_EMPTY 29AC                              _INTCON2bits 000FF1  
                              copy_data0 2B22                    ?_INTERRUPT_Initialize 0001  
                          ??_printString 001A             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 31F8  
                _do_I2C_DO_ACK$intlevel0 3104                                 _i2c_open 236A  
                  __size_of_mssp1_setIRQ 0004                      _do_I2C_DO_NACK_STOP 30F0  
                       __size_of_i2c_ISR 004E                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 3056    __end_of_EUSART2_SetRxInterruptHandler 31B0  
 __size_of_EUSART2_SetRxInterruptHandler 000A            _EUSART2_SetRxInterruptHandler 31A6  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                           ?_do_I2C_IDLE 0001                             ?_do_I2C_RCEN 0001  
                      __CFG_P2BMX$PORTB5 000000                  ??_OSCILLATOR_Initialize 0019  
                    _i2c1_driver_sendACK 3206                         __size_of___awdiv 0084  
               __size_of_i2c_masterWrite 0008                         __size_of___ftadd 01AE  
                       __size_of___awmod 0070                               ?_sram_read 0001  
           EUSART2_Receive_ISR@temp_1598 0003                    i2_do_I2C_SEND_RESTART 31E0  
                       __size_of___ftdiv 00E8                         __size_of___ftneg 0024  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                         __size_of___lldiv 0082  
                       __size_of___ftmul 00F6                      i2c1_driver_TXData@d 0019  
                       __size_of___llmod 0066                         __size_of___ftsub 0042  
                       __size_of___fttol 00F8              __size_of_EUSART1_Initialize 0034  
                 ??_i2c1_driver_sendNACK 0019          __end_ofi2_do_I2C_SEND_ADR_WRITE 30C2  
                               ___awtoft 2DA6                                 ___ftpack 22BC  
       ??_i2c1_driver_setBusCollisionISR 001B          ?_i2c1_driver_setBusCollisionISR 0019  
     _do_I2C_SEND_RESTART_READ$intlevel0 313C                     _receiveStateFeedBack 0040  
                    _i2c1_driver_restart 3232                              _fround$2858 0072  
                            _fround$2859 006F                            ?i2_returnStop 0001  
                               ___lltoft 2A08                ??_SRAM_CONTROL_INITIALIZE 0019  
                   ?_do_I2C_DO_NACK_STOP 0001                      _i2c1_driver_startRX 322A  
           __end_of_do_I2C_SEND_ADR_READ 2FFE                   ??_i2c1_driver_resetBus 0019  
                       ?i2_do_I2C_DO_ACK 0001                         __size_of_isdigit 001E  
                          ??i2_do_I2C_RX 0001                            ??i2_do_I2C_TX 0001  
                           _mssp1_setIRQ 3222                              ??_do_I2C_RX 0019  
                            ??_do_I2C_TX 001A                                 __ptext10 30A2  
                               __ptext11 2FA2                                 __ptext20 30FE  
                               __ptext12 306C                                 __ptext21 307E  
                               __ptext13 2BB2                                 __ptext30 294E  
                               __ptext22 2FD2                                 __ptext14 321E  
                               __ptext31 3222                                 __ptext23 2FE8  
                               __ptext15 26C2                                 __ptext40 322E  
                               __ptext32 3014                                 __ptext24 310C  
                               __ptext16 2404                                 __ptext41 3232  
                               __ptext33 31B8                                 __ptext25 311A  
                               __ptext17 2C00                                 __ptext50 25BC  
                               __ptext42 3206                                 __ptext34 3226  
                               __ptext26 3128                                 __ptext18 30E2  
                               __ptext51 1CB8                                 __ptext43 3236  
                               __ptext35 3200                                 __ptext27 3136  
                               __ptext19 30F0                                 __ptext60 249A  
                               __ptext52 1DEA                                 __ptext44 011E  
                               __ptext36 3262                                 __ptext28 3090  
                               __ptext61 28EE                                 __ptext53 2A08  
                               __ptext45 148C                                 __ptext37 322A  
                               __ptext29 2FFE                                 __ptext70 2ECE  
                               __ptext62 2D6C                                 __ptext54 2888  
                               __ptext46 3192                                 __ptext38 317E  
                               __ptext71 3144                                 __ptext63 21E8  
                               __ptext55 2640                                 __ptext47 18AC  
                               __ptext39 3188                                 __ptext80 323E  
                               __ptext72 323A                                 __ptext64 2F6A  
                               __ptext56 1F12                                 __ptext48 200A  
                               __ptext81 273C                                 __ptext73 2C4E  
                               __ptext65 2F20                                 __ptext57 2D2A  
                               __ptext49 27B0                                 __ptext90 31D8  
                               __ptext82 252C                                 __ptext74 319C  
                               __ptext66 2100                                 __ptext58 1B0A  
                               __ptext91 31E0                                 __ptext83 2CE2  
                               __ptext75 31A6                                 __ptext67 2DA6  
                               __ptext59 2F46                                 __ptext92 31E8  
                               __ptext84 31C0                                 __ptext76 2DDE  
                               __ptext68 22BC                                 __ptext93 31F0  
                               __ptext85 31C8                                 __ptext77 3040  
                               __ptext69 302A                                 __ptext94 315E  
                               __ptext86 31D0                                 __ptext95 30D2  
                               __ptext87 3152                                 __ptext79 2C9A  
                               __ptext96 2A64                                 __ptext88 30B2  
                               __ptext97 3242                                 __ptext89 30C2  
                               __ptext98 3056                                 __ptext99 31F8  
                           _SSP1CON1bits 000FC6                             _SSP1CON2bits 000FC5  
                               __powers_ 7D1D                     ?_i2c1_driver_sendACK 0001  
                   __end_of_do_I2C_RESET 3014                    ?i2_i2c1_driver_TXData 0001  
                ?i2_do_I2C_SEND_ADR_READ 0001                  __size_ofi2_mssp1_setIRQ 0004  
            __size_of_EUSART2_Initialize 004C                  EUSART1_Receive_ISR@temp 0004  
                   ?_i2c1_driver_restart 0001                      __end_of_returnReset 3188  
                       _i2c1_driver_open 2FBC                         _i2c1_driver_stop 322E  
                          __size_of_atoi 00D4                            __size_of_main 08EC  
                   ?_i2c1_driver_startRX 0001           __size_of_i2c1_driver_getRXData 0004  
          __end_of_i2c1_driver_getRXData 322A                    ?i2_i2c1_driver_isNACK 0001  
                    __end_of_printString 294E                  i2c_masterOperation@read 001C  
                       printString@F7188 0100                                 int$flags 0047  
                               atoi@sign 0062       __end_of_INTERRUPT_InterruptManager 011A  
             _INTERRUPT_InterruptManager 0008                                printf@len 009A  
                              printf@exp 00A4                                printf@val 00A0  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0003  
       __end_of_do_I2C_SEND_RESTART_READ 3144                             ??_returnStop 001B  
                    _EUSART1_Receive_ISR 2B60                    ??_do_I2C_DO_NACK_STOP 0019  
              mssp1_waitForEvent@timeout 0019           __size_of_i2c1_driver_setI2cISR 000A  
          __end_of_i2c1_driver_setI2cISR 3174                             ??_sram_write 0002  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                               isdigit@c 001B                   ??_INTERRUPT_Initialize 0019  
               ?i2_i2c1_driver_getRXData 0001                                 scale@scl 0072  
         __end_ofi2_do_I2C_SEND_ADR_READ 30D2                    ??_i2c1_driver_sendACK 0019  
                       ?_do_I2C_TX_EMPTY 0001        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 325A                ?i2_do_I2C_DO_ADDRESS_NACK 0001  
                 _do_I2C_DO_ADDRESS_NACK 2C00                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 3004                         __tdiv_to_l_@exp1 0027  
                       __tdiv_to_l_@cntr 0026                    ??_i2c1_driver_restart 0019  
                       __tdiv_to_l_@quot 0022                     ?_EUSART1_Receive_ISR 0001  
                  ??_i2c1_driver_startRX 0019                      __end_ofi2_do_I2C_RX 27B0  
                    __end_ofi2_do_I2C_TX 25BC                         ___lldiv@dividend 0019  
                ?_PIN_MANAGER_Initialize 0001                               _RCSTA1bits 000FAB  
                             _RCSTA2bits 000F71                       __end_of_returnStop 3192  
           __end_of_EUSART1_Transmit_ISR 2EA0              __size_of_mssp1_IRQisEnabled 0010  
                     __end_of_sram_write 2ECE      __end_ofi2_do_I2C_SEND_RESTART_WRITE 31F0  
            i2_do_I2C_SEND_RESTART_WRITE 31E8                                 printf@ap 0098  
                               printf@cp 0096                   ?i2_do_I2C_SEND_RESTART 0001  
             ??i2_do_I2C_DO_NACK_RESTART 0001              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART2_SetRxInterruptHandler 0019                              ??_sram_read 0019  
              __size_ofi2_mssp1_clearIRQ 0004                   __size_of_EUSART1_Write 003A  
                           ?__tdiv_to_l_ 0019                      _EUSART2_Receive_ISR 2820  
                            _printf$2861 0093                         ___lldiv@quotient 0021  
                      ??_i2c_masterWrite 001E                         sram_read@address 001A  
                 __size_of_i2c_setBuffer 001A                        __CFG_T3CMX$PORTC0 000000  
                            _returnReset 317E         _do_I2C_DO_NACK_RESTART$intlevel0 30E8  
                ??i2_do_I2C_DO_NACK_STOP 0001                   ??i2_i2c1_driver_TXData 0001  
           ??i2_do_I2C_SEND_RESTART_READ 0001                    ??_EUSART1_Receive_ISR 0004  
         __end_of_PIN_MANAGER_Initialize 2EF8              __end_of_i2c_busCollisionISR 321E  
                            _printString 28EE          ??_EUSART2_SetTxInterruptHandler 001B  
                   ?_EUSART2_Receive_ISR 0001              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0001                        __CFG_FOSC$INTIO67 000000  
          __size_of_sendDataToRemoteNode 005C                   ??i2_i2c1_driver_isNACK 0001  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                    _do_I2C_SEND_ADR_WRITE 2FD2  
                ??i2_i2c1_driver_sendACK 0001                     _do_I2C_SEND_ADR_READ 2FE8  
               ??i2_i2c1_driver_resetBus 0001        _EUSART2_RxDefaultInterruptHandler 00F8  
                ??i2_i2c1_driver_restart 0001  
