

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb  2 18:36:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,inline
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F25K22 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataCOMRAM
   108  000E94                     __pidataCOMRAM:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _i2c_slave_writeData
   112  000E94  55                 	db	85
   113                           
   114                           	psect	nvBANK0
   115  000093                     __pnvBANK0:
   116                           	opt stack 0
   117  000093                     _timer1ReloadVal:
   118                           	opt stack 0
   119  000093                     	ds	2
   120  000095                     _i2c2_driver_i2cISR:
   121                           	opt stack 0
   122  000095                     	ds	2
   123  0000                     _CCPR5H	set	3926
   124  0000                     _CCPR5L	set	3925
   125  0000                     _CCP5CON	set	3924
   126  0000                     _CCPTMRS1bits	set	3912
   127  0000                     _CCPR4H	set	3929
   128  0000                     _CCPR4L	set	3928
   129  0000                     _CCP4CON	set	3927
   130  0000                     _ANSELA	set	3896
   131  0000                     _ANSELB	set	3897
   132  0000                     _ANSELC	set	3898
   133  0000                     _TMR1	set	4046
   134  0000                     _PORTC	set	3970
   135  0000                     _PORTA	set	3968
   136  0000                     _PORTAbits	set	3968
   137  0000                     _TXREG2	set	3955
   138  0000                     _RCREG2	set	3956
   139  0000                     _RCSTA2bits	set	3953
   140  0000                     _SPBRGH2	set	3958
   141  0000                     _SPBRG2	set	3957
   142  0000                     _TXSTA2	set	3954
   143  0000                     _RCSTA2	set	3953
   144  0000                     _BAUDCON2	set	3952
   145  0000                     _ADCON0bits	set	4034
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADRESL	set	4035
   148  0000                     _ADCON2	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON0	set	4034
   151  0000                     _PIR4bits	set	3963
   152  0000                     _T1GCONbits	set	4044
   153  0000                     _T1CONbits	set	4045
   154  0000                     _T1CON	set	4045
   155  0000                     _TMR1L	set	4046
   156  0000                     _TMR1H	set	4047
   157  0000                     _T1GCON	set	4044
   158  0000                     _SSP2STATbits	set	3949
   159  0000                     _SSP2MSK	set	3946
   160  0000                     _SSP2BUF	set	3951
   161  0000                     _SSP2CON2bits	set	3947
   162  0000                     _SSP2ADD	set	3950
   163  0000                     _SSP2CON2	set	3947
   164  0000                     _SSP2CON1	set	3948
   165  0000                     _SSP2STAT	set	3949
   166  0000                     _SSP2CON1bits	set	3948
   167  0000                     _T2CONbits	set	4026
   168  0000                     _T2CON	set	4026
   169  0000                     _TMR2	set	4028
   170  0000                     _PR2	set	4027
   171  0000                     _INTCON2bits	set	4081
   172  0000                     _WPUB	set	3937
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISB	set	3987
   175  0000                     _TRISA	set	3986
   176  0000                     _LATC	set	3979
   177  0000                     _LATB	set	3978
   178  0000                     _LATA	set	3977
   179  0000                     _PIR3bits	set	4004
   180  0000                     _PIE3bits	set	4003
   181  0000                     _PIR1bits	set	3998
   182  0000                     _PIE1bits	set	3997
   183  0000                     _INTCONbits	set	4082
   184  0000                     _RCONbits	set	4048
   185  0000                     _OSCTUNE	set	3995
   186  0000                     _OSCCON2	set	4050
   187  0000                     _OSCCON	set	4051
   188                           
   189                           ; #config settings
   190  0000                     
   191                           	psect	cinit
   192  000B14                     __pcinit:
   193                           	opt stack 0
   194  000B14                     start_initialization:
   195                           	opt stack 0
   196  000B14                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Initialize objects allocated to COMRAM (1 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  000B14  0E94               	movlw	low __pidataCOMRAM
   202  000B16  6EF6               	movwf	tblptrl,c
   203  000B18  0E0E               	movlw	high __pidataCOMRAM
   204  000B1A  6EF7               	movwf	tblptrh,c
   205  000B1C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  000B1E  6EF8               	movwf	tblptru,c
   207  000B20  0009               	tblrd		*+	;fetch initializer
   208  000B22  CFF5 F049          	movff	tablat,__pdataCOMRAM
   209                           
   210                           ; Clear objects allocated to BANK0 (8 bytes)
   211  000B26  EE00  F08B         	lfsr	0,__pbssBANK0
   212  000B2A  0E08               	movlw	8
   213  000B2C                     clear_0:
   214  000B2C  6AEE               	clrf	postinc0,c
   215  000B2E  06E8               	decf	wreg,f,c
   216  000B30  E1FD               	bnz	clear_0
   217                           
   218                           ; Clear objects allocated to COMRAM (19 bytes)
   219  000B32  EE00  F036         	lfsr	0,__pbssCOMRAM
   220  000B36  0E13               	movlw	19
   221  000B38                     clear_1:
   222  000B38  6AEE               	clrf	postinc0,c
   223  000B3A  06E8               	decf	wreg,f,c
   224  000B3C  E1FD               	bnz	clear_1
   225  000B3E                     end_of_initialization:
   226                           	opt stack 0
   227  000B3E                     __end_of__initialization:
   228                           	opt stack 0
   229  000B3E  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   230  000B40  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   231  000B42  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  000B44  6EF8               	movwf	tblptru,c
   233  000B46  0100               	movlb	0
   234  000B48  EF74  F000         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssCOMRAM
   243  000036                     __pbssCOMRAM:
   244                           	opt stack 0
   245  000036                     _pwmCommand:
   246                           	opt stack 0
   247  000036                     	ds	4
   248  00003A                     _i2c_slave_AddrInterruptHandler:
   249                           	opt stack 0
   250  00003A                     	ds	2
   251  00003C                     _i2c_slave_WrInterruptHandler:
   252                           	opt stack 0
   253  00003C                     	ds	2
   254  00003E                     _i2c_slave_RdInterruptHandler:
   255                           	opt stack 0
   256  00003E                     	ds	2
   257  000040                     _sAddr:
   258                           	opt stack 0
   259  000040                     	ds	2
   260  000042                     _sRead:
   261                           	opt stack 0
   262  000042                     	ds	2
   263  000044                     _sWrite:
   264                           	opt stack 0
   265  000044                     	ds	2
   266  000046                     _i2c2_driver_busCollisionISR:
   267                           	opt stack 0
   268  000046                     	ds	2
   269  000048                     _i2c1Data:
   270                           	opt stack 0
   271  000048                     	ds	1
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	dataCOMRAM
   280  000049                     __pdataCOMRAM:
   281                           	opt stack 0
   282  000049                     _i2c_slave_writeData:
   283                           	opt stack 0
   284  000049                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	bssBANK0
   293  00008B                     __pbssBANK0:
   294                           	opt stack 0
   295  00008B                     _currentPWMspeed:
   296                           	opt stack 0
   297  00008B                     	ds	4
   298  00008F                     _count:
   299                           	opt stack 0
   300  00008F                     	ds	2
   301  000091                     _adcValue:
   302                           	opt stack 0
   303  000091                     	ds	2
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	cstackBANK0
   312  000060                     __pcstackBANK0:
   313                           	opt stack 0
   314  000060                     ??___ftmul:
   315                           
   316                           ; 1 bytes @ 0x0
   317  000060                     	ds	3
   318  000063                     ___ftmul@exp:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x3
   322  000063                     	ds	1
   323  000064                     ___ftmul@f3_as_product:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x4
   327  000064                     	ds	3
   328  000067                     ___ftmul@cntr:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x7
   332  000067                     	ds	1
   333  000068                     ___ftmul@sign:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x8
   337  000068                     	ds	1
   338  000069                     ?___ftadd:
   339                           	opt stack 0
   340  000069                     ___ftadd@f1:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x9
   344  000069                     	ds	3
   345  00006C                     ___ftadd@f2:
   346                           	opt stack 0
   347                           
   348                           ; 3 bytes @ 0xC
   349  00006C                     	ds	3
   350  00006F                     ??___ftadd:
   351                           
   352                           ; 1 bytes @ 0xF
   353  00006F                     	ds	3
   354  000072                     ___ftadd@sign:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x12
   358  000072                     	ds	1
   359  000073                     ___ftadd@exp2:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x13
   363  000073                     	ds	1
   364  000074                     ___ftadd@exp1:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x14
   368  000074                     	ds	1
   369  000075                     ?___fttol:
   370                           	opt stack 0
   371  000075                     ___fttol@f1:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0x15
   375  000075                     	ds	4
   376  000079                     ??___fttol:
   377                           
   378                           ; 1 bytes @ 0x19
   379  000079                     	ds	5
   380  00007E                     ___fttol@sign1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x1E
   384  00007E                     	ds	1
   385  00007F                     ___fttol@lval:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x1F
   389  00007F                     	ds	4
   390  000083                     ___fttol@exp1:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x23
   394  000083                     	ds	1
   395  000084                     ??_main:
   396                           
   397                           ; 1 bytes @ 0x24
   398  000084                     	ds	2
   399  000086                     main@error:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x26
   403  000086                     	ds	2
   404  000088                     main@parameter:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x28
   408  000088                     	ds	2
   409  00008A                     main@commandType:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x2A
   413  00008A                     	ds	1
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           
   421                           	psect	cstackCOMRAM
   422  000001                     __pcstackCOMRAM:
   423                           	opt stack 0
   424  000001                     ??_i2c2_driver_isData:
   425  000001                     ??_i2c2_driver_isRead:
   426  000001                     i2c2_driver_TXData@d:
   427                           	opt stack 0
   428  000001                     sram_write@data:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x0
   432  000001                     	ds	1
   433  000002                     ??_sram_write:
   434                           
   435                           ; 1 bytes @ 0x1
   436  000002                     	ds	1
   437  000003                     sram_write@address:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x2
   441  000003                     	ds	1
   442  000004                     ??_INTERRUPT_InterruptManager:
   443                           
   444                           ; 1 bytes @ 0x3
   445  000004                     	ds	18
   446  000016                     ??_sram_read:
   447  000016                     ?_ADC_GetConversion:
   448                           	opt stack 0
   449  000016                     ?___lwmod:
   450                           	opt stack 0
   451  000016                     ?___ftpack:
   452                           	opt stack 0
   453  000016                     i2c2_driver_setAddr@addr:
   454                           	opt stack 0
   455  000016                     i2c2_driver_setMask@mask:
   456                           	opt stack 0
   457  000016                     EUSART2_Write@txData:
   458                           	opt stack 0
   459  000016                     PWM4_LoadDutyValue@dutyValue:
   460                           	opt stack 0
   461  000016                     i2c2_driver_setBusCollisionISR@f:
   462                           	opt stack 0
   463  000016                     i2c2_driver_setI2cISR@f:
   464                           	opt stack 0
   465  000016                     i2c_slave_setReadIntHandler@handler:
   466                           	opt stack 0
   467  000016                     i2c_slave_setWriteIntHandler@handler:
   468                           	opt stack 0
   469  000016                     i2c_slave_setAddrIntHandler@handler:
   470                           	opt stack 0
   471  000016                     ___lwmod@dividend:
   472                           	opt stack 0
   473  000016                     ___ftpack@arg:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0x15
   477  000016                     	ds	1
   478  000017                     sram_read@address:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x16
   482  000017                     	ds	1
   483  000018                     ??_PWM4_LoadDutyValue:
   484  000018                     ??_ADC_GetConversion:
   485  000018                     sram_read@data:
   486                           	opt stack 0
   487  000018                     i2c_slave_setIsrHandler@handler:
   488                           	opt stack 0
   489  000018                     ___lwmod@divisor:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x17
   493  000018                     	ds	1
   494  000019                     ___ftpack@exp:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x18
   498  000019                     	ds	1
   499  00001A                     ADC_GetConversion@channel:
   500                           	opt stack 0
   501  00001A                     ___ftpack@sign:
   502                           	opt stack 0
   503  00001A                     ___lwmod@counter:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x19
   507  00001A                     	ds	1
   508  00001B                     ??___ftpack:
   509                           
   510                           ; 1 bytes @ 0x1A
   511  00001B                     	ds	3
   512  00001E                     ?___lltoft:
   513                           	opt stack 0
   514  00001E                     ?___lwtoft:
   515                           	opt stack 0
   516  00001E                     ___lwtoft@c:
   517                           	opt stack 0
   518  00001E                     ___lltoft@c:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x1D
   522  00001E                     	ds	3
   523  000021                     ?___ftdiv:
   524                           	opt stack 0
   525  000021                     ___ftdiv@f1:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x20
   529  000021                     	ds	1
   530  000022                     ??___lltoft:
   531                           
   532                           ; 1 bytes @ 0x21
   533  000022                     	ds	2
   534  000024                     ___ftdiv@f2:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x23
   538  000024                     	ds	2
   539  000026                     ___lltoft@exp:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x25
   543  000026                     	ds	1
   544  000027                     ??___ftdiv:
   545  000027                     ?___ftneg:
   546                           	opt stack 0
   547  000027                     ___ftneg@f1:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x26
   551  000027                     	ds	3
   552  00002A                     ___ftdiv@cntr:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x29
   556  00002A                     	ds	1
   557  00002B                     ___ftdiv@f3:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x2A
   561  00002B                     	ds	3
   562  00002E                     ___ftdiv@exp:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x2D
   566  00002E                     	ds	1
   567  00002F                     ___ftdiv@sign:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x2E
   571  00002F                     	ds	1
   572  000030                     ?___ftmul:
   573                           	opt stack 0
   574  000030                     ___ftmul@f1:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x2F
   578  000030                     	ds	3
   579  000033                     ___ftmul@f2:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x32
   583  000033                     	ds	3
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           
   591 ;;
   592 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   593 ;;
   594 ;; *************** function _main *****************
   595 ;; Defined at:
   596 ;;		line 24 in file "main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  error           2   38[BANK0 ] int 
   601 ;;  parameter       2   40[BANK0 ] unsigned int 
   602 ;;  commandType     1   42[BANK0 ] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   612 ;;      Params:         0       0       0       0       0       0       0
   613 ;;      Locals:         0       5       0       0       0       0       0
   614 ;;      Temps:          0       2       0       0       0       0       0
   615 ;;      Totals:         0       7       0       0       0       0       0
   616 ;;Total ram usage:        7 bytes
   617 ;; Hardware stack levels required when called:    8
   618 ;; This function calls:
   619 ;;		_ADC_GetConversion
   620 ;;		_EUSART2_Write
   621 ;;		_PWM4_Initialize
   622 ;;		_PWM4_LoadDutyValue
   623 ;;		_SRAM_CONTROL_INITIALIZE
   624 ;;		_SYSTEM_Initialize
   625 ;;		_TMR1_Initialize
   626 ;;		_TMR1_StartTimer
   627 ;;		_TMR2_Initialize
   628 ;;		_TMR2_StartTimer
   629 ;;		___ftadd
   630 ;;		___ftdiv
   631 ;;		___ftmul
   632 ;;		___ftneg
   633 ;;		___fttol
   634 ;;		___lltoft
   635 ;;		___lwmod
   636 ;;		___lwtoft
   637 ;;		_i2c_slave_open
   638 ;;		_sram_read
   639 ;; This function is called by:
   640 ;;		Startup code after reset
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text0
   645  0000E8                     __ptext0:
   646                           	opt stack 0
   647  0000E8                     _main:
   648                           	opt stack 23
   649                           
   650                           ;main.c: 27: SYSTEM_Initialize();
   651                           
   652                           ;incstack = 0
   653  0000E8  EC2E  F006         	call	_SYSTEM_Initialize	;wreg free
   654                           
   655                           ;main.c: 30: (INTCONbits.GIE = 1);
   656  0000EC  8EF2               	bsf	intcon,7,c	;volatile
   657                           
   658                           ;main.c: 33: (INTCONbits.PEIE = 1);
   659  0000EE  8CF2               	bsf	intcon,6,c	;volatile
   660                           
   661                           ;main.c: 38: i2c_slave_open();
   662  0000F0  EC40  F005         	call	_i2c_slave_open	;wreg free
   663                           
   664                           ;main.c: 42: TMR2_Initialize();
   665  0000F4  ECE3  F006         	call	_TMR2_Initialize	;wreg free
   666                           
   667                           ;main.c: 43: TMR2_StartTimer();
   668  0000F8  EC3D  F007         	call	_TMR2_StartTimer	;wreg free
   669                           
   670                           ;main.c: 45: TMR1_Initialize();
   671  0000FC  EC95  F006         	call	_TMR1_Initialize	;wreg free
   672                           
   673                           ;main.c: 46: TMR1_StartTimer();
   674  000100  EC3F  F007         	call	_TMR1_StartTimer	;wreg free
   675                           
   676                           ;main.c: 49: PWM4_Initialize();
   677  000104  ECCF  F006         	call	_PWM4_Initialize	;wreg free
   678                           
   679                           ;main.c: 52: PWM4_LoadDutyValue(0);
   680  000108  0E00               	movlw	0
   681  00010A  6E17               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   682  00010C  0E00               	movlw	0
   683  00010E  6E16               	movwf	PWM4_LoadDutyValue@dutyValue,c
   684  000110  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   685                           
   686                           ;main.c: 53: currentPWMspeed = 0;
   687  000114  0E00               	movlw	0
   688  000116  0100               	movlb	0	; () banked
   689  000118  6F8B               	movwf	_currentPWMspeed& (0+255),b	;volatile
   690  00011A  0E00               	movlw	0
   691  00011C  6F8C               	movwf	(_currentPWMspeed+1)& (0+255),b	;volatile
   692  00011E  0E00               	movlw	0
   693  000120  6F8D               	movwf	(_currentPWMspeed+2)& (0+255),b	;volatile
   694  000122  0E00               	movlw	0
   695  000124  6F8E               	movwf	(_currentPWMspeed+3)& (0+255),b	;volatile
   696                           
   697                           ; BSR set to: 0
   698                           ;main.c: 56: SRAM_CONTROL_INITIALIZE();
   699  000126  ECBA  F006         	call	_SRAM_CONTROL_INITIALIZE	;wreg free
   700                           
   701                           ;main.c: 59: adcValue = 0;
   702  00012A  0E00               	movlw	0
   703  00012C  0100               	movlb	0	; () banked
   704  00012E  6F92               	movwf	(_adcValue+1)& (0+255),b
   705  000130  0E00               	movlw	0
   706  000132  6F91               	movwf	_adcValue& (0+255),b
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 60: count = 1;
   710  000134  0E00               	movlw	0
   711  000136  6F90               	movwf	(_count+1)& (0+255),b
   712  000138  0E01               	movlw	1
   713  00013A  6F8F               	movwf	_count& (0+255),b
   714  00013C                     l695:
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 63: {
   718                           ;main.c: 65: if(pwmCommand.state == RECEIVED) {
   719  00013C  0E02               	movlw	2
   720  00013E  1839               	xorwf	_pwmCommand+3,w,c	;volatile
   721  000140  A4D8               	btfss	status,2,c
   722  000142  D0A9               	goto	l710
   723                           
   724                           ; BSR set to: 0
   725                           ;main.c: 68: uint8_t commandType = sram_read(0);
   726  000144  0E00               	movlw	0
   727  000146  EC1A  F006         	call	_sram_read
   728  00014A  0100               	movlb	0	; () banked
   729  00014C  6F8A               	movwf	main@commandType& (0+255),b
   730                           
   731                           ;main.c: 69: uint16_t parameter = sram_read(1) << 8;
   732  00014E  0E01               	movlw	1
   733  000150  EC1A  F006         	call	_sram_read
   734  000154  0100               	movlb	0	; () banked
   735  000156  6F89               	movwf	(main@parameter+1)& (0+255),b
   736  000158  6B88               	clrf	main@parameter& (0+255),b
   737                           
   738                           ;main.c: 70: parameter |= sram_read(2);
   739  00015A  0E02               	movlw	2
   740  00015C  EC1A  F006         	call	_sram_read
   741  000160  0100               	movlb	0	; () banked
   742  000162  6F84               	movwf	??_main& (0+255),b
   743  000164  5184               	movf	??_main& (0+255),w,b
   744  000166  1388               	iorwf	main@parameter& (0+255),f,b
   745                           
   746                           ; BSR set to: 0
   747                           ;main.c: 73: if(commandType == SET) {
   748  000168  518A               	movf	main@commandType& (0+255),w,b
   749  00016A  A4D8               	btfss	status,2,c
   750  00016C  D01C               	goto	l697
   751                           
   752                           ; BSR set to: 0
   753                           ;main.c: 75: if(parameter > 639) {
   754  00016E  0E80               	movlw	128
   755  000170  5D88               	subwf	main@parameter& (0+255),w,b
   756  000172  0E02               	movlw	2
   757  000174  5989               	subwfb	(main@parameter+1)& (0+255),w,b
   758  000176  A0D8               	btfss	status,0,c
   759  000178  D009               	goto	l698
   760                           
   761                           ; BSR set to: 0
   762                           ;main.c: 76: currentPWMspeed = 639;
   763  00017A  0E7F               	movlw	127
   764  00017C  6F8B               	movwf	_currentPWMspeed& (0+255),b	;volatile
   765  00017E  0E02               	movlw	2
   766  000180  6F8C               	movwf	(_currentPWMspeed+1)& (0+255),b	;volatile
   767  000182  0E00               	movlw	0
   768  000184  6F8D               	movwf	(_currentPWMspeed+2)& (0+255),b	;volatile
   769  000186  0E00               	movlw	0
   770  000188  6F8E               	movwf	(_currentPWMspeed+3)& (0+255),b	;volatile
   771                           
   772                           ;main.c: 77: } else {
   773  00018A  D006               	goto	l699
   774  00018C                     l698:
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 79: currentPWMspeed = parameter;
   778                           
   779                           ; BSR set to: 0
   780  00018C  C088  F08B         	movff	main@parameter,_currentPWMspeed	;volatile
   781  000190  C089  F08C         	movff	main@parameter+1,_currentPWMspeed+1	;volatile
   782  000194  6B8D               	clrf	(_currentPWMspeed+2)& (0+255),b	;volatile
   783  000196  6B8E               	clrf	(_currentPWMspeed+3)& (0+255),b	;volatile
   784  000198                     l699:
   785                           
   786                           ; BSR set to: 0
   787                           ;main.c: 80: }
   788                           ;main.c: 81: PWM4_LoadDutyValue(currentPWMspeed);
   789                           
   790                           ; BSR set to: 0
   791  000198  C08B  F016         	movff	_currentPWMspeed,PWM4_LoadDutyValue@dutyValue	;volatile
   792  00019C  C08C  F017         	movff	_currentPWMspeed+1,PWM4_LoadDutyValue@dutyValue+1	;volatile
   793  0001A0  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   794                           
   795                           ;main.c: 82: } else if(commandType == INCREMENT) {
   796  0001A4  D05D               	goto	l709
   797  0001A6                     l697:
   798  0001A6  0100               	movlb	0	; () banked
   799  0001A8  058A               	decf	main@commandType& (0+255),w,b
   800  0001AA  A4D8               	btfss	status,2,c
   801  0001AC  D01E               	goto	l701
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 84: currentPWMspeed += 3;
   805  0001AE  0E03               	movlw	3
   806  0001B0  278B               	addwf	_currentPWMspeed& (0+255),f,b	;volatile
   807  0001B2  0E00               	movlw	0
   808  0001B4  238C               	addwfc	(_currentPWMspeed+1)& (0+255),f,b	;volatile
   809  0001B6  238D               	addwfc	(_currentPWMspeed+2)& (0+255),f,b	;volatile
   810  0001B8  238E               	addwfc	(_currentPWMspeed+3)& (0+255),f,b	;volatile
   811                           
   812                           ;main.c: 85: if(currentPWMspeed > 639) {
   813  0001BA  518E               	movf	(_currentPWMspeed+3)& (0+255),w,b	;volatile
   814  0001BC  118D               	iorwf	(_currentPWMspeed+2)& (0+255),w,b	;volatile
   815  0001BE  E106               	bnz	u2290
   816  0001C0  0E80               	movlw	128
   817  0001C2  5D8B               	subwf	_currentPWMspeed& (0+255),w,b	;volatile
   818  0001C4  0E02               	movlw	2
   819  0001C6  598C               	subwfb	(_currentPWMspeed+1)& (0+255),w,b	;volatile
   820  0001C8  A0D8               	btfss	status,0,c
   821  0001CA  D008               	goto	l702
   822  0001CC                     u2290:
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 86: currentPWMspeed = 639;
   826  0001CC  0E7F               	movlw	127
   827  0001CE  6F8B               	movwf	_currentPWMspeed& (0+255),b	;volatile
   828  0001D0  0E02               	movlw	2
   829  0001D2  6F8C               	movwf	(_currentPWMspeed+1)& (0+255),b	;volatile
   830  0001D4  0E00               	movlw	0
   831  0001D6  6F8D               	movwf	(_currentPWMspeed+2)& (0+255),b	;volatile
   832  0001D8  0E00               	movlw	0
   833  0001DA  6F8E               	movwf	(_currentPWMspeed+3)& (0+255),b	;volatile
   834  0001DC                     l702:
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 87: }
   838                           ;main.c: 88: PWM4_LoadDutyValue(currentPWMspeed);
   839                           
   840                           ; BSR set to: 0
   841  0001DC  C08B  F016         	movff	_currentPWMspeed,PWM4_LoadDutyValue@dutyValue	;volatile
   842  0001E0  C08C  F017         	movff	_currentPWMspeed+1,PWM4_LoadDutyValue@dutyValue+1	;volatile
   843  0001E4  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   844                           
   845                           ;main.c: 89: } else if(commandType == DECREMENT) {
   846  0001E8  D03B               	goto	l709
   847  0001EA                     l701:
   848  0001EA  0E02               	movlw	2
   849  0001EC  0100               	movlb	0	; () banked
   850  0001EE  198A               	xorwf	main@commandType& (0+255),w,b
   851  0001F0  A4D8               	btfss	status,2,c
   852  0001F2  D01E               	goto	l704
   853                           
   854                           ; BSR set to: 0
   855                           ;main.c: 91: currentPWMspeed -= 3;
   856  0001F4  0E03               	movlw	3
   857  0001F6  5F8B               	subwf	_currentPWMspeed& (0+255),f,b	;volatile
   858  0001F8  0E00               	movlw	0
   859  0001FA  5B8C               	subwfb	(_currentPWMspeed+1)& (0+255),f,b	;volatile
   860  0001FC  5B8D               	subwfb	(_currentPWMspeed+2)& (0+255),f,b	;volatile
   861  0001FE  5B8E               	subwfb	(_currentPWMspeed+3)& (0+255),f,b	;volatile
   862                           
   863                           ;main.c: 92: if(currentPWMspeed > 639) {
   864  000200  518E               	movf	(_currentPWMspeed+3)& (0+255),w,b	;volatile
   865  000202  118D               	iorwf	(_currentPWMspeed+2)& (0+255),w,b	;volatile
   866  000204  E106               	bnz	u2310
   867  000206  0E80               	movlw	128
   868  000208  5D8B               	subwf	_currentPWMspeed& (0+255),w,b	;volatile
   869  00020A  0E02               	movlw	2
   870  00020C  598C               	subwfb	(_currentPWMspeed+1)& (0+255),w,b	;volatile
   871  00020E  A0D8               	btfss	status,0,c
   872  000210  D008               	goto	l705
   873  000212                     u2310:
   874                           
   875                           ; BSR set to: 0
   876                           ;main.c: 93: currentPWMspeed = 0;
   877  000212  0E00               	movlw	0
   878  000214  6F8B               	movwf	_currentPWMspeed& (0+255),b	;volatile
   879  000216  0E00               	movlw	0
   880  000218  6F8C               	movwf	(_currentPWMspeed+1)& (0+255),b	;volatile
   881  00021A  0E00               	movlw	0
   882  00021C  6F8D               	movwf	(_currentPWMspeed+2)& (0+255),b	;volatile
   883  00021E  0E00               	movlw	0
   884  000220  6F8E               	movwf	(_currentPWMspeed+3)& (0+255),b	;volatile
   885  000222                     l705:
   886                           
   887                           ; BSR set to: 0
   888                           ;main.c: 94: }
   889                           ;main.c: 95: PWM4_LoadDutyValue(currentPWMspeed);
   890                           
   891                           ; BSR set to: 0
   892  000222  C08B  F016         	movff	_currentPWMspeed,PWM4_LoadDutyValue@dutyValue	;volatile
   893  000226  C08C  F017         	movff	_currentPWMspeed+1,PWM4_LoadDutyValue@dutyValue+1	;volatile
   894  00022A  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   895                           
   896                           ;main.c: 96: } else if(commandType == ADJUST) {
   897  00022E  D018               	goto	l709
   898  000230                     l704:
   899  000230  0E03               	movlw	3
   900  000232  0100               	movlb	0	; () banked
   901  000234  198A               	xorwf	main@commandType& (0+255),w,b
   902  000236  A4D8               	btfss	status,2,c
   903  000238  D013               	goto	l709
   904                           
   905                           ; BSR set to: 0
   906                           ;main.c: 97: if(parameter > 639) {
   907  00023A  0E80               	movlw	128
   908  00023C  5D88               	subwf	main@parameter& (0+255),w,b
   909  00023E  0E02               	movlw	2
   910  000240  5989               	subwfb	(main@parameter+1)& (0+255),w,b
   911  000242  A0D8               	btfss	status,0,c
   912  000244  D007               	goto	l708
   913                           
   914                           ; BSR set to: 0
   915                           ;main.c: 98: PWM4_LoadDutyValue(639);
   916  000246  0E02               	movlw	2
   917  000248  6E17               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   918  00024A  0E7F               	movlw	127
   919  00024C  6E16               	movwf	PWM4_LoadDutyValue@dutyValue,c
   920  00024E  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   921                           
   922                           ;main.c: 99: } else {
   923  000252  D006               	goto	l709
   924  000254                     l708:
   925                           
   926                           ;main.c: 100: PWM4_LoadDutyValue(parameter);
   927  000254  C088  F016         	movff	main@parameter,PWM4_LoadDutyValue@dutyValue
   928  000258  C089  F017         	movff	main@parameter+1,PWM4_LoadDutyValue@dutyValue+1
   929  00025C  ECA6  F005         	call	_PWM4_LoadDutyValue	;wreg free
   930  000260                     l709:
   931                           
   932                           ;main.c: 101: }
   933                           ;main.c: 102: }
   934                           ;main.c: 105: pwmCommand.state = EXECUTED;
   935  000260  0E03               	movlw	3
   936  000262  6E39               	movwf	_pwmCommand+3,c	;volatile
   937                           
   938                           ;main.c: 108: adcValue = 0;
   939  000264  0E00               	movlw	0
   940  000266  0100               	movlb	0	; () banked
   941  000268  6F92               	movwf	(_adcValue+1)& (0+255),b
   942  00026A  0E00               	movlw	0
   943  00026C  6F91               	movwf	_adcValue& (0+255),b
   944                           
   945                           ; BSR set to: 0
   946                           ;main.c: 109: count = 1;
   947  00026E  0E00               	movlw	0
   948  000270  6F90               	movwf	(_count+1)& (0+255),b
   949  000272  0E01               	movlw	1
   950  000274  6F8F               	movwf	_count& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           ;main.c: 110: if(commandType == ADJUST) {
   954  000276  0E03               	movlw	3
   955  000278  198A               	xorwf	main@commandType& (0+255),w,b
   956  00027A  A4D8               	btfss	status,2,c
   957  00027C  D00C               	goto	l710
   958                           
   959                           ; BSR set to: 0
   960                           ;main.c: 111: _delay((unsigned long)((100)*(16000000/4000.0)));
   961  00027E  0E03               	movlw	3
   962  000280  0100               	movlb	0	; () banked
   963  000282  6F85               	movwf	(??_main+1)& (0+255),b
   964  000284  0E08               	movlw	8
   965  000286  6F84               	movwf	??_main& (0+255),b
   966  000288  0E77               	movlw	119
   967  00028A                     u2377:
   968  00028A  2EE8               	decfsz	wreg,f,c
   969  00028C  D7FE               	bra	u2377
   970  00028E  2F84               	decfsz	??_main& (0+255),f,b
   971  000290  D7FC               	bra	u2377
   972  000292  2F85               	decfsz	(??_main+1)& (0+255),f,b
   973  000294  D7FA               	bra	u2377
   974  000296                     l710:
   975                           
   976                           ;main.c: 112: }
   977                           ;main.c: 113: }
   978                           ;main.c: 118: if(count % 5000 == 0) {
   979  000296  C08F  F016         	movff	_count,___lwmod@dividend
   980  00029A  C090  F017         	movff	_count+1,___lwmod@dividend+1
   981  00029E  0E13               	movlw	19
   982  0002A0  6E19               	movwf	___lwmod@divisor+1,c
   983  0002A2  0E88               	movlw	136
   984  0002A4  6E18               	movwf	___lwmod@divisor,c
   985  0002A6  EC69  F005         	call	___lwmod	;wreg free
   986  0002AA  5016               	movf	?___lwmod,w,c
   987  0002AC  1017               	iorwf	?___lwmod+1,w,c
   988  0002AE  A4D8               	btfss	status,2,c
   989  0002B0  D05F               	goto	l711
   990                           
   991                           ;main.c: 120: int16_t error = (adcValue / 65208.0) * 639 - currentPWMspeed;
   992  0002B2  C08B  F01E         	movff	_currentPWMspeed,___lltoft@c	;volatile
   993  0002B6  C08C  F01F         	movff	_currentPWMspeed+1,___lltoft@c+1	;volatile
   994  0002BA  C08D  F020         	movff	_currentPWMspeed+2,___lltoft@c+2	;volatile
   995  0002BE  C08E  F021         	movff	_currentPWMspeed+3,___lltoft@c+3	;volatile
   996  0002C2  EC12  F005         	call	___lltoft	;wreg free
   997  0002C6  C01E  F027         	movff	?___lltoft,___ftneg@f1
   998  0002CA  C01F  F028         	movff	?___lltoft+1,___ftneg@f1+1
   999  0002CE  C020  F029         	movff	?___lltoft+2,___ftneg@f1+2
  1000  0002D2  EC53  F006         	call	___ftneg	;wreg free
  1001  0002D6  C027  F06C         	movff	?___ftneg,___ftadd@f2
  1002  0002DA  C028  F06D         	movff	?___ftneg+1,___ftadd@f2+1
  1003  0002DE  C029  F06E         	movff	?___ftneg+2,___ftadd@f2+2
  1004  0002E2  0EC0               	movlw	192
  1005  0002E4  6E33               	movwf	___ftmul@f2,c
  1006  0002E6  0E1F               	movlw	31
  1007  0002E8  6E34               	movwf	___ftmul@f2+1,c
  1008  0002EA  0E44               	movlw	68
  1009  0002EC  6E35               	movwf	___ftmul@f2+2,c
  1010  0002EE  0EB8               	movlw	184
  1011  0002F0  6E24               	movwf	___ftdiv@f2,c
  1012  0002F2  0E7E               	movlw	126
  1013  0002F4  6E25               	movwf	___ftdiv@f2+1,c
  1014  0002F6  0E47               	movlw	71
  1015  0002F8  6E26               	movwf	___ftdiv@f2+2,c
  1016  0002FA  C091  F01E         	movff	_adcValue,___lwtoft@c
  1017  0002FE  C092  F01F         	movff	_adcValue+1,___lwtoft@c+1
  1018  000302  EC41  F006         	call	___lwtoft	;wreg free
  1019  000306  C01E  F021         	movff	?___lwtoft,___ftdiv@f1
  1020  00030A  C01F  F022         	movff	?___lwtoft+1,___ftdiv@f1+1
  1021  00030E  C020  F023         	movff	?___lwtoft+2,___ftdiv@f1+2
  1022  000312  EC16  F004         	call	___ftdiv	;wreg free
  1023  000316  C021  F030         	movff	?___ftdiv,___ftmul@f1
  1024  00031A  C022  F031         	movff	?___ftdiv+1,___ftmul@f1+1
  1025  00031E  C023  F032         	movff	?___ftdiv+2,___ftmul@f1+2
  1026  000322  EC9B  F003         	call	___ftmul	;wreg free
  1027  000326  C030  F069         	movff	?___ftmul,___ftadd@f1
  1028  00032A  C031  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  1029  00032E  C032  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  1030  000332  EC48  F002         	call	___ftadd	;wreg free
  1031  000336  C069  F075         	movff	?___ftadd,___fttol@f1
  1032  00033A  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  1033  00033E  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  1034  000342  EC1F  F003         	call	___fttol	;wreg free
  1035  000346  C075  F086         	movff	?___fttol,main@error
  1036  00034A  C076  F087         	movff	?___fttol+1,main@error+1
  1037                           
  1038                           ;main.c: 121: EUSART2_Write((error >> 8) & 0xFF );
  1039  00034E  0100               	movlb	0	; () banked
  1040  000350  5187               	movf	(main@error+1)& (0+255),w,b
  1041  000352  EC09  F007         	call	_EUSART2_Write
  1042                           
  1043                           ;main.c: 122: EUSART2_Write(error & 0xFF);
  1044  000356  0100               	movlb	0	; () banked
  1045  000358  5186               	movf	main@error& (0+255),w,b
  1046  00035A  EC09  F007         	call	_EUSART2_Write
  1047                           
  1048                           ;main.c: 123: EUSART2_Write(13);
  1049  00035E  0E0D               	movlw	13
  1050  000360  EC09  F007         	call	_EUSART2_Write
  1051                           
  1052                           ;main.c: 124: adcValue = 0;
  1053  000364  0E00               	movlw	0
  1054  000366  0100               	movlb	0	; () banked
  1055  000368  6F92               	movwf	(_adcValue+1)& (0+255),b
  1056  00036A  0E00               	movlw	0
  1057  00036C  6F91               	movwf	_adcValue& (0+255),b
  1058                           
  1059                           ;main.c: 125: } else if (count % 5000 == 1) {
  1060  00036E  D08C               	goto	l714
  1061  000370                     l711:
  1062                           
  1063                           ; BSR set to: 0
  1064  000370  C08F  F016         	movff	_count,___lwmod@dividend
  1065  000374  C090  F017         	movff	_count+1,___lwmod@dividend+1
  1066  000378  0E13               	movlw	19
  1067  00037A  6E19               	movwf	___lwmod@divisor+1,c
  1068  00037C  0E88               	movlw	136
  1069  00037E  6E18               	movwf	___lwmod@divisor,c
  1070  000380  EC69  F005         	call	___lwmod	;wreg free
  1071  000384  0416               	decf	?___lwmod,w,c
  1072  000386  1017               	iorwf	?___lwmod+1,w,c
  1073  000388  A4D8               	btfss	status,2,c
  1074  00038A  D008               	goto	l713
  1075                           
  1076                           ;main.c: 126: adcValue = ADC_GetConversion(channel_AN9);
  1077  00038C  0E09               	movlw	9
  1078  00038E  ECBF  F005         	call	_ADC_GetConversion
  1079  000392  C016  F091         	movff	?_ADC_GetConversion,_adcValue
  1080  000396  C017  F092         	movff	?_ADC_GetConversion+1,_adcValue+1
  1081                           
  1082                           ;main.c: 127: } else {
  1083  00039A  D076               	goto	l714
  1084  00039C                     l713:
  1085                           
  1086                           ;main.c: 128: adcValue = adcValue * (((double) (count - 1))/ count) + ADC_GetConversion(
      +                          channel_AN9) * (((double) 1)/ count);
  1087  00039C  C08F  F01E         	movff	_count,___lwtoft@c
  1088  0003A0  C090  F01F         	movff	_count+1,___lwtoft@c+1
  1089  0003A4  EC41  F006         	call	___lwtoft	;wreg free
  1090  0003A8  C01E  F024         	movff	?___lwtoft,___ftdiv@f2
  1091  0003AC  C01F  F025         	movff	?___lwtoft+1,___ftdiv@f2+1
  1092  0003B0  C020  F026         	movff	?___lwtoft+2,___ftdiv@f2+2
  1093  0003B4  0E00               	movlw	0
  1094  0003B6  6E21               	movwf	___ftdiv@f1,c
  1095  0003B8  0E80               	movlw	128
  1096  0003BA  6E22               	movwf	___ftdiv@f1+1,c
  1097  0003BC  0E3F               	movlw	63
  1098  0003BE  6E23               	movwf	___ftdiv@f1+2,c
  1099  0003C0  EC16  F004         	call	___ftdiv	;wreg free
  1100  0003C4  C021  F033         	movff	?___ftdiv,___ftmul@f2
  1101  0003C8  C022  F034         	movff	?___ftdiv+1,___ftmul@f2+1
  1102  0003CC  C023  F035         	movff	?___ftdiv+2,___ftmul@f2+2
  1103  0003D0  0E09               	movlw	9
  1104  0003D2  ECBF  F005         	call	_ADC_GetConversion
  1105  0003D6  C016  F01E         	movff	?_ADC_GetConversion,___lwtoft@c
  1106  0003DA  C017  F01F         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
  1107  0003DE  EC41  F006         	call	___lwtoft	;wreg free
  1108  0003E2  C01E  F030         	movff	?___lwtoft,___ftmul@f1
  1109  0003E6  C01F  F031         	movff	?___lwtoft+1,___ftmul@f1+1
  1110  0003EA  C020  F032         	movff	?___lwtoft+2,___ftmul@f1+2
  1111  0003EE  EC9B  F003         	call	___ftmul	;wreg free
  1112  0003F2  C030  F06C         	movff	?___ftmul,___ftadd@f2
  1113  0003F6  C031  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  1114  0003FA  C032  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  1115  0003FE  C08F  F01E         	movff	_count,___lwtoft@c
  1116  000402  C090  F01F         	movff	_count+1,___lwtoft@c+1
  1117  000406  EC41  F006         	call	___lwtoft	;wreg free
  1118  00040A  C01E  F024         	movff	?___lwtoft,___ftdiv@f2
  1119  00040E  C01F  F025         	movff	?___lwtoft+1,___ftdiv@f2+1
  1120  000412  C020  F026         	movff	?___lwtoft+2,___ftdiv@f2+2
  1121  000416  0EFF               	movlw	255
  1122  000418  0100               	movlb	0	; () banked
  1123  00041A  258F               	addwf	_count& (0+255),w,b
  1124  00041C  6E1E               	movwf	___lwtoft@c,c
  1125  00041E  0EFF               	movlw	255
  1126  000420  2190               	addwfc	(_count+1)& (0+255),w,b
  1127  000422  6E1F               	movwf	___lwtoft@c+1,c
  1128  000424  EC41  F006         	call	___lwtoft	;wreg free
  1129  000428  C01E  F021         	movff	?___lwtoft,___ftdiv@f1
  1130  00042C  C01F  F022         	movff	?___lwtoft+1,___ftdiv@f1+1
  1131  000430  C020  F023         	movff	?___lwtoft+2,___ftdiv@f1+2
  1132  000434  EC16  F004         	call	___ftdiv	;wreg free
  1133  000438  C021  F033         	movff	?___ftdiv,___ftmul@f2
  1134  00043C  C022  F034         	movff	?___ftdiv+1,___ftmul@f2+1
  1135  000440  C023  F035         	movff	?___ftdiv+2,___ftmul@f2+2
  1136  000444  C091  F01E         	movff	_adcValue,___lwtoft@c
  1137  000448  C092  F01F         	movff	_adcValue+1,___lwtoft@c+1
  1138  00044C  EC41  F006         	call	___lwtoft	;wreg free
  1139  000450  C01E  F030         	movff	?___lwtoft,___ftmul@f1
  1140  000454  C01F  F031         	movff	?___lwtoft+1,___ftmul@f1+1
  1141  000458  C020  F032         	movff	?___lwtoft+2,___ftmul@f1+2
  1142  00045C  EC9B  F003         	call	___ftmul	;wreg free
  1143  000460  C030  F069         	movff	?___ftmul,___ftadd@f1
  1144  000464  C031  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  1145  000468  C032  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  1146  00046C  EC48  F002         	call	___ftadd	;wreg free
  1147  000470  C069  F075         	movff	?___ftadd,___fttol@f1
  1148  000474  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  1149  000478  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  1150  00047C  EC1F  F003         	call	___fttol	;wreg free
  1151  000480  C075  F091         	movff	?___fttol,_adcValue
  1152  000484  C076  F092         	movff	?___fttol+1,_adcValue+1
  1153  000488                     l714:
  1154                           
  1155                           ;main.c: 129: }
  1156                           ;main.c: 130: count++;
  1157  000488  0100               	movlb	0	; () banked
  1158  00048A  4B8F               	infsnz	_count& (0+255),f,b
  1159  00048C  2B90               	incf	(_count+1)& (0+255),f,b
  1160                           
  1161                           ; BSR set to: 0
  1162  00048E  D656               	goto	l695
  1163  000490                     __end_of_main:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           intcon	equ	0xFF2
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _sram_read *****************
  1175 ;; Defined at:
  1176 ;;		line 27 in file "sram_control.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  address         1    wreg     unsigned char 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  address         1   22[COMRAM] unsigned char 
  1181 ;;  data            1   23[COMRAM] unsigned char 
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      unsigned char 
  1184 ;; Registers used:
  1185 ;;		wreg, status,2, status,0
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1191 ;;      Params:         0       0       0       0       0       0       0
  1192 ;;      Locals:         2       0       0       0       0       0       0
  1193 ;;      Temps:          1       0       0       0       0       0       0
  1194 ;;      Totals:         3       0       0       0       0       0       0
  1195 ;;Total ram usage:        3 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    5
  1198 ;; This function calls:
  1199 ;;		Nothing
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           	psect	text1
  1206  000C34                     __ptext1:
  1207                           	opt stack 0
  1208  000C34                     _sram_read:
  1209                           	opt stack 25
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;incstack = 0
  1213                           ;sram_read@address stored from wreg
  1214  000C34  6E17               	movwf	sram_read@address,c
  1215                           
  1216                           ;sram_control.c: 28: uint8_t data;
  1217                           ;sram_control.c: 30: TRISC = 0xFF;
  1218  000C36  6894               	setf	3988,c	;volatile
  1219                           
  1220                           ;sram_control.c: 33: PORTAbits.RA6 = 0;
  1221  000C38  9C80               	bcf	3968,6,c	;volatile
  1222                           
  1223                           ;sram_control.c: 34: PORTAbits.RA7 = 1;
  1224  000C3A  8E80               	bsf	3968,7,c	;volatile
  1225                           
  1226                           ;sram_control.c: 35: PORTA = (PORTA & 0xE0) | (address & 0x1F);
  1227  000C3C  C017  F016         	movff	sram_read@address,??_sram_read
  1228  000C40  0E1F               	movlw	31
  1229  000C42  1616               	andwf	??_sram_read,f,c
  1230  000C44  5080               	movf	3968,w,c	;volatile
  1231  000C46  0BE0               	andlw	224
  1232  000C48  1016               	iorwf	??_sram_read,w,c
  1233  000C4A  6E80               	movwf	3968,c	;volatile
  1234                           
  1235                           ;sram_control.c: 37: _delay((unsigned long)((1)*(16000000/4000000.0)));
  1236  000C4C  D000               	nop2		;2 cycle nop
  1237  000C4E  D000               	nop2		;2 cycle nop
  1238                           
  1239                           ;sram_control.c: 40: data = PORTC;
  1240  000C50  CF82 F018          	movff	3970,sram_read@data	;volatile
  1241                           
  1242                           ;sram_control.c: 43: PORTAbits.RA7 = 1;
  1243  000C54  8E80               	bsf	3968,7,c	;volatile
  1244                           
  1245                           ;sram_control.c: 44: PORTAbits.RA6 = 1;
  1246  000C56  8C80               	bsf	3968,6,c	;volatile
  1247                           
  1248                           ;sram_control.c: 46: return data;
  1249  000C58  5018               	movf	sram_read@data,w,c
  1250  000C5A  0012               	return	
  1251  000C5C                     __end_of_sram_read:
  1252                           	opt stack 0
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           intcon	equ	0xFF2
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _i2c_slave_open *****************
  1263 ;; Defined at:
  1264 ;;		line 43 in file "mcc_generated_files/drivers/i2c_slave.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1278 ;;      Params:         0       0       0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0       0       0
  1281 ;;      Totals:         0       0       0       0       0       0       0
  1282 ;;Total ram usage:        0 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    7
  1285 ;; This function calls:
  1286 ;;		_i2c2_driver_initSlaveHardware
  1287 ;;		_i2c2_driver_setAddr
  1288 ;;		_i2c2_driver_setBusCollisionISR
  1289 ;;		_i2c2_driver_setMask
  1290 ;;		_i2c_slave_setAddrIntHandler
  1291 ;;		_i2c_slave_setIsrHandler
  1292 ;;		_i2c_slave_setReadIntHandler
  1293 ;;		_i2c_slave_setWriteIntHandler
  1294 ;;		_mssp2_enableIRQ
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text2
  1301  000A80                     __ptext2:
  1302                           	opt stack 0
  1303  000A80                     _i2c_slave_open:
  1304                           	opt stack 23
  1305                           
  1306                           ;i2c_slave.c: 45: mssp2_enableIRQ();
  1307                           
  1308                           ;incstack = 0
  1309  000A80  EC3B  F007         	call	_mssp2_enableIRQ	;wreg free
  1310                           
  1311                           ;i2c_slave.c: 47: i2c_slave_setIsrHandler(i2c_slave_ISR);
  1312  000A84  0EAE               	movlw	low _i2c_slave_ISR
  1313  000A86  6E18               	movwf	i2c_slave_setIsrHandler@handler,c
  1314  000A88  0E0B               	movlw	high _i2c_slave_ISR
  1315  000A8A  6E19               	movwf	i2c_slave_setIsrHandler@handler+1,c
  1316  000A8C  ECFB  F006         	call	_i2c_slave_setIsrHandler	;wreg free
  1317                           
  1318                           ;i2c_slave.c: 48: i2c2_driver_initSlaveHardware();
  1319  000A90  ECC5  F006         	call	_i2c2_driver_initSlaveHardware	;wreg free
  1320                           
  1321                           ;i2c_slave.c: 49: i2c2_driver_setAddr(0x50 << 1);
  1322  000A94  0EA0               	movlw	160
  1323  000A96  EC2C  F007         	call	_i2c2_driver_setAddr
  1324                           
  1325                           ;i2c_slave.c: 50: i2c2_driver_setMask(0xFE);
  1326  000A9A  0EFE               	movlw	254
  1327  000A9C  EC28  F007         	call	_i2c2_driver_setMask
  1328                           
  1329                           ;i2c_slave.c: 51: i2c2_driver_setBusCollisionISR(i2c_slave_BusCollisionISR);
  1330  000AA0  0E92               	movlw	low _i2c_slave_BusCollisionISR
  1331  000AA2  6E16               	movwf	i2c2_driver_setBusCollisionISR@f,c
  1332  000AA4  0E0E               	movlw	high _i2c_slave_BusCollisionISR
  1333  000AA6  6E17               	movwf	i2c2_driver_setBusCollisionISR@f+1,c
  1334  000AA8  EC23  F007         	call	_i2c2_driver_setBusCollisionISR	;wreg free
  1335                           
  1336                           ;i2c_slave.c: 52: i2c_slave_setWriteIntHandler(i2c_slave_DefWrInterruptHandler);
  1337  000AAC  0E60               	movlw	low _i2c_slave_DefWrInterruptHandler
  1338  000AAE  6E16               	movwf	i2c_slave_setWriteIntHandler@handler,c
  1339  000AB0  0E0E               	movlw	high _i2c_slave_DefWrInterruptHandler
  1340  000AB2  6E17               	movwf	i2c_slave_setWriteIntHandler@handler+1,c
  1341  000AB4  EC0F  F007         	call	_i2c_slave_setWriteIntHandler	;wreg free
  1342                           
  1343                           ;i2c_slave.c: 54: i2c_slave_setReadIntHandler(i2c_slave_PWMRdInterruptHandler);
  1344  000AB8  0EC0               	movlw	low _i2c_slave_PWMRdInterruptHandler
  1345  000ABA  6E16               	movwf	i2c_slave_setReadIntHandler@handler,c
  1346  000ABC  0E09               	movlw	high _i2c_slave_PWMRdInterruptHandler
  1347  000ABE  6E17               	movwf	i2c_slave_setReadIntHandler@handler+1,c
  1348  000AC0  EC14  F007         	call	_i2c_slave_setReadIntHandler	;wreg free
  1349                           
  1350                           ;i2c_slave.c: 57: i2c_slave_setAddrIntHandler(i2c_slave_PWMAddrInterruptHandler);
  1351  000AC4  0E70               	movlw	low _i2c_slave_PWMAddrInterruptHandler
  1352  000AC6  6E16               	movwf	i2c_slave_setAddrIntHandler@handler,c
  1353  000AC8  0E0E               	movlw	high _i2c_slave_PWMAddrInterruptHandler
  1354  000ACA  6E17               	movwf	i2c_slave_setAddrIntHandler@handler+1,c
  1355  000ACC  EC1E  F007         	call	_i2c_slave_setAddrIntHandler	;wreg free
  1356  000AD0  0012               	return		;funcret
  1357  000AD2                     __end_of_i2c_slave_open:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           intcon	equ	0xFF2
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _mssp2_enableIRQ *****************
  1369 ;; Defined at:
  1370 ;;		line 41 in file "mcc_generated_files/i2c2_driver.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		None
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1384 ;;      Params:         0       0       0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    5
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_i2c_slave_open
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text3
  1399  000E76                     __ptext3:
  1400                           	opt stack 0
  1401  000E76                     _mssp2_enableIRQ:
  1402                           	opt stack 24
  1403                           
  1404                           ;i2c2_driver.c: 43: PIE3bits.SSP2IE = 1;
  1405                           
  1406                           ;incstack = 0
  1407  000E76  8EA3               	bsf	4003,7,c	;volatile
  1408  000E78  0012               	return		;funcret
  1409  000E7A                     __end_of_mssp2_enableIRQ:
  1410                           	opt stack 0
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           intcon	equ	0xFF2
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _i2c_slave_setWriteIntHandler *****************
  1421 ;; Defined at:
  1422 ;;		line 137 in file "mcc_generated_files/drivers/i2c_slave.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  handler         2   21[COMRAM] PTR FTN()void 
  1425 ;;		 -> i2c_slave_DefWrInterruptHandler(1), 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1437 ;;      Params:         2       0       0       0       0       0       0
  1438 ;;      Locals:         0       0       0       0       0       0       0
  1439 ;;      Temps:          0       0       0       0       0       0       0
  1440 ;;      Totals:         2       0       0       0       0       0       0
  1441 ;;Total ram usage:        2 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    5
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_i2c_slave_open
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text4
  1452  000E1E                     __ptext4:
  1453                           	opt stack 0
  1454  000E1E                     _i2c_slave_setWriteIntHandler:
  1455                           	opt stack 24
  1456                           
  1457                           ;i2c_slave.c: 138: i2c_slave_WrInterruptHandler = handler;
  1458                           
  1459                           ;incstack = 0
  1460  000E1E  C016  F03C         	movff	i2c_slave_setWriteIntHandler@handler,_i2c_slave_WrInterruptHandler
  1461  000E22  C017  F03D         	movff	i2c_slave_setWriteIntHandler@handler+1,_i2c_slave_WrInterruptHandler+1
  1462  000E26  0012               	return		;funcret
  1463  000E28                     __end_of_i2c_slave_setWriteIntHandler:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           intcon	equ	0xFF2
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _i2c_slave_setReadIntHandler *****************
  1475 ;; Defined at:
  1476 ;;		line 121 in file "mcc_generated_files/drivers/i2c_slave.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  handler         2   21[COMRAM] PTR FTN()void 
  1479 ;;		 -> i2c_slave_PWMRdInterruptHandler(1), 
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, status,2, status,0
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1491 ;;      Params:         2       0       0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0       0       0
  1494 ;;      Totals:         2       0       0       0       0       0       0
  1495 ;;Total ram usage:        2 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    5
  1498 ;; This function calls:
  1499 ;;		Nothing
  1500 ;; This function is called by:
  1501 ;;		_i2c_slave_open
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text5
  1506  000E28                     __ptext5:
  1507                           	opt stack 0
  1508  000E28                     _i2c_slave_setReadIntHandler:
  1509                           	opt stack 24
  1510                           
  1511                           ;i2c_slave.c: 122: i2c_slave_RdInterruptHandler = handler;
  1512                           
  1513                           ;incstack = 0
  1514  000E28  C016  F03E         	movff	i2c_slave_setReadIntHandler@handler,_i2c_slave_RdInterruptHandler
  1515  000E2C  C017  F03F         	movff	i2c_slave_setReadIntHandler@handler+1,_i2c_slave_RdInterruptHandler+1
  1516  000E30  0012               	return		;funcret
  1517  000E32                     __end_of_i2c_slave_setReadIntHandler:
  1518                           	opt stack 0
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           intcon	equ	0xFF2
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _i2c_slave_setIsrHandler *****************
  1529 ;; Defined at:
  1530 ;;		line 113 in file "mcc_generated_files/drivers/i2c_slave.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  handler         2   23[COMRAM] PTR FTN()void 
  1533 ;;		 -> i2c_slave_ISR(1), 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1545 ;;      Params:         2       0       0       0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0
  1548 ;;      Totals:         2       0       0       0       0       0       0
  1549 ;;Total ram usage:        2 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    6
  1552 ;; This function calls:
  1553 ;;		_i2c2_driver_setI2cISR
  1554 ;; This function is called by:
  1555 ;;		_i2c_slave_open
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text6
  1560  000DF6                     __ptext6:
  1561                           	opt stack 0
  1562  000DF6                     _i2c_slave_setIsrHandler:
  1563                           	opt stack 23
  1564                           
  1565                           ;i2c_slave.c: 114: i2c2_driver_setI2cISR(handler);
  1566                           
  1567                           ;incstack = 0
  1568  000DF6  C018  F016         	movff	i2c_slave_setIsrHandler@handler,i2c2_driver_setI2cISR@f
  1569  000DFA  C019  F017         	movff	i2c_slave_setIsrHandler@handler+1,i2c2_driver_setI2cISR@f+1
  1570  000DFE  EC19  F007         	call	_i2c2_driver_setI2cISR	;wreg free
  1571  000E02  0012               	return		;funcret
  1572  000E04                     __end_of_i2c_slave_setIsrHandler:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           intcon	equ	0xFF2
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function _i2c2_driver_setI2cISR *****************
  1584 ;; Defined at:
  1585 ;;		line 265 in file "mcc_generated_files/i2c2_driver.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  f               2   21[COMRAM] PTR FTN()void 
  1588 ;;		 -> i2c_slave_ISR(1), 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, status,2, status,0
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1600 ;;      Params:         2       0       0       0       0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0
  1603 ;;      Totals:         2       0       0       0       0       0       0
  1604 ;;Total ram usage:        2 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    5
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_i2c_slave_setIsrHandler
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text7
  1615  000E32                     __ptext7:
  1616                           	opt stack 0
  1617  000E32                     _i2c2_driver_setI2cISR:
  1618                           	opt stack 23
  1619                           
  1620                           ;i2c2_driver.c: 266: i2c2_driver_i2cISR = f;
  1621                           
  1622                           ;incstack = 0
  1623  000E32  C016  F095         	movff	i2c2_driver_setI2cISR@f,_i2c2_driver_i2cISR
  1624  000E36  C017  F096         	movff	i2c2_driver_setI2cISR@f+1,_i2c2_driver_i2cISR+1
  1625  000E3A  0012               	return		;funcret
  1626  000E3C                     __end_of_i2c2_driver_setI2cISR:
  1627                           	opt stack 0
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           intcon	equ	0xFF2
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _i2c_slave_setAddrIntHandler *****************
  1638 ;; Defined at:
  1639 ;;		line 153 in file "mcc_generated_files/drivers/i2c_slave.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  handler         2   21[COMRAM] PTR FTN()void 
  1642 ;;		 -> i2c_slave_PWMAddrInterruptHandler(1), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1654 ;;      Params:         2       0       0       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0       0       0
  1656 ;;      Temps:          0       0       0       0       0       0       0
  1657 ;;      Totals:         2       0       0       0       0       0       0
  1658 ;;Total ram usage:        2 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    5
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_i2c_slave_open
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text8
  1669  000E3C                     __ptext8:
  1670                           	opt stack 0
  1671  000E3C                     _i2c_slave_setAddrIntHandler:
  1672                           	opt stack 24
  1673                           
  1674                           ;i2c_slave.c: 154: i2c_slave_AddrInterruptHandler = handler;
  1675                           
  1676                           ;incstack = 0
  1677  000E3C  C016  F03A         	movff	i2c_slave_setAddrIntHandler@handler,_i2c_slave_AddrInterruptHandler
  1678  000E40  C017  F03B         	movff	i2c_slave_setAddrIntHandler@handler+1,_i2c_slave_AddrInterruptHandler+1
  1679  000E44  0012               	return		;funcret
  1680  000E46                     __end_of_i2c_slave_setAddrIntHandler:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           intcon	equ	0xFF2
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           status	equ	0xFD8
  1690                           
  1691 ;; *************** function _i2c2_driver_setMask *****************
  1692 ;; Defined at:
  1693 ;;		line 184 in file "mcc_generated_files/i2c2_driver.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  mask            1    wreg     unsigned char 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  mask            1   21[COMRAM] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1707 ;;      Params:         0       0       0       0       0       0       0
  1708 ;;      Locals:         1       0       0       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0       0       0
  1710 ;;      Totals:         1       0       0       0       0       0       0
  1711 ;;Total ram usage:        1 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    5
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_i2c_slave_open
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text9
  1722  000E50                     __ptext9:
  1723                           	opt stack 0
  1724  000E50                     _i2c2_driver_setMask:
  1725                           	opt stack 24
  1726                           
  1727                           ;incstack = 0
  1728                           ;i2c2_driver_setMask@mask stored from wreg
  1729  000E50  6E16               	movwf	i2c2_driver_setMask@mask,c
  1730                           
  1731                           ;i2c2_driver.c: 186: SSP2MSK = mask;
  1732  000E52  C016  FF6A         	movff	i2c2_driver_setMask@mask,3946	;volatile
  1733  000E56  0012               	return		;funcret
  1734  000E58                     __end_of_i2c2_driver_setMask:
  1735                           	opt stack 0
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           intcon	equ	0xFF2
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _i2c2_driver_setBusCollisionISR *****************
  1746 ;; Defined at:
  1747 ;;		line 261 in file "mcc_generated_files/i2c2_driver.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  f               2   21[COMRAM] PTR FTN()void 
  1750 ;;		 -> i2c_slave_BusCollisionISR(1), 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, status,0
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1762 ;;      Params:         2       0       0       0       0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0
  1765 ;;      Totals:         2       0       0       0       0       0       0
  1766 ;;Total ram usage:        2 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    5
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_i2c_slave_open
  1773 ;;		_i2c_slave_setBusCollisionISR
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text10
  1778  000E46                     __ptext10:
  1779                           	opt stack 0
  1780  000E46                     _i2c2_driver_setBusCollisionISR:
  1781                           	opt stack 24
  1782                           
  1783                           ;i2c2_driver.c: 262: i2c2_driver_busCollisionISR = f;
  1784                           
  1785                           ;incstack = 0
  1786  000E46  C016  F046         	movff	i2c2_driver_setBusCollisionISR@f,_i2c2_driver_busCollisionISR
  1787  000E4A  C017  F047         	movff	i2c2_driver_setBusCollisionISR@f+1,_i2c2_driver_busCollisionISR+1
  1788  000E4E  0012               	return		;funcret
  1789  000E50                     __end_of_i2c2_driver_setBusCollisionISR:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _i2c2_driver_setAddr *****************
  1801 ;; Defined at:
  1802 ;;		line 179 in file "mcc_generated_files/i2c2_driver.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  addr            1    wreg     unsigned char 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  addr            1   21[COMRAM] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1816 ;;      Params:         0       0       0       0       0       0       0
  1817 ;;      Locals:         1       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0
  1819 ;;      Totals:         1       0       0       0       0       0       0
  1820 ;;Total ram usage:        1 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    5
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_i2c_slave_open
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text11
  1831  000E58                     __ptext11:
  1832                           	opt stack 0
  1833  000E58                     _i2c2_driver_setAddr:
  1834                           	opt stack 24
  1835                           
  1836                           ;incstack = 0
  1837                           ;i2c2_driver_setAddr@addr stored from wreg
  1838  000E58  6E16               	movwf	i2c2_driver_setAddr@addr,c
  1839                           
  1840                           ;i2c2_driver.c: 181: SSP2ADD = addr;
  1841  000E5A  C016  FF6E         	movff	i2c2_driver_setAddr@addr,3950	;volatile
  1842  000E5E  0012               	return		;funcret
  1843  000E60                     __end_of_i2c2_driver_setAddr:
  1844                           	opt stack 0
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           intcon	equ	0xFF2
  1850                           postinc0	equ	0xFEE
  1851                           wreg	equ	0xFE8
  1852                           status	equ	0xFD8
  1853                           
  1854 ;; *************** function _i2c2_driver_initSlaveHardware *****************
  1855 ;; Defined at:
  1856 ;;		line 100 in file "mcc_generated_files/i2c2_driver.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;		None               void
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1870 ;;      Params:         0       0       0       0       0       0       0
  1871 ;;      Locals:         0       0       0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0
  1873 ;;      Totals:         0       0       0       0       0       0       0
  1874 ;;Total ram usage:        0 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    5
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_i2c_slave_open
  1881 ;;		_i2c_slave_enable
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text12
  1886  000D8A                     __ptext12:
  1887                           	opt stack 0
  1888  000D8A                     _i2c2_driver_initSlaveHardware:
  1889                           	opt stack 24
  1890                           
  1891                           ;i2c2_driver.c: 102: if(!SSP2CON1bits.SSPEN)
  1892                           
  1893                           ;incstack = 0
  1894  000D8A  BA6C               	btfsc	3948,5,c	;volatile
  1895  000D8C  0012               	return	
  1896                           
  1897                           ;i2c2_driver.c: 103: {
  1898                           ;i2c2_driver.c: 134: SSP2CON1 |= 0x06;
  1899  000D8E  0E06               	movlw	6
  1900  000D90  126C               	iorwf	3948,f,c	;volatile
  1901                           
  1902                           ;i2c2_driver.c: 135: SSP2STAT = 0x00;
  1903  000D92  0E00               	movlw	0
  1904  000D94  6E6D               	movwf	3949,c	;volatile
  1905                           
  1906                           ;i2c2_driver.c: 136: SSP2CON2 = 0x00;
  1907  000D96  0E00               	movlw	0
  1908  000D98  6E6B               	movwf	3947,c	;volatile
  1909                           
  1910                           ;i2c2_driver.c: 138: SSP2CON1bits.SSPEN = 1;
  1911  000D9A  8A6C               	bsf	3948,5,c	;volatile
  1912                           
  1913                           ;i2c2_driver.c: 139: return 1;
  1914                           ;	Return value of _i2c2_driver_initSlaveHardware is never used
  1915  000D9C  0012               	return	
  1916  000D9E                     __end_of_i2c2_driver_initSlaveHardware:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           intcon	equ	0xFF2
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function ___lwtoft *****************
  1928 ;; Defined at:
  1929 ;;		line 28 in file "/Applications/microchip/xc8/v1.45/sources/common/lwtoft.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  c               2   29[COMRAM] unsigned int 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  3   29[COMRAM] float 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1943 ;;      Params:         3       0       0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0       0       0
  1946 ;;      Totals:         3       0       0       0       0       0       0
  1947 ;;Total ram usage:        3 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    6
  1950 ;; This function calls:
  1951 ;;		___ftpack
  1952 ;; This function is called by:
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text13
  1958  000C82                     __ptext13:
  1959                           	opt stack 0
  1960  000C82                     ___lwtoft:
  1961                           	opt stack 24
  1962                           
  1963                           ;incstack = 0
  1964  000C82  C01E  F016         	movff	___lwtoft@c,___ftpack@arg
  1965  000C86  C01F  F017         	movff	___lwtoft@c+1,___ftpack@arg+1
  1966  000C8A  6A18               	clrf	___ftpack@arg+2,c
  1967  000C8C  0E8E               	movlw	142
  1968  000C8E  6E19               	movwf	___ftpack@exp,c
  1969  000C90  0E00               	movlw	0
  1970  000C92  6E1A               	movwf	___ftpack@sign,c
  1971  000C94  EC89  F004         	call	___ftpack	;wreg free
  1972  000C98  C016  F01E         	movff	?___ftpack,?___lwtoft
  1973  000C9C  C017  F01F         	movff	?___ftpack+1,?___lwtoft+1
  1974  000CA0  C018  F020         	movff	?___ftpack+2,?___lwtoft+2
  1975  000CA4  0012               	return	
  1976  000CA6                     __end_of___lwtoft:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           status	equ	0xFD8
  1986                           
  1987 ;; *************** function ___lwmod *****************
  1988 ;; Defined at:
  1989 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  dividend        2   21[COMRAM] unsigned int 
  1992 ;;  divisor         2   23[COMRAM] unsigned int 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  counter         1   25[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  2   21[COMRAM] unsigned int 
  1997 ;; Registers used:
  1998 ;;		wreg, status,2, status,0
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2004 ;;      Params:         4       0       0       0       0       0       0
  2005 ;;      Locals:         1       0       0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0
  2007 ;;      Totals:         5       0       0       0       0       0       0
  2008 ;;Total ram usage:        5 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    5
  2011 ;; This function calls:
  2012 ;;		Nothing
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text14
  2019  000AD2                     __ptext14:
  2020                           	opt stack 0
  2021  000AD2                     ___lwmod:
  2022                           	opt stack 25
  2023                           
  2024                           ;incstack = 0
  2025  000AD2  5018               	movf	___lwmod@divisor,w,c
  2026  000AD4  1019               	iorwf	___lwmod@divisor+1,w,c
  2027  000AD6  B4D8               	btfsc	status,2,c
  2028  000AD8  D018               	goto	l1161
  2029  000ADA  0E01               	movlw	1
  2030  000ADC  6E1A               	movwf	___lwmod@counter,c
  2031  000ADE  D004               	goto	l1156
  2032  000AE0  90D8               	bcf	status,0,c
  2033  000AE2  3618               	rlcf	___lwmod@divisor,f,c
  2034  000AE4  3619               	rlcf	___lwmod@divisor+1,f,c
  2035  000AE6  2A1A               	incf	___lwmod@counter,f,c
  2036  000AE8                     l1156:
  2037  000AE8  AE19               	btfss	___lwmod@divisor+1,7,c
  2038  000AEA  D7FA               	goto	l1157
  2039  000AEC                     u1610:
  2040  000AEC  5018               	movf	___lwmod@divisor,w,c
  2041  000AEE  5C16               	subwf	___lwmod@dividend,w,c
  2042  000AF0  5019               	movf	___lwmod@divisor+1,w,c
  2043  000AF2  5817               	subwfb	___lwmod@dividend+1,w,c
  2044  000AF4  A0D8               	btfss	status,0,c
  2045  000AF6  D004               	goto	l1160
  2046  000AF8  5018               	movf	___lwmod@divisor,w,c
  2047  000AFA  5E16               	subwf	___lwmod@dividend,f,c
  2048  000AFC  5019               	movf	___lwmod@divisor+1,w,c
  2049  000AFE  5A17               	subwfb	___lwmod@dividend+1,f,c
  2050  000B00                     l1160:
  2051  000B00  90D8               	bcf	status,0,c
  2052  000B02  3219               	rrcf	___lwmod@divisor+1,f,c
  2053  000B04  3218               	rrcf	___lwmod@divisor,f,c
  2054  000B06  2E1A               	decfsz	___lwmod@counter,f,c
  2055  000B08  D7F1               	goto	u1610
  2056  000B0A                     l1161:
  2057  000B0A  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2058  000B0E  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2059  000B12  0012               	return		;funcret
  2060  000B14                     __end_of___lwmod:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           intcon	equ	0xFF2
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function ___lltoft *****************
  2072 ;; Defined at:
  2073 ;;		line 35 in file "/Applications/microchip/xc8/v1.45/sources/common/lltoft.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  c               4   29[COMRAM] unsigned long 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  exp             1   37[COMRAM] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  3   29[COMRAM] float 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2087 ;;      Params:         4       0       0       0       0       0       0
  2088 ;;      Locals:         1       0       0       0       0       0       0
  2089 ;;      Temps:          4       0       0       0       0       0       0
  2090 ;;      Totals:         9       0       0       0       0       0       0
  2091 ;;Total ram usage:        9 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    6
  2094 ;; This function calls:
  2095 ;;		___ftpack
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text15
  2102  000A24                     __ptext15:
  2103                           	opt stack 0
  2104  000A24                     ___lltoft:
  2105                           	opt stack 24
  2106                           
  2107                           ;incstack = 0
  2108  000A24  0E8E               	movlw	142
  2109  000A26  6E26               	movwf	___lltoft@exp,c
  2110  000A28  D006               	goto	l1114
  2111  000A2A  90D8               	bcf	status,0,c
  2112  000A2C  3221               	rrcf	___lltoft@c+3,f,c
  2113  000A2E  3220               	rrcf	___lltoft@c+2,f,c
  2114  000A30  321F               	rrcf	___lltoft@c+1,f,c
  2115  000A32  321E               	rrcf	___lltoft@c,f,c
  2116  000A34  2A26               	incf	___lltoft@exp,f,c
  2117  000A36                     l1114:
  2118  000A36  0E00               	movlw	0
  2119  000A38  141E               	andwf	___lltoft@c,w,c
  2120  000A3A  6E22               	movwf	??___lltoft& (0+255),c
  2121  000A3C  0E00               	movlw	0
  2122  000A3E  141F               	andwf	___lltoft@c+1,w,c
  2123  000A40  6E23               	movwf	(??___lltoft+1)& (0+255),c
  2124  000A42  0E00               	movlw	0
  2125  000A44  1420               	andwf	___lltoft@c+2,w,c
  2126  000A46  6E24               	movwf	(??___lltoft+2)& (0+255),c
  2127  000A48  0EFF               	movlw	255
  2128  000A4A  1421               	andwf	___lltoft@c+3,w,c
  2129  000A4C  6E25               	movwf	(??___lltoft+3)& (0+255),c
  2130  000A4E  5022               	movf	??___lltoft,w,c
  2131  000A50  1023               	iorwf	??___lltoft+1,w,c
  2132  000A52  1024               	iorwf	??___lltoft+2,w,c
  2133  000A54  1025               	iorwf	??___lltoft+3,w,c
  2134  000A56  A4D8               	btfss	status,2,c
  2135  000A58  D7E8               	goto	l1115
  2136  000A5A  C01E  F016         	movff	___lltoft@c,___ftpack@arg
  2137  000A5E  C01F  F017         	movff	___lltoft@c+1,___ftpack@arg+1
  2138  000A62  C020  F018         	movff	___lltoft@c+2,___ftpack@arg+2
  2139  000A66  C026  F019         	movff	___lltoft@exp,___ftpack@exp
  2140  000A6A  0E00               	movlw	0
  2141  000A6C  6E1A               	movwf	___ftpack@sign,c
  2142  000A6E  EC89  F004         	call	___ftpack	;wreg free
  2143  000A72  C016  F01E         	movff	?___ftpack,?___lltoft
  2144  000A76  C017  F01F         	movff	?___ftpack+1,?___lltoft+1
  2145  000A7A  C018  F020         	movff	?___ftpack+2,?___lltoft+2
  2146  000A7E  0012               	return	
  2147  000A80                     __end_of___lltoft:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           tblptrh	equ	0xFF7
  2151                           tblptrl	equ	0xFF6
  2152                           tablat	equ	0xFF5
  2153                           intcon	equ	0xFF2
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function ___fttol *****************
  2159 ;; Defined at:
  2160 ;;		line 44 in file "/Applications/microchip/xc8/v1.45/sources/common/fttol.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  f1              3   21[BANK0 ] float 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  lval            4   31[BANK0 ] unsigned long 
  2165 ;;  exp1            1   35[BANK0 ] unsigned char 
  2166 ;;  sign1           1   30[BANK0 ] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  4   21[BANK0 ] long 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2176 ;;      Params:         0       4       0       0       0       0       0
  2177 ;;      Locals:         0       6       0       0       0       0       0
  2178 ;;      Temps:          0       5       0       0       0       0       0
  2179 ;;      Totals:         0      15       0       0       0       0       0
  2180 ;;Total ram usage:       15 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    5
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text16
  2191  00063E                     __ptext16:
  2192                           	opt stack 0
  2193  00063E                     ___fttol:
  2194                           	opt stack 25
  2195                           
  2196                           ;incstack = 0
  2197  00063E  C077  F079         	movff	___fttol@f1+2,??___fttol
  2198  000642  0100               	movlb	0	; () banked
  2199  000644  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2200  000646  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2201  000648  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2202  00064A  3779               	rlcf	??___fttol& (0+255),f,b
  2203  00064C  E301               	bnc	u1511
  2204  00064E  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2205  000650                     u1511:
  2206  000650  5179               	movf	??___fttol& (0+255),w,b
  2207  000652  6F83               	movwf	___fttol@exp1& (0+255),b
  2208  000654  5183               	movf	___fttol@exp1& (0+255),w,b
  2209  000656  A4D8               	btfss	status,2,c
  2210  000658  D009               	goto	l1057
  2211                           
  2212                           ; BSR set to: 0
  2213  00065A  0E00               	movlw	0
  2214  00065C  6F75               	movwf	?___fttol& (0+255),b
  2215  00065E  0E00               	movlw	0
  2216  000660  6F76               	movwf	(?___fttol+1)& (0+255),b
  2217  000662  0E00               	movlw	0
  2218  000664  6F77               	movwf	(?___fttol+2)& (0+255),b
  2219  000666  0E00               	movlw	0
  2220  000668  6F78               	movwf	(?___fttol+3)& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223  00066A  0012               	return	
  2224  00066C                     l1057:
  2225                           
  2226                           ; BSR set to: 0
  2227                           
  2228                           ; BSR set to: 0
  2229  00066C  0E17               	movlw	23
  2230  00066E  6F79               	movwf	??___fttol& (0+255),b
  2231  000670  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2232  000674  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2233  000678  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2234  00067C  2979               	incf	??___fttol& (0+255),w,b
  2235  00067E  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2236  000680  D004               	goto	u1530
  2237  000682                     u1535:
  2238  000682  90D8               	bcf	status,0,c
  2239  000684  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2240  000686  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2241  000688  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2242  00068A                     u1530:
  2243  00068A  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2244  00068C  D7FA               	goto	u1535
  2245  00068E  0100               	movlb	0	; () banked
  2246  000690  517A               	movf	(??___fttol+1)& (0+255),w,b
  2247  000692  6F7E               	movwf	___fttol@sign1& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250  000694  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2251                           
  2252                           ; BSR set to: 0
  2253  000696  0EFF               	movlw	255
  2254  000698  1775               	andwf	___fttol@f1& (0+255),f,b
  2255  00069A  0EFF               	movlw	255
  2256  00069C  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2257  00069E  0E00               	movlw	0
  2258  0006A0  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2259                           
  2260                           ; BSR set to: 0
  2261  0006A2  5175               	movf	___fttol@f1& (0+255),w,b
  2262  0006A4  6F7F               	movwf	___fttol@lval& (0+255),b
  2263  0006A6  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2264  0006A8  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2265  0006AA  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2266  0006AC  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2267  0006AE  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2268                           
  2269                           ; BSR set to: 0
  2270  0006B0  0E8E               	movlw	142
  2271  0006B2  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2272                           
  2273                           ; BSR set to: 0
  2274  0006B4  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2275  0006B6  D016               	goto	l1059
  2276                           
  2277                           ; BSR set to: 0
  2278  0006B8  5183               	movf	___fttol@exp1& (0+255),w,b
  2279  0006BA  0A80               	xorlw	128
  2280  0006BC  0F8F               	addlw	143
  2281  0006BE  B0D8               	btfsc	status,0,c
  2282  0006C0  D009               	goto	l1060
  2283                           
  2284                           ; BSR set to: 0
  2285  0006C2  0E00               	movlw	0
  2286  0006C4  6F75               	movwf	?___fttol& (0+255),b
  2287  0006C6  0E00               	movlw	0
  2288  0006C8  6F76               	movwf	(?___fttol+1)& (0+255),b
  2289  0006CA  0E00               	movlw	0
  2290  0006CC  6F77               	movwf	(?___fttol+2)& (0+255),b
  2291  0006CE  0E00               	movlw	0
  2292  0006D0  6F78               	movwf	(?___fttol+3)& (0+255),b
  2293                           
  2294                           ; BSR set to: 0
  2295  0006D2  0012               	return	
  2296  0006D4                     l1060:
  2297                           
  2298                           ; BSR set to: 0
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  0006D4  90D8               	bcf	status,0,c
  2304  0006D6  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2305  0006D8  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2306  0006DA  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2307  0006DC  337F               	rrcf	___fttol@lval& (0+255),f,b
  2308                           
  2309                           ; BSR set to: 0
  2310  0006DE  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2311  0006E0  D7F9               	goto	l1060
  2312                           
  2313                           ; BSR set to: 0
  2314  0006E2  D015               	goto	u1570
  2315  0006E4                     l1059:
  2316                           
  2317                           ; BSR set to: 0
  2318                           
  2319                           ; BSR set to: 0
  2320  0006E4  0E17               	movlw	23
  2321  0006E6  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2322  0006E8  D00F               	goto	l1065
  2323                           
  2324                           ; BSR set to: 0
  2325  0006EA  0E00               	movlw	0
  2326  0006EC  6F75               	movwf	?___fttol& (0+255),b
  2327  0006EE  0E00               	movlw	0
  2328  0006F0  6F76               	movwf	(?___fttol+1)& (0+255),b
  2329  0006F2  0E00               	movlw	0
  2330  0006F4  6F77               	movwf	(?___fttol+2)& (0+255),b
  2331  0006F6  0E00               	movlw	0
  2332  0006F8  6F78               	movwf	(?___fttol+3)& (0+255),b
  2333                           
  2334                           ; BSR set to: 0
  2335  0006FA  0012               	return	
  2336  0006FC                     
  2337                           ; BSR set to: 0
  2338                           
  2339                           ; BSR set to: 0
  2340  0006FC  90D8               	bcf	status,0,c
  2341  0006FE  377F               	rlcf	___fttol@lval& (0+255),f,b
  2342  000700  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2343  000702  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2344  000704  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2345  000706  0783               	decf	___fttol@exp1& (0+255),f,b
  2346  000708                     l1065:
  2347                           
  2348                           ; BSR set to: 0
  2349                           
  2350                           ; BSR set to: 0
  2351  000708  5183               	movf	___fttol@exp1& (0+255),w,b
  2352  00070A  A4D8               	btfss	status,2,c
  2353  00070C  D7F7               	goto	l1066
  2354  00070E                     u1570:
  2355                           
  2356                           ; BSR set to: 0
  2357                           
  2358                           ; BSR set to: 0
  2359                           
  2360                           ; BSR set to: 0
  2361  00070E  517E               	movf	___fttol@sign1& (0+255),w,b
  2362  000710  B4D8               	btfsc	status,2,c
  2363  000712  D008               	goto	l1068
  2364                           
  2365                           ; BSR set to: 0
  2366  000714  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2367  000716  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2368  000718  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2369  00071A  6D7F               	negf	___fttol@lval& (0+255),b
  2370  00071C  0E00               	movlw	0
  2371  00071E  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2372  000720  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2373  000722  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2374  000724                     l1068:
  2375                           
  2376                           ; BSR set to: 0
  2377                           
  2378                           ; BSR set to: 0
  2379  000724  C07F  F075         	movff	___fttol@lval,?___fttol
  2380  000728  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2381  00072C  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2382  000730  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2383  000734  0012               	return	
  2384  000736                     __end_of___fttol:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function ___ftneg *****************
  2396 ;; Defined at:
  2397 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/ftneg.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  f1              3   38[COMRAM] float 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  3   38[COMRAM] float 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2411 ;;      Params:         3       0       0       0       0       0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0
  2414 ;;      Totals:         3       0       0       0       0       0       0
  2415 ;;Total ram usage:        3 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    5
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text17
  2426  000CA6                     __ptext17:
  2427                           	opt stack 0
  2428  000CA6                     ___ftneg:
  2429                           	opt stack 25
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;incstack = 0
  2433  000CA6  5027               	movf	___ftneg@f1,w,c
  2434  000CA8  1028               	iorwf	___ftneg@f1+1,w,c
  2435  000CAA  1029               	iorwf	___ftneg@f1+2,w,c
  2436  000CAC  B4D8               	btfsc	status,2,c
  2437  000CAE  D006               	goto	l1047
  2438  000CB0  0E00               	movlw	0
  2439  000CB2  1A27               	xorwf	___ftneg@f1,f,c
  2440  000CB4  0E00               	movlw	0
  2441  000CB6  1A28               	xorwf	___ftneg@f1+1,f,c
  2442  000CB8  0E80               	movlw	128
  2443  000CBA  1A29               	xorwf	___ftneg@f1+2,f,c
  2444  000CBC                     l1047:
  2445  000CBC  C027  F027         	movff	___ftneg@f1,?___ftneg
  2446  000CC0  C028  F028         	movff	___ftneg@f1+1,?___ftneg+1
  2447  000CC4  C029  F029         	movff	___ftneg@f1+2,?___ftneg+2
  2448  000CC8  0012               	return		;funcret
  2449  000CCA                     __end_of___ftneg:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           intcon	equ	0xFF2
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function ___ftmul *****************
  2461 ;; Defined at:
  2462 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  f1              3   47[COMRAM] float 
  2465 ;;  f2              3   50[COMRAM] float 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  2468 ;;  sign            1    8[BANK0 ] unsigned char 
  2469 ;;  cntr            1    7[BANK0 ] unsigned char 
  2470 ;;  exp             1    3[BANK0 ] unsigned char 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  3   47[COMRAM] float 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2480 ;;      Params:         6       0       0       0       0       0       0
  2481 ;;      Locals:         0       6       0       0       0       0       0
  2482 ;;      Temps:          0       3       0       0       0       0       0
  2483 ;;      Totals:         6       9       0       0       0       0       0
  2484 ;;Total ram usage:       15 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    6
  2487 ;; This function calls:
  2488 ;;		___ftpack
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text18
  2495  000736                     __ptext18:
  2496                           	opt stack 0
  2497  000736                     ___ftmul:
  2498                           	opt stack 24
  2499                           
  2500                           ;incstack = 0
  2501  000736  C032  F060         	movff	___ftmul@f1+2,??___ftmul
  2502  00073A  0100               	movlb	0	; () banked
  2503  00073C  6B61               	clrf	(??___ftmul+1)& (0+255),b
  2504  00073E  6B62               	clrf	(??___ftmul+2)& (0+255),b
  2505  000740  3431               	rlcf	___ftmul@f1+1,w,c
  2506  000742  3760               	rlcf	??___ftmul& (0+255),f,b
  2507  000744  E301               	bnc	u2181
  2508  000746  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  2509  000748                     u2181:
  2510  000748  5160               	movf	??___ftmul& (0+255),w,b
  2511  00074A  6F63               	movwf	___ftmul@exp& (0+255),b
  2512  00074C  5163               	movf	___ftmul@exp& (0+255),w,b
  2513  00074E  A4D8               	btfss	status,2,c
  2514  000750  D007               	goto	l1036
  2515                           
  2516                           ; BSR set to: 0
  2517  000752  0E00               	movlw	0
  2518  000754  6E30               	movwf	?___ftmul,c
  2519  000756  0E00               	movlw	0
  2520  000758  6E31               	movwf	?___ftmul+1,c
  2521  00075A  0E00               	movlw	0
  2522  00075C  6E32               	movwf	?___ftmul+2,c
  2523                           
  2524                           ; BSR set to: 0
  2525  00075E  0012               	return	
  2526  000760                     l1036:
  2527                           
  2528                           ; BSR set to: 0
  2529                           
  2530                           ; BSR set to: 0
  2531  000760  C035  F060         	movff	___ftmul@f2+2,??___ftmul
  2532  000764  6B61               	clrf	(??___ftmul+1)& (0+255),b
  2533  000766  6B62               	clrf	(??___ftmul+2)& (0+255),b
  2534  000768  3434               	rlcf	___ftmul@f2+1,w,c
  2535  00076A  3760               	rlcf	??___ftmul& (0+255),f,b
  2536  00076C  E301               	bnc	u2201
  2537  00076E  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  2538  000770                     u2201:
  2539  000770  5160               	movf	??___ftmul& (0+255),w,b
  2540  000772  6F68               	movwf	___ftmul@sign& (0+255),b
  2541  000774  5168               	movf	___ftmul@sign& (0+255),w,b
  2542  000776  A4D8               	btfss	status,2,c
  2543  000778  D007               	goto	l1038
  2544                           
  2545                           ; BSR set to: 0
  2546  00077A  0E00               	movlw	0
  2547  00077C  6E30               	movwf	?___ftmul,c
  2548  00077E  0E00               	movlw	0
  2549  000780  6E31               	movwf	?___ftmul+1,c
  2550  000782  0E00               	movlw	0
  2551  000784  6E32               	movwf	?___ftmul+2,c
  2552                           
  2553                           ; BSR set to: 0
  2554  000786  0012               	return	
  2555  000788                     l1038:
  2556                           
  2557                           ; BSR set to: 0
  2558                           
  2559                           ; BSR set to: 0
  2560  000788  5168               	movf	___ftmul@sign& (0+255),w,b
  2561  00078A  0F7B               	addlw	123
  2562  00078C  2763               	addwf	___ftmul@exp& (0+255),f,b
  2563                           
  2564                           ; BSR set to: 0
  2565  00078E  C032  F068         	movff	___ftmul@f1+2,___ftmul@sign
  2566  000792  5035               	movf	___ftmul@f2+2,w,c
  2567  000794  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  2568  000796  0E80               	movlw	128
  2569  000798  1768               	andwf	___ftmul@sign& (0+255),f,b
  2570                           
  2571                           ; BSR set to: 0
  2572  00079A  8E31               	bsf	___ftmul@f1+1,7,c
  2573                           
  2574                           ; BSR set to: 0
  2575  00079C  8E34               	bsf	___ftmul@f2+1,7,c
  2576                           
  2577                           ; BSR set to: 0
  2578  00079E  0EFF               	movlw	255
  2579  0007A0  1633               	andwf	___ftmul@f2,f,c
  2580  0007A2  0EFF               	movlw	255
  2581  0007A4  1634               	andwf	___ftmul@f2+1,f,c
  2582  0007A6  0E00               	movlw	0
  2583  0007A8  1635               	andwf	___ftmul@f2+2,f,c
  2584                           
  2585                           ; BSR set to: 0
  2586  0007AA  0E00               	movlw	0
  2587  0007AC  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  2588  0007AE  0E00               	movlw	0
  2589  0007B0  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2590  0007B2  0E00               	movlw	0
  2591  0007B4  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594  0007B6  0E07               	movlw	7
  2595  0007B8  6F67               	movwf	___ftmul@cntr& (0+255),b
  2596  0007BA                     
  2597                           ; BSR set to: 0
  2598                           
  2599                           ; BSR set to: 0
  2600  0007BA  A030               	btfss	___ftmul@f1,0,c
  2601  0007BC  D006               	goto	l1040
  2602                           
  2603                           ; BSR set to: 0
  2604  0007BE  5033               	movf	___ftmul@f2,w,c
  2605  0007C0  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2606  0007C2  5034               	movf	___ftmul@f2+1,w,c
  2607  0007C4  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2608  0007C6  5035               	movf	___ftmul@f2+2,w,c
  2609  0007C8  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2610  0007CA                     l1040:
  2611                           
  2612                           ; BSR set to: 0
  2613                           
  2614                           ; BSR set to: 0
  2615  0007CA  90D8               	bcf	status,0,c
  2616  0007CC  3232               	rrcf	___ftmul@f1+2,f,c
  2617  0007CE  3231               	rrcf	___ftmul@f1+1,f,c
  2618  0007D0  3230               	rrcf	___ftmul@f1,f,c
  2619  0007D2  90D8               	bcf	status,0,c
  2620  0007D4  3633               	rlcf	___ftmul@f2,f,c
  2621  0007D6  3634               	rlcf	___ftmul@f2+1,f,c
  2622  0007D8  3635               	rlcf	___ftmul@f2+2,f,c
  2623                           
  2624                           ; BSR set to: 0
  2625  0007DA  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  2626  0007DC  D7EE               	goto	l1039
  2627                           
  2628                           ; BSR set to: 0
  2629                           
  2630                           ; BSR set to: 0
  2631  0007DE  0E09               	movlw	9
  2632  0007E0  6F67               	movwf	___ftmul@cntr& (0+255),b
  2633  0007E2                     
  2634                           ; BSR set to: 0
  2635                           
  2636                           ; BSR set to: 0
  2637  0007E2  A030               	btfss	___ftmul@f1,0,c
  2638  0007E4  D006               	goto	l1043
  2639                           
  2640                           ; BSR set to: 0
  2641  0007E6  5033               	movf	___ftmul@f2,w,c
  2642  0007E8  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2643  0007EA  5034               	movf	___ftmul@f2+1,w,c
  2644  0007EC  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2645  0007EE  5035               	movf	___ftmul@f2+2,w,c
  2646  0007F0  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2647  0007F2                     l1043:
  2648                           
  2649                           ; BSR set to: 0
  2650                           
  2651                           ; BSR set to: 0
  2652  0007F2  90D8               	bcf	status,0,c
  2653  0007F4  3232               	rrcf	___ftmul@f1+2,f,c
  2654  0007F6  3231               	rrcf	___ftmul@f1+1,f,c
  2655  0007F8  3230               	rrcf	___ftmul@f1,f,c
  2656  0007FA  90D8               	bcf	status,0,c
  2657  0007FC  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2658  0007FE  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2659  000800  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2660                           
  2661                           ; BSR set to: 0
  2662  000802  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  2663  000804  D7EE               	goto	l1042
  2664                           
  2665                           ; BSR set to: 0
  2666                           
  2667                           ; BSR set to: 0
  2668  000806  C064  F016         	movff	___ftmul@f3_as_product,___ftpack@arg
  2669  00080A  C065  F017         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2670  00080E  C066  F018         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2671  000812  C063  F019         	movff	___ftmul@exp,___ftpack@exp
  2672  000816  C068  F01A         	movff	___ftmul@sign,___ftpack@sign
  2673  00081A  EC89  F004         	call	___ftpack	;wreg free
  2674  00081E  C016  F030         	movff	?___ftpack,?___ftmul
  2675  000822  C017  F031         	movff	?___ftpack+1,?___ftmul+1
  2676  000826  C018  F032         	movff	?___ftpack+2,?___ftmul+2
  2677  00082A  0012               	return	
  2678  00082C                     __end_of___ftmul:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           intcon	equ	0xFF2
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function ___ftdiv *****************
  2690 ;; Defined at:
  2691 ;;		line 54 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdiv.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  f1              3   32[COMRAM] float 
  2694 ;;  f2              3   35[COMRAM] float 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  f3              3   42[COMRAM] float 
  2697 ;;  sign            1   46[COMRAM] unsigned char 
  2698 ;;  exp             1   45[COMRAM] unsigned char 
  2699 ;;  cntr            1   41[COMRAM] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  3   32[COMRAM] float 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2709 ;;      Params:         6       0       0       0       0       0       0
  2710 ;;      Locals:         6       0       0       0       0       0       0
  2711 ;;      Temps:          3       0       0       0       0       0       0
  2712 ;;      Totals:        15       0       0       0       0       0       0
  2713 ;;Total ram usage:       15 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    6
  2716 ;; This function calls:
  2717 ;;		___ftpack
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text19
  2724  00082C                     __ptext19:
  2725                           	opt stack 0
  2726  00082C                     ___ftdiv:
  2727                           	opt stack 24
  2728                           
  2729                           ;incstack = 0
  2730  00082C  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  2731  000830  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2732  000832  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2733  000834  3422               	rlcf	___ftdiv@f1+1,w,c
  2734  000836  3627               	rlcf	??___ftdiv& (0+255),f,c
  2735  000838  E301               	bnc	u2131
  2736  00083A  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2737  00083C                     u2131:
  2738  00083C  5027               	movf	??___ftdiv,w,c
  2739  00083E  6E2E               	movwf	___ftdiv@exp,c
  2740  000840  502E               	movf	___ftdiv@exp,w,c
  2741  000842  A4D8               	btfss	status,2,c
  2742  000844  D007               	goto	l1021
  2743  000846  0E00               	movlw	0
  2744  000848  6E21               	movwf	?___ftdiv,c
  2745  00084A  0E00               	movlw	0
  2746  00084C  6E22               	movwf	?___ftdiv+1,c
  2747  00084E  0E00               	movlw	0
  2748  000850  6E23               	movwf	?___ftdiv+2,c
  2749  000852  0012               	return	
  2750  000854                     l1021:
  2751  000854  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  2752  000858  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2753  00085A  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2754  00085C  3425               	rlcf	___ftdiv@f2+1,w,c
  2755  00085E  3627               	rlcf	??___ftdiv& (0+255),f,c
  2756  000860  E301               	bnc	u2151
  2757  000862  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2758  000864                     u2151:
  2759  000864  5027               	movf	??___ftdiv,w,c
  2760  000866  6E2F               	movwf	___ftdiv@sign,c
  2761  000868  502F               	movf	___ftdiv@sign,w,c
  2762  00086A  A4D8               	btfss	status,2,c
  2763  00086C  D007               	goto	l1023
  2764  00086E  0E00               	movlw	0
  2765  000870  6E21               	movwf	?___ftdiv,c
  2766  000872  0E00               	movlw	0
  2767  000874  6E22               	movwf	?___ftdiv+1,c
  2768  000876  0E00               	movlw	0
  2769  000878  6E23               	movwf	?___ftdiv+2,c
  2770  00087A  0012               	return	
  2771  00087C                     l1023:
  2772  00087C  0E00               	movlw	0
  2773  00087E  6E2B               	movwf	___ftdiv@f3,c
  2774  000880  0E00               	movlw	0
  2775  000882  6E2C               	movwf	___ftdiv@f3+1,c
  2776  000884  0E00               	movlw	0
  2777  000886  6E2D               	movwf	___ftdiv@f3+2,c
  2778  000888  502F               	movf	___ftdiv@sign,w,c
  2779  00088A  0F89               	addlw	137
  2780  00088C  5E2E               	subwf	___ftdiv@exp,f,c
  2781  00088E  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  2782  000892  5026               	movf	___ftdiv@f2+2,w,c
  2783  000894  1A2F               	xorwf	___ftdiv@sign,f,c
  2784  000896  0E80               	movlw	128
  2785  000898  162F               	andwf	___ftdiv@sign,f,c
  2786  00089A  8E22               	bsf	___ftdiv@f1+1,7,c
  2787  00089C  0EFF               	movlw	255
  2788  00089E  1621               	andwf	___ftdiv@f1,f,c
  2789  0008A0  0EFF               	movlw	255
  2790  0008A2  1622               	andwf	___ftdiv@f1+1,f,c
  2791  0008A4  0E00               	movlw	0
  2792  0008A6  1623               	andwf	___ftdiv@f1+2,f,c
  2793  0008A8  8E25               	bsf	___ftdiv@f2+1,7,c
  2794  0008AA  0EFF               	movlw	255
  2795  0008AC  1624               	andwf	___ftdiv@f2,f,c
  2796  0008AE  0EFF               	movlw	255
  2797  0008B0  1625               	andwf	___ftdiv@f2+1,f,c
  2798  0008B2  0E00               	movlw	0
  2799  0008B4  1626               	andwf	___ftdiv@f2+2,f,c
  2800  0008B6  0E18               	movlw	24
  2801  0008B8  6E2A               	movwf	___ftdiv@cntr,c
  2802  0008BA  90D8               	bcf	status,0,c
  2803  0008BC  362B               	rlcf	___ftdiv@f3,f,c
  2804  0008BE  362C               	rlcf	___ftdiv@f3+1,f,c
  2805  0008C0  362D               	rlcf	___ftdiv@f3+2,f,c
  2806  0008C2  5024               	movf	___ftdiv@f2,w,c
  2807  0008C4  5C21               	subwf	___ftdiv@f1,w,c
  2808  0008C6  5025               	movf	___ftdiv@f2+1,w,c
  2809  0008C8  5822               	subwfb	___ftdiv@f1+1,w,c
  2810  0008CA  5026               	movf	___ftdiv@f2+2,w,c
  2811  0008CC  5823               	subwfb	___ftdiv@f1+2,w,c
  2812  0008CE  A0D8               	btfss	status,0,c
  2813  0008D0  D007               	goto	l1025
  2814  0008D2  5024               	movf	___ftdiv@f2,w,c
  2815  0008D4  5E21               	subwf	___ftdiv@f1,f,c
  2816  0008D6  5025               	movf	___ftdiv@f2+1,w,c
  2817  0008D8  5A22               	subwfb	___ftdiv@f1+1,f,c
  2818  0008DA  5026               	movf	___ftdiv@f2+2,w,c
  2819  0008DC  5A23               	subwfb	___ftdiv@f1+2,f,c
  2820  0008DE  802B               	bsf	___ftdiv@f3,0,c
  2821  0008E0                     l1025:
  2822  0008E0  90D8               	bcf	status,0,c
  2823  0008E2  3621               	rlcf	___ftdiv@f1,f,c
  2824  0008E4  3622               	rlcf	___ftdiv@f1+1,f,c
  2825  0008E6  3623               	rlcf	___ftdiv@f1+2,f,c
  2826  0008E8  2E2A               	decfsz	___ftdiv@cntr,f,c
  2827  0008EA  D7E7               	goto	l1024
  2828  0008EC  C02B  F016         	movff	___ftdiv@f3,___ftpack@arg
  2829  0008F0  C02C  F017         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2830  0008F4  C02D  F018         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2831  0008F8  C02E  F019         	movff	___ftdiv@exp,___ftpack@exp
  2832  0008FC  C02F  F01A         	movff	___ftdiv@sign,___ftpack@sign
  2833  000900  EC89  F004         	call	___ftpack	;wreg free
  2834  000904  C016  F021         	movff	?___ftpack,?___ftdiv
  2835  000908  C017  F022         	movff	?___ftpack+1,?___ftdiv+1
  2836  00090C  C018  F023         	movff	?___ftpack+2,?___ftdiv+2
  2837  000910  0012               	return	
  2838  000912                     __end_of___ftdiv:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           intcon	equ	0xFF2
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function ___ftadd *****************
  2850 ;; Defined at:
  2851 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  f1              3    9[BANK0 ] float 
  2854 ;;  f2              3   12[BANK0 ] float 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  exp1            1   20[BANK0 ] unsigned char 
  2857 ;;  exp2            1   19[BANK0 ] unsigned char 
  2858 ;;  sign            1   18[BANK0 ] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  3    9[BANK0 ] float 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2868 ;;      Params:         0       6       0       0       0       0       0
  2869 ;;      Locals:         0       3       0       0       0       0       0
  2870 ;;      Temps:          0       3       0       0       0       0       0
  2871 ;;      Totals:         0      12       0       0       0       0       0
  2872 ;;Total ram usage:       12 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    6
  2875 ;; This function calls:
  2876 ;;		___ftpack
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text20
  2883  000490                     __ptext20:
  2884                           	opt stack 0
  2885  000490                     ___ftadd:
  2886                           	opt stack 24
  2887                           
  2888                           ;incstack = 0
  2889  000490  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  2890  000494  0100               	movlb	0	; () banked
  2891  000496  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2892  000498  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2893  00049A  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2894  00049C  376F               	rlcf	??___ftadd& (0+255),f,b
  2895  00049E  E301               	bnc	u1921
  2896  0004A0  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2897  0004A2                     u1921:
  2898  0004A2  516F               	movf	??___ftadd& (0+255),w,b
  2899  0004A4  6F74               	movwf	___ftadd@exp1& (0+255),b
  2900  0004A6  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  2901  0004AA  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2902  0004AC  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2903  0004AE  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2904  0004B0  376F               	rlcf	??___ftadd& (0+255),f,b
  2905  0004B2  E301               	bnc	u1931
  2906  0004B4  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2907  0004B6                     u1931:
  2908  0004B6  516F               	movf	??___ftadd& (0+255),w,b
  2909  0004B8  6F73               	movwf	___ftadd@exp2& (0+255),b
  2910                           
  2911                           ; BSR set to: 0
  2912  0004BA  5174               	movf	___ftadd@exp1& (0+255),w,b
  2913  0004BC  B4D8               	btfsc	status,2,c
  2914  0004BE  D00B               	goto	u1960
  2915                           
  2916                           ; BSR set to: 0
  2917  0004C0  5173               	movf	___ftadd@exp2& (0+255),w,b
  2918  0004C2  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2919  0004C4  B0D8               	btfsc	status,0,c
  2920  0004C6  D00E               	goto	l988
  2921                           
  2922                           ; BSR set to: 0
  2923  0004C8  5174               	movf	___ftadd@exp1& (0+255),w,b
  2924  0004CA  0800               	sublw	0
  2925  0004CC  2573               	addwf	___ftadd@exp2& (0+255),w,b
  2926  0004CE  6F6F               	movwf	??___ftadd& (0+255),b
  2927  0004D0  0E18               	movlw	24
  2928  0004D2  656F               	cpfsgt	??___ftadd& (0+255),b
  2929  0004D4  D007               	goto	l988
  2930  0004D6                     u1960:
  2931                           
  2932                           ; BSR set to: 0
  2933  0004D6  C06C  F069         	movff	___ftadd@f2,?___ftadd
  2934  0004DA  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  2935  0004DE  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  2936  0004E2  0012               	return	
  2937  0004E4                     l988:
  2938                           
  2939                           ; BSR set to: 0
  2940                           
  2941                           ; BSR set to: 0
  2942  0004E4  5173               	movf	___ftadd@exp2& (0+255),w,b
  2943  0004E6  B4D8               	btfsc	status,2,c
  2944  0004E8  D00B               	goto	u1990
  2945                           
  2946                           ; BSR set to: 0
  2947  0004EA  5174               	movf	___ftadd@exp1& (0+255),w,b
  2948  0004EC  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2949  0004EE  B0D8               	btfsc	status,0,c
  2950  0004F0  D00E               	goto	l992
  2951                           
  2952                           ; BSR set to: 0
  2953  0004F2  5173               	movf	___ftadd@exp2& (0+255),w,b
  2954  0004F4  0800               	sublw	0
  2955  0004F6  2574               	addwf	___ftadd@exp1& (0+255),w,b
  2956  0004F8  6F6F               	movwf	??___ftadd& (0+255),b
  2957  0004FA  0E18               	movlw	24
  2958  0004FC  656F               	cpfsgt	??___ftadd& (0+255),b
  2959  0004FE  D007               	goto	l992
  2960  000500                     u1990:
  2961                           
  2962                           ; BSR set to: 0
  2963  000500  C069  F069         	movff	___ftadd@f1,?___ftadd
  2964  000504  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  2965  000508  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  2966  00050C  0012               	return	
  2967  00050E                     l992:
  2968                           
  2969                           ; BSR set to: 0
  2970                           
  2971                           ; BSR set to: 0
  2972  00050E  0E06               	movlw	6
  2973  000510  6F72               	movwf	___ftadd@sign& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976  000512  BF6B               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  2977                           
  2978                           ; BSR set to: 0
  2979  000514  8F72               	bsf	___ftadd@sign& (0+255),7,b
  2980                           
  2981                           ; BSR set to: 0
  2982                           
  2983                           ; BSR set to: 0
  2984  000516  BF6E               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  2985                           
  2986                           ; BSR set to: 0
  2987  000518  8D72               	bsf	___ftadd@sign& (0+255),6,b
  2988                           
  2989                           ; BSR set to: 0
  2990  00051A  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2991                           
  2992                           ; BSR set to: 0
  2993  00051C  0EFF               	movlw	255
  2994  00051E  1769               	andwf	___ftadd@f1& (0+255),f,b
  2995  000520  0EFF               	movlw	255
  2996  000522  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2997  000524  0E00               	movlw	0
  2998  000526  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2999  000528  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3000                           
  3001                           ; BSR set to: 0
  3002  00052A  0EFF               	movlw	255
  3003  00052C  176C               	andwf	___ftadd@f2& (0+255),f,b
  3004  00052E  0EFF               	movlw	255
  3005  000530  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3006  000532  0E00               	movlw	0
  3007  000534  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3008                           
  3009                           ; BSR set to: 0
  3010  000536  5173               	movf	___ftadd@exp2& (0+255),w,b
  3011  000538  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  3012  00053A  B0D8               	btfsc	status,0,c
  3013  00053C  D01B               	goto	l997
  3014  00053E                     u2020:
  3015                           
  3016                           ; BSR set to: 0
  3017                           
  3018                           ; BSR set to: 0
  3019  00053E  90D8               	bcf	status,0,c
  3020  000540  376C               	rlcf	___ftadd@f2& (0+255),f,b
  3021  000542  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3022  000544  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3023  000546  0773               	decf	___ftadd@exp2& (0+255),f,b
  3024                           
  3025                           ; BSR set to: 0
  3026  000548  5174               	movf	___ftadd@exp1& (0+255),w,b
  3027  00054A  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3028  00054C  B4D8               	btfsc	status,2,c
  3029  00054E  D00D               	goto	l1002
  3030                           
  3031                           ; BSR set to: 0
  3032  000550  0772               	decf	___ftadd@sign& (0+255),f,b
  3033  000552  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3034  000556  0E07               	movlw	7
  3035  000558  176F               	andwf	??___ftadd& (0+255),f,b
  3036  00055A  B4D8               	btfsc	status,2,c
  3037  00055C  D006               	goto	l1002
  3038  00055E  D7EF               	goto	u2020
  3039  000560                     
  3040                           ; BSR set to: 0
  3041                           
  3042                           ; BSR set to: 0
  3043  000560  90D8               	bcf	status,0,c
  3044  000562  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3045  000564  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3046  000566  3369               	rrcf	___ftadd@f1& (0+255),f,b
  3047  000568  2B74               	incf	___ftadd@exp1& (0+255),f,b
  3048  00056A                     l1002:
  3049                           
  3050                           ; BSR set to: 0
  3051                           
  3052                           ; BSR set to: 0
  3053  00056A  5173               	movf	___ftadd@exp2& (0+255),w,b
  3054  00056C  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3055  00056E  B4D8               	btfsc	status,2,c
  3056  000570  D01F               	goto	u2090
  3057  000572  D7F6               	goto	l1003
  3058  000574                     l997:
  3059                           
  3060                           ; BSR set to: 0
  3061                           
  3062                           ; BSR set to: 0
  3063  000574  5174               	movf	___ftadd@exp1& (0+255),w,b
  3064  000576  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  3065  000578  B0D8               	btfsc	status,0,c
  3066  00057A  D01A               	goto	u2090
  3067  00057C                     u2060:
  3068                           
  3069                           ; BSR set to: 0
  3070                           
  3071                           ; BSR set to: 0
  3072  00057C  90D8               	bcf	status,0,c
  3073  00057E  3769               	rlcf	___ftadd@f1& (0+255),f,b
  3074  000580  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3075  000582  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3076  000584  0774               	decf	___ftadd@exp1& (0+255),f,b
  3077                           
  3078                           ; BSR set to: 0
  3079  000586  5174               	movf	___ftadd@exp1& (0+255),w,b
  3080  000588  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3081  00058A  B4D8               	btfsc	status,2,c
  3082  00058C  D00D               	goto	l1011
  3083                           
  3084                           ; BSR set to: 0
  3085  00058E  0772               	decf	___ftadd@sign& (0+255),f,b
  3086  000590  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3087  000594  0E07               	movlw	7
  3088  000596  176F               	andwf	??___ftadd& (0+255),f,b
  3089  000598  B4D8               	btfsc	status,2,c
  3090  00059A  D006               	goto	l1011
  3091  00059C  D7EF               	goto	u2060
  3092  00059E                     
  3093                           ; BSR set to: 0
  3094                           
  3095                           ; BSR set to: 0
  3096  00059E  90D8               	bcf	status,0,c
  3097  0005A0  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3098  0005A2  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3099  0005A4  336C               	rrcf	___ftadd@f2& (0+255),f,b
  3100  0005A6  2B73               	incf	___ftadd@exp2& (0+255),f,b
  3101  0005A8                     l1011:
  3102                           
  3103                           ; BSR set to: 0
  3104                           
  3105                           ; BSR set to: 0
  3106  0005A8  5173               	movf	___ftadd@exp2& (0+255),w,b
  3107  0005AA  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3108  0005AC  A4D8               	btfss	status,2,c
  3109  0005AE  D7F7               	goto	l1012
  3110  0005B0                     u2090:
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115                           
  3116                           ; BSR set to: 0
  3117  0005B0  AF72               	btfss	___ftadd@sign& (0+255),7,b
  3118  0005B2  D00C               	goto	l1014
  3119                           
  3120                           ; BSR set to: 0
  3121  0005B4  0EFF               	movlw	255
  3122  0005B6  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  3123  0005B8  0EFF               	movlw	255
  3124  0005BA  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3125  0005BC  0EFF               	movlw	255
  3126  0005BE  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3127  0005C0  0E01               	movlw	1
  3128  0005C2  2769               	addwf	___ftadd@f1& (0+255),f,b
  3129  0005C4  0E00               	movlw	0
  3130  0005C6  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3131  0005C8  0E00               	movlw	0
  3132  0005CA  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3133  0005CC                     l1014:
  3134                           
  3135                           ; BSR set to: 0
  3136  0005CC  AD72               	btfss	___ftadd@sign& (0+255),6,b
  3137  0005CE  D00C               	goto	l1015
  3138                           
  3139                           ; BSR set to: 0
  3140  0005D0  0EFF               	movlw	255
  3141  0005D2  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3142  0005D4  0EFF               	movlw	255
  3143  0005D6  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3144  0005D8  0EFF               	movlw	255
  3145  0005DA  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3146  0005DC  0E01               	movlw	1
  3147  0005DE  276C               	addwf	___ftadd@f2& (0+255),f,b
  3148  0005E0  0E00               	movlw	0
  3149  0005E2  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3150  0005E4  0E00               	movlw	0
  3151  0005E6  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3152  0005E8                     l1015:
  3153                           
  3154                           ; BSR set to: 0
  3155                           
  3156                           ; BSR set to: 0
  3157  0005E8  0E00               	movlw	0
  3158  0005EA  6F72               	movwf	___ftadd@sign& (0+255),b
  3159                           
  3160                           ; BSR set to: 0
  3161  0005EC  5169               	movf	___ftadd@f1& (0+255),w,b
  3162  0005EE  276C               	addwf	___ftadd@f2& (0+255),f,b
  3163  0005F0  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  3164  0005F2  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3165  0005F4  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  3166  0005F6  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3167                           
  3168                           ; BSR set to: 0
  3169  0005F8  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3170  0005FA  D00E               	goto	l1016
  3171                           
  3172                           ; BSR set to: 0
  3173  0005FC  0EFF               	movlw	255
  3174  0005FE  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3175  000600  0EFF               	movlw	255
  3176  000602  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3177  000604  0EFF               	movlw	255
  3178  000606  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3179  000608  0E01               	movlw	1
  3180  00060A  276C               	addwf	___ftadd@f2& (0+255),f,b
  3181  00060C  0E00               	movlw	0
  3182  00060E  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3183  000610  0E00               	movlw	0
  3184  000612  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3185                           
  3186                           ; BSR set to: 0
  3187  000614  0E01               	movlw	1
  3188  000616  6F72               	movwf	___ftadd@sign& (0+255),b
  3189  000618                     l1016:
  3190                           
  3191                           ; BSR set to: 0
  3192                           
  3193                           ; BSR set to: 0
  3194  000618  C06C  F016         	movff	___ftadd@f2,___ftpack@arg
  3195  00061C  C06D  F017         	movff	___ftadd@f2+1,___ftpack@arg+1
  3196  000620  C06E  F018         	movff	___ftadd@f2+2,___ftpack@arg+2
  3197  000624  C074  F019         	movff	___ftadd@exp1,___ftpack@exp
  3198  000628  C072  F01A         	movff	___ftadd@sign,___ftpack@sign
  3199  00062C  EC89  F004         	call	___ftpack	;wreg free
  3200  000630  C016  F069         	movff	?___ftpack,?___ftadd
  3201  000634  C017  F06A         	movff	?___ftpack+1,?___ftadd+1
  3202  000638  C018  F06B         	movff	?___ftpack+2,?___ftadd+2
  3203  00063C  0012               	return	
  3204  00063E                     __end_of___ftadd:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           intcon	equ	0xFF2
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function ___ftpack *****************
  3216 ;; Defined at:
  3217 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  arg             3   21[COMRAM] unsigned um
  3220 ;;  exp             1   24[COMRAM] unsigned char 
  3221 ;;  sign            1   25[COMRAM] unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  3   21[COMRAM] float 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3233 ;;      Params:         5       0       0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0
  3235 ;;      Temps:          3       0       0       0       0       0       0
  3236 ;;      Totals:         8       0       0       0       0       0       0
  3237 ;;Total ram usage:        8 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    5
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		___ftadd
  3244 ;;		___ftdiv
  3245 ;;		___ftmul
  3246 ;;		___lltoft
  3247 ;;		___lwtoft
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text21
  3252  000912                     __ptext21:
  3253                           	opt stack 0
  3254  000912                     ___ftpack:
  3255                           	opt stack 24
  3256                           
  3257                           ;incstack = 0
  3258  000912  5019               	movf	___ftpack@exp,w,c
  3259  000914  B4D8               	btfsc	status,2,c
  3260  000916  D005               	goto	u1850
  3261  000918  5016               	movf	___ftpack@arg,w,c
  3262  00091A  1017               	iorwf	___ftpack@arg+1,w,c
  3263  00091C  1018               	iorwf	___ftpack@arg+2,w,c
  3264  00091E  A4D8               	btfss	status,2,c
  3265  000920  D00C               	goto	l957
  3266  000922                     u1850:
  3267  000922  0E00               	movlw	0
  3268  000924  6E16               	movwf	?___ftpack,c
  3269  000926  0E00               	movlw	0
  3270  000928  6E17               	movwf	?___ftpack+1,c
  3271  00092A  0E00               	movlw	0
  3272  00092C  6E18               	movwf	?___ftpack+2,c
  3273  00092E  0012               	return	
  3274  000930  2A19               	incf	___ftpack@exp,f,c
  3275  000932  90D8               	bcf	status,0,c
  3276  000934  3218               	rrcf	___ftpack@arg+2,f,c
  3277  000936  3217               	rrcf	___ftpack@arg+1,f,c
  3278  000938  3216               	rrcf	___ftpack@arg,f,c
  3279  00093A                     l957:
  3280  00093A  0E00               	movlw	0
  3281  00093C  1416               	andwf	___ftpack@arg,w,c
  3282  00093E  6E1B               	movwf	??___ftpack& (0+255),c
  3283  000940  0E00               	movlw	0
  3284  000942  1417               	andwf	___ftpack@arg+1,w,c
  3285  000944  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  3286  000946  0EFE               	movlw	254
  3287  000948  1418               	andwf	___ftpack@arg+2,w,c
  3288  00094A  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  3289  00094C  501B               	movf	??___ftpack,w,c
  3290  00094E  101C               	iorwf	??___ftpack+1,w,c
  3291  000950  101D               	iorwf	??___ftpack+2,w,c
  3292  000952  B4D8               	btfsc	status,2,c
  3293  000954  D00C               	goto	l960
  3294  000956  D7EC               	goto	l958
  3295  000958  2A19               	incf	___ftpack@exp,f,c
  3296  00095A  0E01               	movlw	1
  3297  00095C  2616               	addwf	___ftpack@arg,f,c
  3298  00095E  0E00               	movlw	0
  3299  000960  2217               	addwfc	___ftpack@arg+1,f,c
  3300  000962  0E00               	movlw	0
  3301  000964  2218               	addwfc	___ftpack@arg+2,f,c
  3302  000966  90D8               	bcf	status,0,c
  3303  000968  3218               	rrcf	___ftpack@arg+2,f,c
  3304  00096A  3217               	rrcf	___ftpack@arg+1,f,c
  3305  00096C  3216               	rrcf	___ftpack@arg,f,c
  3306  00096E                     l960:
  3307  00096E  0E00               	movlw	0
  3308  000970  1416               	andwf	___ftpack@arg,w,c
  3309  000972  6E1B               	movwf	??___ftpack& (0+255),c
  3310  000974  0E00               	movlw	0
  3311  000976  1417               	andwf	___ftpack@arg+1,w,c
  3312  000978  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  3313  00097A  0EFF               	movlw	255
  3314  00097C  1418               	andwf	___ftpack@arg+2,w,c
  3315  00097E  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  3316  000980  501B               	movf	??___ftpack,w,c
  3317  000982  101C               	iorwf	??___ftpack+1,w,c
  3318  000984  101D               	iorwf	??___ftpack+2,w,c
  3319  000986  B4D8               	btfsc	status,2,c
  3320  000988  D006               	goto	l963
  3321  00098A  D7E6               	goto	l961
  3322  00098C  0619               	decf	___ftpack@exp,f,c
  3323  00098E  90D8               	bcf	status,0,c
  3324  000990  3616               	rlcf	___ftpack@arg,f,c
  3325  000992  3617               	rlcf	___ftpack@arg+1,f,c
  3326  000994  3618               	rlcf	___ftpack@arg+2,f,c
  3327  000996                     l963:
  3328  000996  BE17               	btfsc	___ftpack@arg+1,7,c
  3329  000998  D003               	goto	u1890
  3330  00099A  0E02               	movlw	2
  3331  00099C  6019               	cpfslt	___ftpack@exp,c
  3332  00099E  D7F6               	goto	l964
  3333  0009A0                     u1890:
  3334  0009A0  A019               	btfss	___ftpack@exp,0,c
  3335  0009A2  9E17               	bcf	___ftpack@arg+1,7,c
  3336  0009A4  90D8               	bcf	status,0,c
  3337  0009A6  3219               	rrcf	___ftpack@exp,f,c
  3338  0009A8  5019               	movf	___ftpack@exp,w,c
  3339  0009AA  1218               	iorwf	___ftpack@arg+2,f,c
  3340  0009AC  501A               	movf	___ftpack@sign,w,c
  3341  0009AE  A4D8               	btfss	status,2,c
  3342  0009B0  8E18               	bsf	___ftpack@arg+2,7,c
  3343  0009B2  C016  F016         	movff	___ftpack@arg,?___ftpack
  3344  0009B6  C017  F017         	movff	___ftpack@arg+1,?___ftpack+1
  3345  0009BA  C018  F018         	movff	___ftpack@arg+2,?___ftpack+2
  3346  0009BE  0012               	return	
  3347  0009C0                     __end_of___ftpack:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           intcon	equ	0xFF2
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _TMR2_StartTimer *****************
  3359 ;; Defined at:
  3360 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		None
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3374 ;;      Params:         0       0       0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    5
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_main
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text22
  3389  000E7A                     __ptext22:
  3390                           	opt stack 0
  3391  000E7A                     _TMR2_StartTimer:
  3392                           	opt stack 25
  3393                           
  3394                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  3395                           
  3396                           ;incstack = 0
  3397  000E7A  84BA               	bsf	4026,2,c	;volatile
  3398  000E7C  0012               	return		;funcret
  3399  000E7E                     __end_of_TMR2_StartTimer:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           intcon	equ	0xFF2
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _TMR1_StartTimer *****************
  3411 ;; Defined at:
  3412 ;;		line 85 in file "mcc_generated_files/tmr1.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      void 
  3419 ;; Registers used:
  3420 ;;		None
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3426 ;;      Params:         0       0       0       0       0       0       0
  3427 ;;      Locals:         0       0       0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0
  3429 ;;      Totals:         0       0       0       0       0       0       0
  3430 ;;Total ram usage:        0 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    5
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_main
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text23
  3441  000E7E                     __ptext23:
  3442                           	opt stack 0
  3443  000E7E                     _TMR1_StartTimer:
  3444                           	opt stack 25
  3445                           
  3446                           ;tmr1.c: 88: T1CONbits.TMR1ON = 1;
  3447                           
  3448                           ;incstack = 0
  3449  000E7E  80CD               	bsf	4045,0,c	;volatile
  3450  000E80  0012               	return		;funcret
  3451  000E82                     __end_of_TMR1_StartTimer:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _SYSTEM_Initialize *****************
  3463 ;; Defined at:
  3464 ;;		line 112 in file "mcc_generated_files/mcc.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3478 ;;      Params:         0       0       0       0       0       0       0
  3479 ;;      Locals:         0       0       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0
  3481 ;;      Totals:         0       0       0       0       0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    6
  3485 ;; This function calls:
  3486 ;;		_ADC_Initialize
  3487 ;;		_CCP5_Initialize
  3488 ;;		_EUSART2_Initialize
  3489 ;;		_INTERRUPT_Initialize
  3490 ;;		_OSCILLATOR_Initialize
  3491 ;;		_PIN_MANAGER_Initialize
  3492 ;;		_PWM4_Initialize
  3493 ;;		_TMR1_Initialize
  3494 ;;		_TMR2_Initialize
  3495 ;; This function is called by:
  3496 ;;		_main
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text24
  3501  000C5C                     __ptext24:
  3502                           	opt stack 0
  3503  000C5C                     _SYSTEM_Initialize:
  3504                           	opt stack 24
  3505                           
  3506                           ;mcc.c: 114: INTERRUPT_Initialize();
  3507                           
  3508                           ;incstack = 0
  3509  000C5C  EC41  F007         	call	_INTERRUPT_Initialize	;wreg free
  3510                           
  3511                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  3512  000C60  EC05  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  3513                           
  3514                           ;mcc.c: 116: OSCILLATOR_Initialize();
  3515  000C64  EC02  F007         	call	_OSCILLATOR_Initialize	;wreg free
  3516                           
  3517                           ;mcc.c: 117: CCP5_Initialize();
  3518  000C68  ECD9  F006         	call	_CCP5_Initialize	;wreg free
  3519                           
  3520                           ;mcc.c: 118: ADC_Initialize();
  3521  000C6C  ECA3  F006         	call	_ADC_Initialize	;wreg free
  3522                           
  3523                           ;mcc.c: 119: PWM4_Initialize();
  3524  000C70  ECCF  F006         	call	_PWM4_Initialize	;wreg free
  3525                           
  3526                           ;mcc.c: 120: TMR2_Initialize();
  3527  000C74  ECE3  F006         	call	_TMR2_Initialize	;wreg free
  3528                           
  3529                           ;mcc.c: 121: TMR1_Initialize();
  3530  000C78  EC95  F006         	call	_TMR1_Initialize	;wreg free
  3531                           
  3532                           ;mcc.c: 122: EUSART2_Initialize();
  3533  000C7C  ECAF  F006         	call	_EUSART2_Initialize	;wreg free
  3534  000C80  0012               	return		;funcret
  3535  000C82                     __end_of_SYSTEM_Initialize:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           intcon	equ	0xFF2
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _TMR2_Initialize *****************
  3547 ;; Defined at:
  3548 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3562 ;;      Params:         0       0       0       0       0       0       0
  3563 ;;      Locals:         0       0       0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0
  3565 ;;      Totals:         0       0       0       0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    5
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_SYSTEM_Initialize
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text25
  3578  000DC6                     __ptext25:
  3579                           	opt stack 0
  3580  000DC6                     _TMR2_Initialize:
  3581                           	opt stack 25
  3582                           
  3583                           ;tmr2.c: 66: PR2 = 0x9F;
  3584                           
  3585                           ;incstack = 0
  3586  000DC6  0E9F               	movlw	159
  3587  000DC8  6EBB               	movwf	4027,c	;volatile
  3588                           
  3589                           ;tmr2.c: 69: TMR2 = 0x00;
  3590  000DCA  0E00               	movlw	0
  3591  000DCC  6EBC               	movwf	4028,c	;volatile
  3592                           
  3593                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  3594  000DCE  929E               	bcf	3998,1,c	;volatile
  3595                           
  3596                           ;tmr2.c: 75: T2CON = 0x04;
  3597  000DD0  0E04               	movlw	4
  3598  000DD2  6EBA               	movwf	4026,c	;volatile
  3599  000DD4  0012               	return		;funcret
  3600  000DD6                     __end_of_TMR2_Initialize:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           intcon	equ	0xFF2
  3607                           postinc0	equ	0xFEE
  3608                           wreg	equ	0xFE8
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _TMR1_Initialize *****************
  3612 ;; Defined at:
  3613 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3627 ;;      Params:         0       0       0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    5
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_SYSTEM_Initialize
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text26
  3643  000D2A                     __ptext26:
  3644                           	opt stack 0
  3645  000D2A                     _TMR1_Initialize:
  3646                           	opt stack 25
  3647                           
  3648                           ;tmr1.c: 67: T1GCON = 0x00;
  3649                           
  3650                           ;incstack = 0
  3651  000D2A  0E00               	movlw	0
  3652  000D2C  6ECC               	movwf	4044,c	;volatile
  3653                           
  3654                           ;tmr1.c: 70: TMR1H = 0x00;
  3655  000D2E  0E00               	movlw	0
  3656  000D30  6ECF               	movwf	4047,c	;volatile
  3657                           
  3658                           ;tmr1.c: 73: TMR1L = 0x00;
  3659  000D32  0E00               	movlw	0
  3660  000D34  6ECE               	movwf	4046,c	;volatile
  3661                           
  3662                           ;tmr1.c: 76: timer1ReloadVal=TMR1;
  3663  000D36  CFCE F093          	movff	4046,_timer1ReloadVal	;volatile
  3664  000D3A  CFCF F094          	movff	4047,_timer1ReloadVal+1	;volatile
  3665                           
  3666                           ;tmr1.c: 79: PIR1bits.TMR1IF = 0;
  3667  000D3E  909E               	bcf	3998,0,c	;volatile
  3668                           
  3669                           ;tmr1.c: 82: T1CON = 0x01;
  3670  000D40  0E01               	movlw	1
  3671  000D42  6ECD               	movwf	4045,c	;volatile
  3672  000D44  0012               	return		;funcret
  3673  000D46                     __end_of_TMR1_Initialize:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           intcon	equ	0xFF2
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function _PWM4_Initialize *****************
  3685 ;; Defined at:
  3686 ;;		line 63 in file "mcc_generated_files/pwm4.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;		None
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      void 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3700 ;;      Params:         0       0       0       0       0       0       0
  3701 ;;      Locals:         0       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0
  3703 ;;      Totals:         0       0       0       0       0       0       0
  3704 ;;Total ram usage:        0 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    5
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_SYSTEM_Initialize
  3711 ;;		_main
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text27
  3716  000D9E                     __ptext27:
  3717                           	opt stack 0
  3718  000D9E                     _PWM4_Initialize:
  3719                           	opt stack 24
  3720                           
  3721                           ;pwm4.c: 68: CCP4CON = 0x3C;
  3722                           
  3723                           ;incstack = 0
  3724  000D9E  0E3C               	movlw	60
  3725  000DA0  010F               	movlb	15	; () banked
  3726  000DA2  6F57               	movwf	87,b	;volatile
  3727                           
  3728                           ;pwm4.c: 71: CCPR4L = 0x4F;
  3729  000DA4  0E4F               	movlw	79
  3730  000DA6  6F58               	movwf	88,b	;volatile
  3731                           
  3732                           ;pwm4.c: 74: CCPR4H = 0x00;
  3733  000DA8  0E00               	movlw	0
  3734  000DAA  6F59               	movwf	89,b	;volatile
  3735                           
  3736                           ;pwm4.c: 77: CCPTMRS1bits.C4TSEL = 0x0;
  3737  000DAC  0EFC               	movlw	-4
  3738  000DAE  1748               	andwf	72,f,b	;volatile
  3739                           
  3740                           ; BSR set to: 15
  3741  000DB0  0012               	return		;funcret
  3742  000DB2                     __end_of_PWM4_Initialize:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function _PIN_MANAGER_Initialize *****************
  3754 ;; Defined at:
  3755 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;		None
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;		None
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      void 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3769 ;;      Params:         0       0       0       0       0       0       0
  3770 ;;      Locals:         0       0       0       0       0       0       0
  3771 ;;      Temps:          0       0       0       0       0       0       0
  3772 ;;      Totals:         0       0       0       0       0       0       0
  3773 ;;Total ram usage:        0 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    5
  3776 ;; This function calls:
  3777 ;;		Nothing
  3778 ;; This function is called by:
  3779 ;;		_SYSTEM_Initialize
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text28
  3784  000C0A                     __ptext28:
  3785                           	opt stack 0
  3786  000C0A                     _PIN_MANAGER_Initialize:
  3787                           	opt stack 24
  3788                           
  3789                           ;pin_manager.c: 57: LATA = 0x00;
  3790                           
  3791                           ; BSR set to: 15
  3792                           ;incstack = 0
  3793  000C0A  0E00               	movlw	0
  3794  000C0C  6E89               	movwf	3977,c	;volatile
  3795                           
  3796                           ;pin_manager.c: 58: LATB = 0x00;
  3797  000C0E  0E00               	movlw	0
  3798  000C10  6E8A               	movwf	3978,c	;volatile
  3799                           
  3800                           ;pin_manager.c: 59: LATC = 0x00;
  3801  000C12  0E00               	movlw	0
  3802  000C14  6E8B               	movwf	3979,c	;volatile
  3803                           
  3804                           ;pin_manager.c: 64: TRISA = 0xFF;
  3805  000C16  6892               	setf	3986,c	;volatile
  3806                           
  3807                           ;pin_manager.c: 65: TRISB = 0xBE;
  3808  000C18  0EBE               	movlw	190
  3809  000C1A  6E93               	movwf	3987,c	;volatile
  3810                           
  3811                           ;pin_manager.c: 66: TRISC = 0xFF;
  3812  000C1C  6894               	setf	3988,c	;volatile
  3813                           
  3814                           ;pin_manager.c: 71: ANSELC = 0xFC;
  3815  000C1E  0EFC               	movlw	252
  3816  000C20  010F               	movlb	15	; () banked
  3817  000C22  6F3A               	movwf	58,b	;volatile
  3818                           
  3819                           ;pin_manager.c: 72: ANSELB = 0x39;
  3820  000C24  0E39               	movlw	57
  3821  000C26  6F39               	movwf	57,b	;volatile
  3822                           
  3823                           ;pin_manager.c: 73: ANSELA = 0x2F;
  3824  000C28  0E2F               	movlw	47
  3825  000C2A  6F38               	movwf	56,b	;volatile
  3826                           
  3827                           ;pin_manager.c: 78: WPUB = 0x00;
  3828  000C2C  0E00               	movlw	0
  3829  000C2E  6E61               	movwf	3937,c	;volatile
  3830                           
  3831                           ; BSR set to: 15
  3832                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  3833  000C30  8EF1               	bsf	intcon2,7,c	;volatile
  3834                           
  3835                           ; BSR set to: 15
  3836  000C32  0012               	return		;funcret
  3837  000C34                     __end_of_PIN_MANAGER_Initialize:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           intcon	equ	0xFF2
  3844                           intcon2	equ	0xFF1
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _OSCILLATOR_Initialize *****************
  3850 ;; Defined at:
  3851 ;;		line 125 in file "mcc_generated_files/mcc.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         0       0       0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0
  3868 ;;      Totals:         0       0       0       0       0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    5
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_SYSTEM_Initialize
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text29
  3880  000E04                     __ptext29:
  3881                           	opt stack 0
  3882  000E04                     _OSCILLATOR_Initialize:
  3883                           	opt stack 24
  3884                           
  3885                           ;mcc.c: 128: OSCCON = 0x72;
  3886                           
  3887                           ; BSR set to: 15
  3888                           ;incstack = 0
  3889  000E04  0E72               	movlw	114
  3890  000E06  6ED3               	movwf	4051,c	;volatile
  3891                           
  3892                           ;mcc.c: 130: OSCCON2 = 0x04;
  3893  000E08  0E04               	movlw	4
  3894  000E0A  6ED2               	movwf	4050,c	;volatile
  3895                           
  3896                           ;mcc.c: 132: OSCTUNE = 0xC0;
  3897  000E0C  0EC0               	movlw	192
  3898  000E0E  6E9B               	movwf	3995,c	;volatile
  3899  000E10  0012               	return		;funcret
  3900  000E12                     __end_of_OSCILLATOR_Initialize:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           intcon	equ	0xFF2
  3907                           intcon2	equ	0xFF1
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function _INTERRUPT_Initialize *****************
  3913 ;; Defined at:
  3914 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;		None
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;		None
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		None
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3928 ;;      Params:         0       0       0       0       0       0       0
  3929 ;;      Locals:         0       0       0       0       0       0       0
  3930 ;;      Temps:          0       0       0       0       0       0       0
  3931 ;;      Totals:         0       0       0       0       0       0       0
  3932 ;;Total ram usage:        0 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    5
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_SYSTEM_Initialize
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text30
  3943  000E82                     __ptext30:
  3944                           	opt stack 0
  3945  000E82                     _INTERRUPT_Initialize:
  3946                           	opt stack 24
  3947                           
  3948                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3949                           
  3950                           ;incstack = 0
  3951  000E82  9ED0               	bcf	4048,7,c	;volatile
  3952  000E84  0012               	return		;funcret
  3953  000E86                     __end_of_INTERRUPT_Initialize:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           intcon	equ	0xFF2
  3960                           intcon2	equ	0xFF1
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _EUSART2_Initialize *****************
  3966 ;; Defined at:
  3967 ;;		line 53 in file "mcc_generated_files/eusart2.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3981 ;;      Params:         0       0       0       0       0       0       0
  3982 ;;      Locals:         0       0       0       0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0
  3984 ;;      Totals:         0       0       0       0       0       0       0
  3985 ;;Total ram usage:        0 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    5
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_SYSTEM_Initialize
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text31
  3996  000D5E                     __ptext31:
  3997                           	opt stack 0
  3998  000D5E                     _EUSART2_Initialize:
  3999                           	opt stack 24
  4000                           
  4001                           ;eusart2.c: 58: BAUDCON2 = 0x08;
  4002                           
  4003                           ;incstack = 0
  4004  000D5E  0E08               	movlw	8
  4005  000D60  6E70               	movwf	3952,c	;volatile
  4006                           
  4007                           ;eusart2.c: 61: RCSTA2 = 0x80;
  4008  000D62  0E80               	movlw	128
  4009  000D64  6E71               	movwf	3953,c	;volatile
  4010                           
  4011                           ;eusart2.c: 64: TXSTA2 = 0x24;
  4012  000D66  0E24               	movlw	36
  4013  000D68  6E72               	movwf	3954,c	;volatile
  4014                           
  4015                           ;eusart2.c: 67: SPBRG2 = 0xA0;
  4016  000D6A  0EA0               	movlw	160
  4017  000D6C  6E75               	movwf	3957,c	;volatile
  4018                           
  4019                           ;eusart2.c: 70: SPBRGH2 = 0x01;
  4020  000D6E  0E01               	movlw	1
  4021  000D70  6E76               	movwf	3958,c	;volatile
  4022  000D72  0012               	return		;funcret
  4023  000D74                     __end_of_EUSART2_Initialize:
  4024                           	opt stack 0
  4025                           tblptru	equ	0xFF8
  4026                           tblptrh	equ	0xFF7
  4027                           tblptrl	equ	0xFF6
  4028                           tablat	equ	0xFF5
  4029                           intcon	equ	0xFF2
  4030                           intcon2	equ	0xFF1
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _CCP5_Initialize *****************
  4036 ;; Defined at:
  4037 ;;		line 57 in file "mcc_generated_files/ccp5.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4051 ;;      Params:         0       0       0       0       0       0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0
  4054 ;;      Totals:         0       0       0       0       0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    5
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_SYSTEM_Initialize
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text32
  4066  000DB2                     __ptext32:
  4067                           	opt stack 0
  4068  000DB2                     _CCP5_Initialize:
  4069                           	opt stack 24
  4070                           
  4071                           ;ccp5.c: 62: CCP5CON = 0x07;
  4072                           
  4073                           ;incstack = 0
  4074  000DB2  0E07               	movlw	7
  4075  000DB4  010F               	movlb	15	; () banked
  4076  000DB6  6F54               	movwf	84,b	;volatile
  4077                           
  4078                           ;ccp5.c: 65: CCPR5L = 0x00;
  4079  000DB8  0E00               	movlw	0
  4080  000DBA  6F55               	movwf	85,b	;volatile
  4081                           
  4082                           ;ccp5.c: 68: CCPR5H = 0x00;
  4083  000DBC  0E00               	movlw	0
  4084  000DBE  6F56               	movwf	86,b	;volatile
  4085                           
  4086                           ;ccp5.c: 71: CCPTMRS1bits.C5TSEL = 0x0;
  4087  000DC0  0EF3               	movlw	-13
  4088  000DC2  1748               	andwf	72,f,b	;volatile
  4089                           
  4090                           ; BSR set to: 15
  4091  000DC4  0012               	return		;funcret
  4092  000DC6                     __end_of_CCP5_Initialize:
  4093                           	opt stack 0
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           intcon	equ	0xFF2
  4099                           intcon2	equ	0xFF1
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           status	equ	0xFD8
  4103                           
  4104 ;; *************** function _ADC_Initialize *****************
  4105 ;; Defined at:
  4106 ;;		line 58 in file "mcc_generated_files/adc.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      void 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4120 ;;      Params:         0       0       0       0       0       0       0
  4121 ;;      Locals:         0       0       0       0       0       0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0
  4123 ;;      Totals:         0       0       0       0       0       0       0
  4124 ;;Total ram usage:        0 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    5
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_SYSTEM_Initialize
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text33
  4135  000D46                     __ptext33:
  4136                           	opt stack 0
  4137  000D46                     _ADC_Initialize:
  4138                           	opt stack 24
  4139                           
  4140                           ;adc.c: 63: ADCON0 = 0x01;
  4141                           
  4142                           ; BSR set to: 15
  4143                           ;incstack = 0
  4144  000D46  0E01               	movlw	1
  4145  000D48  6EC2               	movwf	4034,c	;volatile
  4146                           
  4147                           ;adc.c: 66: ADCON1 = 0x00;
  4148  000D4A  0E00               	movlw	0
  4149  000D4C  6EC1               	movwf	4033,c	;volatile
  4150                           
  4151                           ;adc.c: 69: ADCON2 = 0x0E;
  4152  000D4E  0E0E               	movlw	14
  4153  000D50  6EC0               	movwf	4032,c	;volatile
  4154                           
  4155                           ;adc.c: 72: ADRESL = 0x00;
  4156  000D52  0E00               	movlw	0
  4157  000D54  6EC3               	movwf	4035,c	;volatile
  4158                           
  4159                           ;adc.c: 75: ADRESH = 0x00;
  4160  000D56  0E00               	movlw	0
  4161  000D58  6EC4               	movwf	4036,c	;volatile
  4162                           
  4163                           ;adc.c: 78: PIE1bits.ADIE = 1;
  4164  000D5A  8C9D               	bsf	3997,6,c	;volatile
  4165  000D5C  0012               	return		;funcret
  4166  000D5E                     __end_of_ADC_Initialize:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           intcon	equ	0xFF2
  4173                           intcon2	equ	0xFF1
  4174                           postinc0	equ	0xFEE
  4175                           wreg	equ	0xFE8
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _SRAM_CONTROL_INITIALIZE *****************
  4179 ;; Defined at:
  4180 ;;		line 9 in file "sram_control.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4194 ;;      Params:         0       0       0       0       0       0       0
  4195 ;;      Locals:         0       0       0       0       0       0       0
  4196 ;;      Temps:          0       0       0       0       0       0       0
  4197 ;;      Totals:         0       0       0       0       0       0       0
  4198 ;;Total ram usage:        0 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    5
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text34
  4209  000D74                     __ptext34:
  4210                           	opt stack 0
  4211  000D74                     _SRAM_CONTROL_INITIALIZE:
  4212                           	opt stack 25
  4213                           
  4214                           ;sram_control.c: 12: ANSELA = 0x00;
  4215                           
  4216                           ;incstack = 0
  4217  000D74  0E00               	movlw	0
  4218  000D76  010F               	movlb	15	; () banked
  4219  000D78  6F38               	movwf	56,b	;volatile
  4220                           
  4221                           ;sram_control.c: 13: ANSELC = 0x00;
  4222  000D7A  0E00               	movlw	0
  4223  000D7C  6F3A               	movwf	58,b	;volatile
  4224                           
  4225                           ;sram_control.c: 16: TRISA = 0x00;
  4226  000D7E  0E00               	movlw	0
  4227  000D80  6E92               	movwf	3986,c	;volatile
  4228                           
  4229                           ; BSR set to: 15
  4230                           ;sram_control.c: 19: TRISC = 0xFF;
  4231  000D82  6894               	setf	3988,c	;volatile
  4232                           
  4233                           ; BSR set to: 15
  4234                           ;sram_control.c: 22: PORTAbits.RA7 = 1;
  4235  000D84  8E80               	bsf	3968,7,c	;volatile
  4236                           
  4237                           ; BSR set to: 15
  4238                           ;sram_control.c: 23: PORTAbits.RA6 = 1;
  4239  000D86  8C80               	bsf	3968,6,c	;volatile
  4240                           
  4241                           ; BSR set to: 15
  4242  000D88  0012               	return		;funcret
  4243  000D8A                     __end_of_SRAM_CONTROL_INITIALIZE:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           intcon	equ	0xFF2
  4250                           intcon2	equ	0xFF1
  4251                           postinc0	equ	0xFEE
  4252                           wreg	equ	0xFE8
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _PWM4_LoadDutyValue *****************
  4256 ;; Defined at:
  4257 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  dutyValue       2   21[COMRAM] unsigned int 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      void 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4271 ;;      Params:         2       0       0       0       0       0       0
  4272 ;;      Locals:         0       0       0       0       0       0       0
  4273 ;;      Temps:          2       0       0       0       0       0       0
  4274 ;;      Totals:         4       0       0       0       0       0       0
  4275 ;;Total ram usage:        4 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    5
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_main
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text35
  4286  000B4C                     __ptext35:
  4287                           	opt stack 0
  4288  000B4C                     _PWM4_LoadDutyValue:
  4289                           	opt stack 25
  4290                           
  4291                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
  4292                           
  4293                           ; BSR set to: 15
  4294                           ;incstack = 0
  4295  000B4C  C016  F018         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  4296  000B50  C017  F019         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  4297  000B54  90D8               	bcf	status,0,c
  4298  000B56  3219               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  4299  000B58  3218               	rrcf	??_PWM4_LoadDutyValue,f,c
  4300  000B5A  90D8               	bcf	status,0,c
  4301  000B5C  3219               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  4302  000B5E  3218               	rrcf	??_PWM4_LoadDutyValue,f,c
  4303  000B60  5018               	movf	??_PWM4_LoadDutyValue,w,c
  4304  000B62  010F               	movlb	15	; () banked
  4305  000B64  6F58               	movwf	88,b	;volatile
  4306                           
  4307                           ;pwm4.c: 87: CCP4CON = ((uint8_t)(CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  4308  000B66  C016  F018         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  4309  000B6A  0E03               	movlw	3
  4310  000B6C  1618               	andwf	??_PWM4_LoadDutyValue,f,c
  4311  000B6E  3A18               	swapf	??_PWM4_LoadDutyValue,f,c
  4312  000B70  0EF0               	movlw	240
  4313  000B72  1618               	andwf	??_PWM4_LoadDutyValue,f,c
  4314  000B74  5157               	movf	87,w,b	;volatile
  4315  000B76  0BCF               	andlw	207
  4316  000B78  1018               	iorwf	??_PWM4_LoadDutyValue,w,c
  4317  000B7A  6F57               	movwf	87,b	;volatile
  4318                           
  4319                           ; BSR set to: 15
  4320  000B7C  0012               	return		;funcret
  4321  000B7E                     __end_of_PWM4_LoadDutyValue:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           intcon	equ	0xFF2
  4328                           intcon2	equ	0xFF1
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _EUSART2_Write *****************
  4334 ;; Defined at:
  4335 ;;		line 93 in file "mcc_generated_files/eusart2.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  txData          1    wreg     unsigned char 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  txData          1   21[COMRAM] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4349 ;;      Params:         0       0       0       0       0       0       0
  4350 ;;      Locals:         1       0       0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0
  4352 ;;      Totals:         1       0       0       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    5
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;;		_putch
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text36
  4365  000E12                     __ptext36:
  4366                           	opt stack 0
  4367  000E12                     _EUSART2_Write:
  4368                           	opt stack 25
  4369                           
  4370                           ; BSR set to: 15
  4371                           ;incstack = 0
  4372                           ;EUSART2_Write@txData stored from wreg
  4373  000E12  6E16               	movwf	EUSART2_Write@txData,c
  4374  000E14                     
  4375                           ;eusart2.c: 96: {
  4376                           
  4377                           ;eusart2.c: 95: while(0 == PIR3bits.TX2IF)
  4378  000E14  A8A4               	btfss	4004,4,c	;volatile
  4379  000E16  D7FE               	goto	l2452
  4380                           
  4381                           ;eusart2.c: 97: }
  4382                           ;eusart2.c: 99: TXREG2 = txData;
  4383  000E18  C016  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4384  000E1C  0012               	return		;funcret
  4385  000E1E                     __end_of_EUSART2_Write:
  4386                           	opt stack 0
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           intcon	equ	0xFF2
  4392                           intcon2	equ	0xFF1
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _ADC_GetConversion *****************
  4398 ;; Defined at:
  4399 ;;		line 108 in file "mcc_generated_files/adc.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  channel         1    wreg     enum E6661
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  channel         1   25[COMRAM] enum E6661
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  2   21[COMRAM] unsigned int 
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4413 ;;      Params:         2       0       0       0       0       0       0
  4414 ;;      Locals:         1       0       0       0       0       0       0
  4415 ;;      Temps:          2       0       0       0       0       0       0
  4416 ;;      Totals:         5       0       0       0       0       0       0
  4417 ;;Total ram usage:        5 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    5
  4420 ;; This function calls:
  4421 ;;		Nothing
  4422 ;; This function is called by:
  4423 ;;		_main
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text37
  4428  000B7E                     __ptext37:
  4429                           	opt stack 0
  4430  000B7E                     _ADC_GetConversion:
  4431                           	opt stack 25
  4432                           
  4433                           ;incstack = 0
  4434                           ;ADC_GetConversion@channel stored from wreg
  4435  000B7E  6E1A               	movwf	ADC_GetConversion@channel,c
  4436                           
  4437                           ;adc.c: 111: ADCON0bits.CHS = channel;
  4438  000B80  C01A  F018         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  4439  000B84  4618               	rlncf	??_ADC_GetConversion,f,c
  4440  000B86  4618               	rlncf	??_ADC_GetConversion,f,c
  4441  000B88  50C2               	movf	4034,w,c	;volatile
  4442  000B8A  1818               	xorwf	??_ADC_GetConversion,w,c
  4443  000B8C  0B83               	andlw	-125
  4444  000B8E  1818               	xorwf	??_ADC_GetConversion,w,c
  4445  000B90  6EC2               	movwf	4034,c	;volatile
  4446                           
  4447                           ;adc.c: 114: ADCON0bits.ADON = 1;
  4448  000B92  80C2               	bsf	4034,0,c	;volatile
  4449                           
  4450                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  4451  000B94  82C2               	bsf	4034,1,c	;volatile
  4452  000B96                     
  4453                           ;adc.c: 121: {
  4454  000B96  B2C2               	btfsc	4034,1,c	;volatile
  4455  000B98  D7FE               	goto	l591
  4456                           
  4457                           ;adc.c: 122: }
  4458                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  4459  000B9A  50C4               	movf	4036,w,c	;volatile
  4460  000B9C  6E19               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  4461  000B9E  6A18               	clrf	??_ADC_GetConversion& (0+255),c
  4462  000BA0  50C3               	movf	4035,w,c	;volatile
  4463  000BA2  2418               	addwf	??_ADC_GetConversion,w,c
  4464  000BA4  6E16               	movwf	?_ADC_GetConversion,c
  4465  000BA6  0E00               	movlw	0
  4466  000BA8  2019               	addwfc	??_ADC_GetConversion+1,w,c
  4467  000BAA  6E17               	movwf	?_ADC_GetConversion+1,c
  4468  000BAC  0012               	return	
  4469  000BAE                     __end_of_ADC_GetConversion:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           intcon	equ	0xFF2
  4476                           intcon2	equ	0xFF1
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _INTERRUPT_InterruptManager *****************
  4482 ;; Defined at:
  4483 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         0       0       0       0       0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0
  4499 ;;      Temps:         18       0       0       0       0       0       0
  4500 ;;      Totals:        18       0       0       0       0       0       0
  4501 ;;Total ram usage:       18 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    4
  4504 ;; This function calls:
  4505 ;;		Absolute function
  4506 ;;		_ADC_ISR
  4507 ;;		_i2c_slave_BusCollisionISR
  4508 ;;		_i2c_slave_ISR
  4509 ;; This function is called by:
  4510 ;;		Interrupt level 2
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	intcode
  4515  000008                     __pintcode:
  4516                           	opt stack 0
  4517  000008                     _INTERRUPT_InterruptManager:
  4518                           	opt stack 23
  4519                           
  4520                           ;incstack = 0
  4521  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4522  00000A  CFFA F004          	movff	pclath,??_INTERRUPT_InterruptManager
  4523  00000E  CFFB F005          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4524  000012  CFE9 F006          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4525  000016  CFEA F007          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4526  00001A  CFE1 F008          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4527  00001E  CFE2 F009          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4528  000022  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4529  000026  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4530  00002A  CFF3 F00C          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4531  00002E  CFF4 F00D          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4532  000032  CFF6 F00E          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4533  000036  CFF7 F00F          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4534  00003A  CFF8 F010          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4535  00003E  CFF5 F011          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4536  000042  C04A  F012         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4537  000046  C04B  F013         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4538  00004A  C04C  F014         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4539  00004E  C04D  F015         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4540                           
  4541                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  4542  000052  ACF2               	btfss	intcon,6,c	;volatile
  4543  000054  D021               	goto	i2u171_49
  4544                           
  4545                           ;interrupt_manager.c: 61: {
  4546                           ;interrupt_manager.c: 62: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  4547  000056  BC9D               	btfsc	3997,6,c	;volatile
  4548  000058  AC9E               	btfss	3998,6,c	;volatile
  4549  00005A  D003               	goto	i2l93
  4550                           
  4551                           ;interrupt_manager.c: 63: {
  4552                           ;interrupt_manager.c: 64: ADC_ISR();
  4553  00005C  EC47  F007         	call	_ADC_ISR	;wreg free
  4554                           
  4555                           ;interrupt_manager.c: 65: }
  4556  000060  D01B               	goto	i2u171_49
  4557  000062                     i2l93:
  4558                           
  4559                           ;interrupt_manager.c: 66: else if(PIE3bits.BCL2IE == 1 && PIR3bits.BCL2IF == 1)
  4560  000062  BCA3               	btfsc	4003,6,c	;volatile
  4561  000064  ACA4               	btfss	4004,6,c	;volatile
  4562  000066  D008               	goto	i2l95
  4563                           
  4564                           ;interrupt_manager.c: 67: {
  4565                           ;interrupt_manager.c: 68: i2c2_driver_busCollisionISR();
  4566  000068  D801               	call	i2u168_48
  4567  00006A  D016               	goto	i2u171_49
  4568  00006C                     i2u168_48:
  4569  00006C  0005               	push	
  4570  00006E  6EFA               	movwf	pclath,c
  4571  000070  5046               	movf	_i2c2_driver_busCollisionISR,w,c
  4572  000072  6EFD               	movwf	tosl,c
  4573  000074  5047               	movf	_i2c2_driver_busCollisionISR+1,w,c
  4574  000076  D00B               	goto	L1
  4575  000078                     i2l95:
  4576                           
  4577                           ;interrupt_manager.c: 70: else if(PIE3bits.SSP2IE == 1 && PIR3bits.SSP2IF == 1)
  4578  000078  BEA3               	btfsc	4003,7,c	;volatile
  4579  00007A  AEA4               	btfss	4004,7,c	;volatile
  4580  00007C  D00D               	goto	i2u171_49
  4581                           
  4582                           ;interrupt_manager.c: 71: {
  4583                           ;interrupt_manager.c: 72: i2c2_driver_i2cISR();
  4584  00007E  D801               	call	i2u171_48
  4585  000080  D00B               	goto	i2u171_49
  4586  000082                     i2u171_48:
  4587  000082  0005               	push	
  4588  000084  0100               	movlb	0	; () banked
  4589  000086  6EFA               	movwf	pclath,c
  4590  000088  5195               	movf	_i2c2_driver_i2cISR& (0+255),w,b
  4591  00008A  6EFD               	movwf	tosl,c
  4592  00008C  5196               	movf	(_i2c2_driver_i2cISR+1)& (0+255),w,b
  4593  00008E                     L1:
  4594  00008E  6EFE               	movwf	tosh,c
  4595  000090  50F8               	movf	tblptru,w,c
  4596  000092  6EFF               	movwf	tosu,c
  4597  000094  50FA               	movf	pclath,w,c
  4598  000096  0012               	return		;indir
  4599  000098                     i2u171_49:
  4600                           
  4601                           ;interrupt_manager.c: 79: else
  4602                           ;interrupt_manager.c: 80: {
  4603                           
  4604                           ;interrupt_manager.c: 77: }
  4605                           ;interrupt_manager.c: 78: }
  4606                           
  4607                           ;interrupt_manager.c: 74: else
  4608                           ;interrupt_manager.c: 75: {
  4609                           
  4610                           ;interrupt_manager.c: 73: }
  4611  000098  C015  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  4612  00009C  C014  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  4613  0000A0  C013  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  4614  0000A4  C012  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
  4615  0000A8  C011  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4616  0000AC  C010  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4617  0000B0  C00F  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4618  0000B4  C00E  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4619  0000B8  C00D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4620  0000BC  C00C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4621  0000C0  C00B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4622  0000C4  C00A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4623  0000C8  C009  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4624  0000CC  C008  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4625  0000D0  C007  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4626  0000D4  C006  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4627  0000D8  C005  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4628  0000DC  C004  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4629  0000E0  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4630  0000E2  0011               	retfie		f
  4631  0000E4                     __end_of_INTERRUPT_InterruptManager:
  4632                           	opt stack 0
  4633                           tosu	equ	0xFFF
  4634                           tosh	equ	0xFFE
  4635                           tosl	equ	0xFFD
  4636                           pclatu	equ	0xFFB
  4637                           pclath	equ	0xFFA
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           intcon	equ	0xFF2
  4645                           intcon2	equ	0xFF1
  4646                           postinc0	equ	0xFEE
  4647                           fsr0h	equ	0xFEA
  4648                           fsr0l	equ	0xFE9
  4649                           wreg	equ	0xFE8
  4650                           fsr1h	equ	0xFE2
  4651                           fsr1l	equ	0xFE1
  4652                           fsr2h	equ	0xFDA
  4653                           fsr2l	equ	0xFD9
  4654                           status	equ	0xFD8
  4655                           
  4656 ;; *************** function _i2c_slave_ISR *****************
  4657 ;; Defined at:
  4658 ;;		line 65 in file "mcc_generated_files/drivers/i2c_slave.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4672 ;;      Params:         0       0       0       0       0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0
  4675 ;;      Totals:         0       0       0       0       0       0       0
  4676 ;;Total ram usage:        0 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    3
  4679 ;; This function calls:
  4680 ;;		_i2c2_driver_getRXData
  4681 ;;		_i2c2_driver_isData
  4682 ;;		_i2c2_driver_isRead
  4683 ;;		_i2c2_driver_releaseClock
  4684 ;;		_i2c_slave_AddrCallBack
  4685 ;;		_i2c_slave_RdCallBack
  4686 ;;		_i2c_slave_WrCallBack
  4687 ;; This function is called by:
  4688 ;;		_i2c_slave_open
  4689 ;;		_INTERRUPT_InterruptManager
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text39
  4694  000BAE                     __ptext39:
  4695                           	opt stack 0
  4696  000BAE                     _i2c_slave_ISR:
  4697                           	opt stack 23
  4698                           
  4699                           ;i2c_slave.c: 66: PIR3bits.SSP2IF = 0;
  4700                           
  4701                           ;incstack = 0
  4702  000BAE  9EA4               	bcf	4004,7,c	;volatile
  4703                           
  4704                           ;i2c_slave.c: 67: i2c1Data = i2c2_driver_getRXData();
  4705  000BB0  EC43  F007         	call	_i2c2_driver_getRXData	;wreg free
  4706  000BB4  6E48               	movwf	_i2c1Data,c
  4707                           
  4708                           ;i2c_slave.c: 68: if (0 == i2c2_driver_isRead()) {
  4709  000BB6  ECEB  F006         	call	_i2c2_driver_isRead	;wreg free
  4710  000BBA  B0D8               	btfsc	status,0,c
  4711  000BBC  D00A               	goto	i2l420
  4712                           
  4713                           ;i2c_slave.c: 69: if (1 == i2c2_driver_isData()) {
  4714  000BBE  ECF3  F006         	call	_i2c2_driver_isData	;wreg free
  4715  000BC2  A0D8               	btfss	status,0,c
  4716  000BC4  D003               	goto	i2l421
  4717                           
  4718                           ;i2c_slave.c: 70: i2c_slave_RdCallBack();
  4719  000BC6  EC75  F006         	call	_i2c_slave_RdCallBack	;wreg free
  4720                           
  4721                           ;i2c_slave.c: 71: } else {
  4722  000BCA  D005               	goto	i2l423
  4723  000BCC                     i2l421:
  4724                           
  4725                           ;i2c_slave.c: 72: i2c_slave_AddrCallBack();
  4726  000BCC  EC85  F006         	call	_i2c_slave_AddrCallBack	;wreg free
  4727                           
  4728                           ;i2c_slave.c: 73: }
  4729                           ;i2c_slave.c: 74: } else {
  4730  000BD0  D002               	goto	i2l423
  4731  000BD2                     i2l420:
  4732                           
  4733                           ;i2c_slave.c: 75: i2c_slave_WrCallBack();
  4734  000BD2  EC65  F006         	call	_i2c_slave_WrCallBack	;wreg free
  4735  000BD6                     i2l423:
  4736                           
  4737                           ;i2c_slave.c: 76: }
  4738                           ;i2c_slave.c: 78: i2c2_driver_releaseClock();
  4739  000BD6  EC45  F007         	call	_i2c2_driver_releaseClock	;wreg free
  4740  000BDA  0012               	return		;funcret
  4741  000BDC                     __end_of_i2c_slave_ISR:
  4742                           	opt stack 0
  4743                           tosu	equ	0xFFF
  4744                           tosh	equ	0xFFE
  4745                           tosl	equ	0xFFD
  4746                           pclatu	equ	0xFFB
  4747                           pclath	equ	0xFFA
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           intcon	equ	0xFF2
  4755                           intcon2	equ	0xFF1
  4756                           postinc0	equ	0xFEE
  4757                           fsr0h	equ	0xFEA
  4758                           fsr0l	equ	0xFE9
  4759                           wreg	equ	0xFE8
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _i2c_slave_WrCallBack *****************
  4767 ;; Defined at:
  4768 ;;		line 130 in file "mcc_generated_files/drivers/i2c_slave.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4782 ;;      Params:         0       0       0       0       0       0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    2
  4789 ;; This function calls:
  4790 ;;		Absolute function
  4791 ;;		_i2c_slave_DefWrInterruptHandler
  4792 ;; This function is called by:
  4793 ;;		_i2c_slave_ISR
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text40
  4798  000CCA                     __ptext40:
  4799                           	opt stack 0
  4800  000CCA                     _i2c_slave_WrCallBack:
  4801                           	opt stack 23
  4802                           
  4803                           ;i2c_slave.c: 132: if (i2c_slave_WrInterruptHandler) {
  4804                           
  4805                           ;incstack = 0
  4806  000CCA  503C               	movf	_i2c_slave_WrInterruptHandler,w,c
  4807  000CCC  103D               	iorwf	_i2c_slave_WrInterruptHandler+1,w,c
  4808  000CCE  B4D8               	btfsc	status,2,c
  4809  000CD0  0012               	return	
  4810                           
  4811                           ;i2c_slave.c: 133: i2c_slave_WrInterruptHandler();
  4812  000CD2  D801               	call	i2u104_48
  4813  000CD4  0012               	return	
  4814  000CD6                     i2u104_48:
  4815  000CD6  0005               	push	
  4816  000CD8  6EFA               	movwf	pclath,c
  4817  000CDA  503C               	movf	_i2c_slave_WrInterruptHandler,w,c
  4818  000CDC  6EFD               	movwf	tosl,c
  4819  000CDE  503D               	movf	_i2c_slave_WrInterruptHandler+1,w,c
  4820  000CE0  6EFE               	movwf	tosh,c
  4821  000CE2  50F8               	movf	tblptru,w,c
  4822  000CE4  6EFF               	movwf	tosu,c
  4823  000CE6  50FA               	movf	pclath,w,c
  4824  000CE8  0012               	return		;indir
  4825  000CEA                     __end_of_i2c_slave_WrCallBack:
  4826                           	opt stack 0
  4827                           tosu	equ	0xFFF
  4828                           tosh	equ	0xFFE
  4829                           tosl	equ	0xFFD
  4830                           pclatu	equ	0xFFB
  4831                           pclath	equ	0xFFA
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           postinc0	equ	0xFEE
  4841                           fsr0h	equ	0xFEA
  4842                           fsr0l	equ	0xFE9
  4843                           wreg	equ	0xFE8
  4844                           fsr1h	equ	0xFE2
  4845                           fsr1l	equ	0xFE1
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _i2c_slave_DefWrInterruptHandler *****************
  4851 ;; Defined at:
  4852 ;;		line 141 in file "mcc_generated_files/drivers/i2c_slave.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4866 ;;      Params:         0       0       0       0       0       0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0
  4869 ;;      Totals:         0       0       0       0       0       0       0
  4870 ;;Total ram usage:        0 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    1
  4873 ;; This function calls:
  4874 ;;		_i2c2_driver_TXData
  4875 ;; This function is called by:
  4876 ;;		_i2c_slave_open
  4877 ;;		_i2c_slave_WrCallBack
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text41
  4882  000E60                     __ptext41:
  4883                           	opt stack 0
  4884  000E60                     _i2c_slave_DefWrInterruptHandler:
  4885                           	opt stack 23
  4886                           
  4887                           ;i2c_slave.c: 142: i2c2_driver_TXData(i2c_slave_writeData);
  4888                           
  4889                           ;incstack = 0
  4890  000E60  5049               	movf	_i2c_slave_writeData,w,c	;volatile
  4891  000E62  EC34  F007         	call	_i2c2_driver_TXData
  4892  000E66  0012               	return		;funcret
  4893  000E68                     __end_of_i2c_slave_DefWrInterruptHandler:
  4894                           	opt stack 0
  4895                           tosu	equ	0xFFF
  4896                           tosh	equ	0xFFE
  4897                           tosl	equ	0xFFD
  4898                           pclatu	equ	0xFFB
  4899                           pclath	equ	0xFFA
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           postinc0	equ	0xFEE
  4909                           fsr0h	equ	0xFEA
  4910                           fsr0l	equ	0xFE9
  4911                           wreg	equ	0xFE8
  4912                           fsr1h	equ	0xFE2
  4913                           fsr1l	equ	0xFE1
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918 ;; *************** function _i2c2_driver_TXData *****************
  4919 ;; Defined at:
  4920 ;;		line 189 in file "mcc_generated_files/i2c2_driver.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  d               1    wreg     unsigned char 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  d               1    0[COMRAM] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4934 ;;      Params:         0       0       0       0       0       0       0
  4935 ;;      Locals:         1       0       0       0       0       0       0
  4936 ;;      Temps:          0       0       0       0       0       0       0
  4937 ;;      Totals:         1       0       0       0       0       0       0
  4938 ;;Total ram usage:        1 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_i2c_slave_DefWrInterruptHandler
  4944 ;;		_i2c_slave_write
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text42
  4949  000E68                     __ptext42:
  4950                           	opt stack 0
  4951  000E68                     _i2c2_driver_TXData:
  4952                           	opt stack 23
  4953                           
  4954                           ;incstack = 0
  4955                           ;i2c2_driver_TXData@d stored from wreg
  4956  000E68  6E01               	movwf	i2c2_driver_TXData@d,c
  4957                           
  4958                           ;i2c2_driver.c: 191: SSP2BUF = d;
  4959  000E6A  C001  FF6F         	movff	i2c2_driver_TXData@d,3951	;volatile
  4960  000E6E  0012               	return		;funcret
  4961  000E70                     __end_of_i2c2_driver_TXData:
  4962                           	opt stack 0
  4963                           tosu	equ	0xFFF
  4964                           tosh	equ	0xFFE
  4965                           tosl	equ	0xFFD
  4966                           pclatu	equ	0xFFB
  4967                           pclath	equ	0xFFA
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           intcon	equ	0xFF2
  4975                           intcon2	equ	0xFF1
  4976                           postinc0	equ	0xFEE
  4977                           fsr0h	equ	0xFEA
  4978                           fsr0l	equ	0xFE9
  4979                           wreg	equ	0xFE8
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _i2c_slave_RdCallBack *****************
  4987 ;; Defined at:
  4988 ;;		line 106 in file "mcc_generated_files/drivers/i2c_slave.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;		None
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5002 ;;      Params:         0       0       0       0       0       0       0
  5003 ;;      Locals:         0       0       0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0
  5005 ;;      Totals:         0       0       0       0       0       0       0
  5006 ;;Total ram usage:        0 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    2
  5009 ;; This function calls:
  5010 ;;		Absolute function
  5011 ;;		_i2c_slave_PWMRdInterruptHandler
  5012 ;; This function is called by:
  5013 ;;		_i2c_slave_ISR
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text43
  5018  000CEA                     __ptext43:
  5019                           	opt stack 0
  5020  000CEA                     _i2c_slave_RdCallBack:
  5021                           	opt stack 23
  5022                           
  5023                           ;i2c_slave.c: 108: if (i2c_slave_RdInterruptHandler) {
  5024                           
  5025                           ;incstack = 0
  5026  000CEA  503E               	movf	_i2c_slave_RdInterruptHandler,w,c
  5027  000CEC  103F               	iorwf	_i2c_slave_RdInterruptHandler+1,w,c
  5028  000CEE  B4D8               	btfsc	status,2,c
  5029  000CF0  0012               	return	
  5030                           
  5031                           ;i2c_slave.c: 109: i2c_slave_RdInterruptHandler();
  5032  000CF2  D801               	call	i2u100_48
  5033  000CF4  0012               	return	
  5034  000CF6                     i2u100_48:
  5035  000CF6  0005               	push	
  5036  000CF8  6EFA               	movwf	pclath,c
  5037  000CFA  503E               	movf	_i2c_slave_RdInterruptHandler,w,c
  5038  000CFC  6EFD               	movwf	tosl,c
  5039  000CFE  503F               	movf	_i2c_slave_RdInterruptHandler+1,w,c
  5040  000D00  6EFE               	movwf	tosh,c
  5041  000D02  50F8               	movf	tblptru,w,c
  5042  000D04  6EFF               	movwf	tosu,c
  5043  000D06  50FA               	movf	pclath,w,c
  5044  000D08  0012               	return		;indir
  5045  000D0A                     __end_of_i2c_slave_RdCallBack:
  5046                           	opt stack 0
  5047                           tosu	equ	0xFFF
  5048                           tosh	equ	0xFFE
  5049                           tosl	equ	0xFFD
  5050                           pclatu	equ	0xFFB
  5051                           pclath	equ	0xFFA
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           intcon2	equ	0xFF1
  5060                           postinc0	equ	0xFEE
  5061                           fsr0h	equ	0xFEA
  5062                           fsr0l	equ	0xFE9
  5063                           wreg	equ	0xFE8
  5064                           fsr1h	equ	0xFE2
  5065                           fsr1l	equ	0xFE1
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _i2c_slave_PWMRdInterruptHandler *****************
  5071 ;; Defined at:
  5072 ;;		line 165 in file "mcc_generated_files/drivers/i2c_slave.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5086 ;;      Params:         0       0       0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0
  5089 ;;      Totals:         0       0       0       0       0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    1
  5093 ;; This function calls:
  5094 ;;		_i2c2_driver_getRXData
  5095 ;;		_sram_write
  5096 ;; This function is called by:
  5097 ;;		_i2c_slave_open
  5098 ;;		_i2c_slave_RdCallBack
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text44
  5103  0009C0                     __ptext44:
  5104                           	opt stack 0
  5105  0009C0                     _i2c_slave_PWMRdInterruptHandler:
  5106                           	opt stack 23
  5107                           
  5108                           ;i2c_slave.c: 166: i2c1Data = i2c2_driver_getRXData();
  5109                           
  5110                           ;incstack = 0
  5111  0009C0  EC43  F007         	call	_i2c2_driver_getRXData	;wreg free
  5112  0009C4  6E48               	movwf	_i2c1Data,c
  5113                           
  5114                           ;i2c_slave.c: 167: switch(pwmCommand.state) {
  5115  0009C6  D026               	goto	i2l481
  5116  0009C8                     
  5117                           ;i2c_slave.c: 170: pwmCommand.state = SECONDBYTE;
  5118  0009C8  0E01               	movlw	1
  5119  0009CA  6E39               	movwf	_pwmCommand+3,c	;volatile
  5120                           
  5121                           ;i2c_slave.c: 173: pwmCommand.commandType = (i2c1Data >> 6) & 0x3U;
  5122  0009CC  4448               	rlncf	_i2c1Data,w,c
  5123  0009CE  46E8               	rlncf	wreg,f,c
  5124  0009D0  0B03               	andlw	3
  5125  0009D2  0B03               	andlw	3
  5126  0009D4  6E36               	movwf	_pwmCommand,c	;volatile
  5127                           
  5128                           ;i2c_slave.c: 175: pwmCommand.parameter = ((uint16_t) (i2c1Data & 0x3U)) << 8;
  5129  0009D6  5048               	movf	_i2c1Data,w,c
  5130  0009D8  0B03               	andlw	3
  5131  0009DA  6E38               	movwf	_pwmCommand+2,c	;volatile
  5132  0009DC  6A37               	clrf	_pwmCommand+1,c	;volatile
  5133                           
  5134                           ;i2c_slave.c: 178: sram_write(0, pwmCommand.commandType);
  5135  0009DE  C036  F001         	movff	_pwmCommand,sram_write@data	;volatile
  5136  0009E2  0E00               	movlw	0
  5137  0009E4  ECEE  F005         	call	_sram_write
  5138                           
  5139                           ;i2c_slave.c: 179: sram_write(1, (pwmCommand.parameter >> 8) & 0xFF);
  5140  0009E8  5038               	movf	_pwmCommand+2,w,c	;volatile
  5141  0009EA  6E01               	movwf	sram_write@data,c
  5142  0009EC  0E01               	movlw	1
  5143  0009EE  ECEE  F005         	call	_sram_write
  5144                           
  5145                           ;i2c_slave.c: 181: break;
  5146  0009F2  0012               	return	
  5147  0009F4                     
  5148                           ;i2c_slave.c: 185: pwmCommand.parameter |= i2c1Data;
  5149  0009F4  5048               	movf	_i2c1Data,w,c
  5150  0009F6  1237               	iorwf	_pwmCommand+1,f,c	;volatile
  5151                           
  5152                           ;i2c_slave.c: 187: pwmCommand.state = RECEIVED;
  5153  0009F8  0E02               	movlw	2
  5154  0009FA  6E39               	movwf	_pwmCommand+3,c	;volatile
  5155                           
  5156                           ;i2c_slave.c: 190: sram_write(2, pwmCommand.parameter & 0xFF);
  5157  0009FC  C037  F001         	movff	_pwmCommand+1,sram_write@data	;volatile
  5158  000A00  0E02               	movlw	2
  5159  000A02  ECEE  F005         	call	_sram_write
  5160                           
  5161                           ;i2c_slave.c: 193: pwmCommand.commandType = 0;
  5162  000A06  0E00               	movlw	0
  5163  000A08  6E36               	movwf	_pwmCommand,c	;volatile
  5164                           
  5165                           ;i2c_slave.c: 194: pwmCommand.parameter = 0;
  5166  000A0A  0E00               	movlw	0
  5167  000A0C  6E38               	movwf	_pwmCommand+2,c	;volatile
  5168  000A0E  0E00               	movlw	0
  5169  000A10  6E37               	movwf	_pwmCommand+1,c	;volatile
  5170                           
  5171                           ;i2c_slave.c: 201: }
  5172                           
  5173                           ;i2c_slave.c: 200: break;
  5174                           
  5175                           ;i2c_slave.c: 198: default:
  5176                           
  5177                           ;i2c_slave.c: 196: break;
  5178  000A12  0012               	return	
  5179  000A14                     i2l481:
  5180  000A14  5039               	movf	_pwmCommand+3,w,c	;volatile
  5181                           
  5182                           ; Switch size 1, requested type "space"
  5183                           ; Number of cases is 2, Range of values is 0 to 1
  5184                           ; switch strategies available:
  5185                           ; Name         Instructions Cycles
  5186                           ; simple_byte            7     4 (average)
  5187                           ;	Chosen strategy is simple_byte
  5188  000A16  0A00               	xorlw	0	; case 0
  5189  000A18  B4D8               	btfsc	status,2,c
  5190  000A1A  D7D6               	goto	i2l482
  5191  000A1C  0A01               	xorlw	1	; case 1
  5192  000A1E  A4D8               	btfss	status,2,c
  5193  000A20  0012               	return	
  5194  000A22  D7E8               	goto	i2l484
  5195  000A24                     __end_of_i2c_slave_PWMRdInterruptHandler:
  5196                           	opt stack 0
  5197                           tosu	equ	0xFFF
  5198                           tosh	equ	0xFFE
  5199                           tosl	equ	0xFFD
  5200                           pclatu	equ	0xFFB
  5201                           pclath	equ	0xFFA
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           prodh	equ	0xFF4
  5207                           prodl	equ	0xFF3
  5208                           intcon	equ	0xFF2
  5209                           intcon2	equ	0xFF1
  5210                           postinc0	equ	0xFEE
  5211                           fsr0h	equ	0xFEA
  5212                           fsr0l	equ	0xFE9
  5213                           wreg	equ	0xFE8
  5214                           fsr1h	equ	0xFE2
  5215                           fsr1l	equ	0xFE1
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _sram_write *****************
  5221 ;; Defined at:
  5222 ;;		line 50 in file "sram_control.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  address         1    wreg     unsigned char 
  5225 ;;  data            1    0[COMRAM] unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  address         1    2[COMRAM] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  1    wreg      void 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5237 ;;      Params:         1       0       0       0       0       0       0
  5238 ;;      Locals:         1       0       0       0       0       0       0
  5239 ;;      Temps:          1       0       0       0       0       0       0
  5240 ;;      Totals:         3       0       0       0       0       0       0
  5241 ;;Total ram usage:        3 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_i2c_slave_PWMRdInterruptHandler
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text45
  5251  000BDC                     __ptext45:
  5252                           	opt stack 0
  5253  000BDC                     _sram_write:
  5254                           	opt stack 23
  5255                           
  5256                           ;incstack = 0
  5257                           ;sram_write@address stored from wreg
  5258  000BDC  6E03               	movwf	sram_write@address,c
  5259                           
  5260                           ;sram_control.c: 52: PORTAbits.RA6 = 1;
  5261  000BDE  8C80               	bsf	3968,6,c	;volatile
  5262                           
  5263                           ;sram_control.c: 53: PORTAbits.RA7 = 0;
  5264  000BE0  9E80               	bcf	3968,7,c	;volatile
  5265                           
  5266                           ;sram_control.c: 54: PORTA = (PORTA & 0xE0) | (address & 0x1F);
  5267  000BE2  C003  F002         	movff	sram_write@address,??_sram_write
  5268  000BE6  0E1F               	movlw	31
  5269  000BE8  1602               	andwf	??_sram_write,f,c
  5270  000BEA  5080               	movf	3968,w,c	;volatile
  5271  000BEC  0BE0               	andlw	224
  5272  000BEE  1002               	iorwf	??_sram_write,w,c
  5273  000BF0  6E80               	movwf	3968,c	;volatile
  5274                           
  5275                           ;sram_control.c: 57: TRISC = 0x00;
  5276  000BF2  0E00               	movlw	0
  5277  000BF4  6E94               	movwf	3988,c	;volatile
  5278                           
  5279                           ;sram_control.c: 60: PORTC = data;
  5280  000BF6  C001  FF82         	movff	sram_write@data,3970	;volatile
  5281                           
  5282                           ;sram_control.c: 62: _delay((unsigned long)((1)*(16000000/4000000.0)));
  5283  000BFA  D000               	nop2		;2 cycle nop
  5284  000BFC  D000               	nop2		;2 cycle nop
  5285                           
  5286                           ;sram_control.c: 65: PORTAbits.RA7 = 1;
  5287  000BFE  8E80               	bsf	3968,7,c	;volatile
  5288                           
  5289                           ;sram_control.c: 66: _delay((unsigned long)((1)*(16000000/4000000.0)));
  5290  000C00  D000               	nop2		;2 cycle nop
  5291  000C02  D000               	nop2		;2 cycle nop
  5292                           
  5293                           ;sram_control.c: 69: PORTAbits.RA6 = 1;
  5294  000C04  8C80               	bsf	3968,6,c	;volatile
  5295                           
  5296                           ;sram_control.c: 70: TRISC = 0xFF;
  5297  000C06  6894               	setf	3988,c	;volatile
  5298  000C08  0012               	return		;funcret
  5299  000C0A                     __end_of_sram_write:
  5300                           	opt stack 0
  5301                           tosu	equ	0xFFF
  5302                           tosh	equ	0xFFE
  5303                           tosl	equ	0xFFD
  5304                           pclatu	equ	0xFFB
  5305                           pclath	equ	0xFFA
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon2	equ	0xFF1
  5314                           postinc0	equ	0xFEE
  5315                           fsr0h	equ	0xFEA
  5316                           fsr0l	equ	0xFE9
  5317                           wreg	equ	0xFE8
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _i2c2_driver_getRXData *****************
  5325 ;; Defined at:
  5326 ;;		line 174 in file "mcc_generated_files/i2c2_driver.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      unsigned char 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5340 ;;      Params:         0       0       0       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0
  5343 ;;      Totals:         0       0       0       0       0       0       0
  5344 ;;Total ram usage:        0 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_i2c_slave_ISR
  5350 ;;		_i2c_slave_PWMRdInterruptHandler
  5351 ;;		_i2c_slave_read
  5352 ;;		_i2c_slave_DefRdInterruptHandler
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text46
  5357  000E86                     __ptext46:
  5358                           	opt stack 0
  5359  000E86                     _i2c2_driver_getRXData:
  5360                           	opt stack 23
  5361                           
  5362                           ;i2c2_driver.c: 176: return SSP2BUF;
  5363                           
  5364                           ;incstack = 0
  5365  000E86  506F               	movf	3951,w,c	;volatile
  5366  000E88  0012               	return	
  5367  000E8A                     __end_of_i2c2_driver_getRXData:
  5368                           	opt stack 0
  5369                           tosu	equ	0xFFF
  5370                           tosh	equ	0xFFE
  5371                           tosl	equ	0xFFD
  5372                           pclatu	equ	0xFFB
  5373                           pclath	equ	0xFFA
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodh	equ	0xFF4
  5379                           prodl	equ	0xFF3
  5380                           intcon	equ	0xFF2
  5381                           intcon2	equ	0xFF1
  5382                           postinc0	equ	0xFEE
  5383                           fsr0h	equ	0xFEA
  5384                           fsr0l	equ	0xFE9
  5385                           wreg	equ	0xFE8
  5386                           fsr1h	equ	0xFE2
  5387                           fsr1l	equ	0xFE1
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _i2c_slave_AddrCallBack *****************
  5393 ;; Defined at:
  5394 ;;		line 146 in file "mcc_generated_files/drivers/i2c_slave.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      void 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5408 ;;      Params:         0       0       0       0       0       0       0
  5409 ;;      Locals:         0       0       0       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0       0       0
  5411 ;;      Totals:         0       0       0       0       0       0       0
  5412 ;;Total ram usage:        0 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    1
  5415 ;; This function calls:
  5416 ;;		Absolute function
  5417 ;;		_i2c_slave_PWMAddrInterruptHandler
  5418 ;; This function is called by:
  5419 ;;		_i2c_slave_ISR
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text47
  5424  000D0A                     __ptext47:
  5425                           	opt stack 0
  5426  000D0A                     _i2c_slave_AddrCallBack:
  5427                           	opt stack 24
  5428                           
  5429                           ;i2c_slave.c: 148: if (i2c_slave_AddrInterruptHandler) {
  5430                           
  5431                           ;incstack = 0
  5432  000D0A  503A               	movf	_i2c_slave_AddrInterruptHandler,w,c
  5433  000D0C  103B               	iorwf	_i2c_slave_AddrInterruptHandler+1,w,c
  5434  000D0E  B4D8               	btfsc	status,2,c
  5435  000D10  0012               	return	
  5436                           
  5437                           ;i2c_slave.c: 149: i2c_slave_AddrInterruptHandler();
  5438  000D12  D801               	call	i2u102_48
  5439  000D14  0012               	return	
  5440  000D16                     i2u102_48:
  5441  000D16  0005               	push	
  5442  000D18  6EFA               	movwf	pclath,c
  5443  000D1A  503A               	movf	_i2c_slave_AddrInterruptHandler,w,c
  5444  000D1C  6EFD               	movwf	tosl,c
  5445  000D1E  503B               	movf	_i2c_slave_AddrInterruptHandler+1,w,c
  5446  000D20  6EFE               	movwf	tosh,c
  5447  000D22  50F8               	movf	tblptru,w,c
  5448  000D24  6EFF               	movwf	tosu,c
  5449  000D26  50FA               	movf	pclath,w,c
  5450  000D28  0012               	return		;indir
  5451  000D2A                     __end_of_i2c_slave_AddrCallBack:
  5452                           	opt stack 0
  5453                           tosu	equ	0xFFF
  5454                           tosh	equ	0xFFE
  5455                           tosl	equ	0xFFD
  5456                           pclatu	equ	0xFFB
  5457                           pclath	equ	0xFFA
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           intcon2	equ	0xFF1
  5466                           postinc0	equ	0xFEE
  5467                           fsr0h	equ	0xFEA
  5468                           fsr0l	equ	0xFE9
  5469                           wreg	equ	0xFE8
  5470                           fsr1h	equ	0xFE2
  5471                           fsr1l	equ	0xFE1
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _i2c_slave_PWMAddrInterruptHandler *****************
  5477 ;; Defined at:
  5478 ;;		line 205 in file "mcc_generated_files/drivers/i2c_slave.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5492 ;;      Params:         0       0       0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0
  5495 ;;      Totals:         0       0       0       0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_i2c_slave_open
  5502 ;;		_i2c_slave_AddrCallBack
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text48
  5507  000E70                     __ptext48:
  5508                           	opt stack 0
  5509  000E70                     _i2c_slave_PWMAddrInterruptHandler:
  5510                           	opt stack 24
  5511                           
  5512                           ;i2c_slave.c: 207: pwmCommand.state = FIRSTBYTE;
  5513                           
  5514                           ;incstack = 0
  5515  000E70  0E00               	movlw	0
  5516  000E72  6E39               	movwf	_pwmCommand+3,c	;volatile
  5517  000E74  0012               	return		;funcret
  5518  000E76                     __end_of_i2c_slave_PWMAddrInterruptHandler:
  5519                           	opt stack 0
  5520                           tosu	equ	0xFFF
  5521                           tosh	equ	0xFFE
  5522                           tosl	equ	0xFFD
  5523                           pclatu	equ	0xFFB
  5524                           pclath	equ	0xFFA
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon2	equ	0xFF1
  5533                           postinc0	equ	0xFEE
  5534                           fsr0h	equ	0xFEA
  5535                           fsr0l	equ	0xFE9
  5536                           wreg	equ	0xFE8
  5537                           fsr1h	equ	0xFE2
  5538                           fsr1l	equ	0xFE1
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _i2c2_driver_releaseClock *****************
  5544 ;; Defined at:
  5545 ;;		line 211 in file "mcc_generated_files/i2c2_driver.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		None
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5559 ;;      Params:         0       0       0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0
  5562 ;;      Totals:         0       0       0       0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_i2c_slave_ISR
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text49
  5573  000E8A                     __ptext49:
  5574                           	opt stack 0
  5575  000E8A                     _i2c2_driver_releaseClock:
  5576                           	opt stack 25
  5577                           
  5578                           ;i2c2_driver.c: 213: SSP2CON1bits.CKP = 1;
  5579                           
  5580                           ;incstack = 0
  5581  000E8A  886C               	bsf	3948,4,c	;volatile
  5582  000E8C  0012               	return		;funcret
  5583  000E8E                     __end_of_i2c2_driver_releaseClock:
  5584                           	opt stack 0
  5585                           tosu	equ	0xFFF
  5586                           tosh	equ	0xFFE
  5587                           tosl	equ	0xFFD
  5588                           pclatu	equ	0xFFB
  5589                           pclath	equ	0xFFA
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           intcon2	equ	0xFF1
  5598                           postinc0	equ	0xFEE
  5599                           fsr0h	equ	0xFEA
  5600                           fsr0l	equ	0xFE9
  5601                           wreg	equ	0xFE8
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _i2c2_driver_isRead *****************
  5609 ;; Defined at:
  5610 ;;		line 241 in file "mcc_generated_files/i2c2_driver.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;		None
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;		None
  5615 ;; Return value:  Size  Location     Type
  5616 ;;		None               void
  5617 ;; Registers used:
  5618 ;;		wreg, status,0
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5624 ;;      Params:         0       0       0       0       0       0       0
  5625 ;;      Locals:         0       0       0       0       0       0       0
  5626 ;;      Temps:          1       0       0       0       0       0       0
  5627 ;;      Totals:         1       0       0       0       0       0       0
  5628 ;;Total ram usage:        1 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; This function calls:
  5631 ;;		Nothing
  5632 ;; This function is called by:
  5633 ;;		_i2c_slave_ISR
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text50
  5638  000DD6                     __ptext50:
  5639                           	opt stack 0
  5640  000DD6                     _i2c2_driver_isRead:
  5641                           	opt stack 25
  5642                           
  5643                           ;i2c2_driver.c: 243: return SSP2STATbits.R_nW;
  5644                           
  5645                           ;incstack = 0
  5646  000DD6  A46D               	btfss	3949,2,c	;volatile
  5647  000DD8  D003               	goto	i2u98_40
  5648  000DDA  6A01               	clrf	??_i2c2_driver_isRead& (0+255),c
  5649  000DDC  2A01               	incf	??_i2c2_driver_isRead& (0+255),f,c
  5650  000DDE  D001               	goto	i2u98_48
  5651  000DE0                     i2u98_40:
  5652  000DE0  6A01               	clrf	??_i2c2_driver_isRead& (0+255),c
  5653  000DE2                     i2u98_48:
  5654  000DE2  3001               	rrcf	??_i2c2_driver_isRead,w,c
  5655  000DE4  0012               	return	
  5656  000DE6                     __end_of_i2c2_driver_isRead:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclatu	equ	0xFFB
  5662                           pclath	equ	0xFFA
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           intcon2	equ	0xFF1
  5671                           postinc0	equ	0xFEE
  5672                           fsr0h	equ	0xFEA
  5673                           fsr0l	equ	0xFE9
  5674                           wreg	equ	0xFE8
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function _i2c2_driver_isData *****************
  5682 ;; Defined at:
  5683 ;;		line 236 in file "mcc_generated_files/i2c2_driver.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, status,0
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5697 ;;      Params:         0       0       0       0       0       0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0
  5699 ;;      Temps:          1       0       0       0       0       0       0
  5700 ;;      Totals:         1       0       0       0       0       0       0
  5701 ;;Total ram usage:        1 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_i2c_slave_ISR
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text51
  5711  000DE6                     __ptext51:
  5712                           	opt stack 0
  5713  000DE6                     _i2c2_driver_isData:
  5714                           	opt stack 25
  5715                           
  5716                           ;i2c2_driver.c: 238: return SSP2STATbits.D_nA;
  5717                           
  5718                           ;incstack = 0
  5719  000DE6  AA6D               	btfss	3949,5,c	;volatile
  5720  000DE8  D003               	goto	i2u97_40
  5721  000DEA  6A01               	clrf	??_i2c2_driver_isData& (0+255),c
  5722  000DEC  2A01               	incf	??_i2c2_driver_isData& (0+255),f,c
  5723  000DEE  D001               	goto	i2u97_48
  5724  000DF0                     i2u97_40:
  5725  000DF0  6A01               	clrf	??_i2c2_driver_isData& (0+255),c
  5726  000DF2                     i2u97_48:
  5727  000DF2  3001               	rrcf	??_i2c2_driver_isData,w,c
  5728  000DF4  0012               	return	
  5729  000DF6                     __end_of_i2c2_driver_isData:
  5730                           	opt stack 0
  5731                           tosu	equ	0xFFF
  5732                           tosh	equ	0xFFE
  5733                           tosl	equ	0xFFD
  5734                           pclatu	equ	0xFFB
  5735                           pclath	equ	0xFFA
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           prodh	equ	0xFF4
  5741                           prodl	equ	0xFF3
  5742                           intcon	equ	0xFF2
  5743                           intcon2	equ	0xFF1
  5744                           postinc0	equ	0xFEE
  5745                           fsr0h	equ	0xFEA
  5746                           fsr0l	equ	0xFE9
  5747                           wreg	equ	0xFE8
  5748                           fsr1h	equ	0xFE2
  5749                           fsr1l	equ	0xFE1
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _i2c_slave_BusCollisionISR *****************
  5755 ;; Defined at:
  5756 ;;		line 81 in file "mcc_generated_files/drivers/i2c_slave.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		None
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5770 ;;      Params:         0       0       0       0       0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0
  5772 ;;      Temps:          0       0       0       0       0       0       0
  5773 ;;      Totals:         0       0       0       0       0       0       0
  5774 ;;Total ram usage:        0 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; This function calls:
  5777 ;;		Nothing
  5778 ;; This function is called by:
  5779 ;;		_i2c_slave_open
  5780 ;;		_INTERRUPT_InterruptManager
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text52
  5785  000E92                     __ptext52:
  5786                           	opt stack 0
  5787  000E92                     _i2c_slave_BusCollisionISR:
  5788                           	opt stack 26
  5789                           
  5790                           ;incstack = 0
  5791  000E92  0012               	return		;funcret
  5792  000E94                     __end_of_i2c_slave_BusCollisionISR:
  5793                           	opt stack 0
  5794                           tosu	equ	0xFFF
  5795                           tosh	equ	0xFFE
  5796                           tosl	equ	0xFFD
  5797                           pclatu	equ	0xFFB
  5798                           pclath	equ	0xFFA
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon2	equ	0xFF1
  5807                           postinc0	equ	0xFEE
  5808                           fsr0h	equ	0xFEA
  5809                           fsr0l	equ	0xFE9
  5810                           wreg	equ	0xFE8
  5811                           fsr1h	equ	0xFE2
  5812                           fsr1l	equ	0xFE1
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function _ADC_ISR *****************
  5818 ;; Defined at:
  5819 ;;		line 129 in file "mcc_generated_files/adc.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;		None
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		None
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5833 ;;      Params:         0       0       0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0
  5836 ;;      Totals:         0       0       0       0       0       0       0
  5837 ;;Total ram usage:        0 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_INTERRUPT_InterruptManager
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text53
  5847  000E8E                     __ptext53:
  5848                           	opt stack 0
  5849  000E8E                     _ADC_ISR:
  5850                           	opt stack 26
  5851                           
  5852                           ;adc.c: 132: PIR1bits.ADIF = 0;
  5853                           
  5854                           ;incstack = 0
  5855  000E8E  9C9E               	bcf	3998,6,c	;volatile
  5856  000E90  0012               	return		;funcret
  5857  000E92                     __end_of_ADC_ISR:
  5858                           	opt stack 0
  5859  0000                     tosu	equ	0xFFF
  5860                           tosh	equ	0xFFE
  5861                           tosl	equ	0xFFD
  5862                           pclatu	equ	0xFFB
  5863                           pclath	equ	0xFFA
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon2	equ	0xFF1
  5872                           postinc0	equ	0xFEE
  5873                           fsr0h	equ	0xFEA
  5874                           fsr0l	equ	0xFE9
  5875                           wreg	equ	0xFE8
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           tosu	equ	0xFFF
  5882                           tosh	equ	0xFFE
  5883                           tosl	equ	0xFFD
  5884                           pclatu	equ	0xFFB
  5885                           pclath	equ	0xFFA
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           prodh	equ	0xFF4
  5891                           prodl	equ	0xFF3
  5892                           intcon	equ	0xFF2
  5893                           intcon2	equ	0xFF1
  5894                           postinc0	equ	0xFEE
  5895                           fsr0h	equ	0xFEA
  5896                           fsr0l	equ	0xFE9
  5897                           wreg	equ	0xFE8
  5898                           fsr1h	equ	0xFE2
  5899                           fsr1l	equ	0xFE1
  5900                           fsr2h	equ	0xFDA
  5901                           fsr2l	equ	0xFD9
  5902                           status	equ	0xFD8
  5903                           
  5904                           	psect	text54
  5905  000000                     __ptext54:
  5906                           	opt stack 0
  5907                           tosu	equ	0xFFF
  5908                           tosh	equ	0xFFE
  5909                           tosl	equ	0xFFD
  5910                           pclatu	equ	0xFFB
  5911                           pclath	equ	0xFFA
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon2	equ	0xFF1
  5920                           postinc0	equ	0xFEE
  5921                           fsr0h	equ	0xFEA
  5922                           fsr0l	equ	0xFE9
  5923                           wreg	equ	0xFE8
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930                           	psect	rparam
  5931  0000                     tosu	equ	0xFFF
  5932                           tosh	equ	0xFFE
  5933                           tosl	equ	0xFFD
  5934                           pclatu	equ	0xFFB
  5935                           pclath	equ	0xFFA
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           intcon	equ	0xFF2
  5943                           intcon2	equ	0xFF1
  5944                           postinc0	equ	0xFEE
  5945                           fsr0h	equ	0xFEA
  5946                           fsr0l	equ	0xFE9
  5947                           wreg	equ	0xFE8
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954                           	psect	temp
  5955  00004A                     btemp:
  5956                           	opt stack 0
  5957  00004A                     	ds	1
  5958  0000                     int$flags	set	btemp
  5959  0000                     wtemp6	set	btemp+1
  5960                           tosu	equ	0xFFF
  5961                           tosh	equ	0xFFE
  5962                           tosl	equ	0xFFD
  5963                           pclatu	equ	0xFFB
  5964                           pclath	equ	0xFFA
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           intcon2	equ	0xFF1
  5973                           postinc0	equ	0xFEE
  5974                           fsr0h	equ	0xFEA
  5975                           fsr0l	equ	0xFE9
  5976                           wreg	equ	0xFE8
  5977                           fsr1h	equ	0xFE2
  5978                           fsr1l	equ	0xFE1
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         27
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      73
    BANK0           160     43      55
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sRead	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sWrite	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sAddr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_slave_setAddrIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_PWMAddrInterruptHandler(), 

    i2c_slave_AddrInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_slave_PWMAddrInterruptHandler(), 

    i2c_slave_setWriteIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_DefWrInterruptHandler(), 

    i2c_slave_WrInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_slave_DefWrInterruptHandler(), 

    i2c_slave_setReadIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_PWMRdInterruptHandler(), 

    i2c_slave_setIsrHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_ISR(), 

    i2c_slave_RdInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_slave_PWMRdInterruptHandler(), 

    i2c2_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_ISR(), 

    i2c2_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_slave_BusCollisionISR(), 

    i2c2_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_slave_ISR(), 

    i2c2_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_slave_BusCollisionISR(), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _i2c_slave_open->_i2c_slave_setIsrHandler
    _i2c_slave_setIsrHandler->_i2c2_driver_setI2cISR
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftneg->___lltoft
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _i2c_slave_DefWrInterruptHandler->_i2c2_driver_TXData
    _i2c_slave_PWMRdInterruptHandler->_sram_write

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   22299
                                             36 BANK0      7     7      0
                  _ADC_GetConversion
                      _EUSART2_Write
                    _PWM4_Initialize
                 _PWM4_LoadDutyValue
            _SRAM_CONTROL_INITIALIZE
                  _SYSTEM_Initialize
                    _TMR1_Initialize
                    _TMR1_StartTimer
                    _TMR2_Initialize
                    _TMR2_StartTimer
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                            ___lwmod
                           ___lwtoft
                     _i2c_slave_open
                          _sram_read
 ---------------------------------------------------------------------------------
 (1) _sram_read                                            3     3      0      45
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _i2c_slave_open                                       0     0      0     708
      _i2c2_driver_initSlaveHardware
                _i2c2_driver_setAddr
     _i2c2_driver_setBusCollisionISR
                _i2c2_driver_setMask
        _i2c_slave_setAddrIntHandler
            _i2c_slave_setIsrHandler
        _i2c_slave_setReadIntHandler
       _i2c_slave_setWriteIntHandler
                    _mssp2_enableIRQ
 ---------------------------------------------------------------------------------
 (2) _mssp2_enableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_slave_setWriteIntHandler                         2     0      2      98
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c_slave_setReadIntHandler                          2     0      2      98
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c_slave_setIsrHandler                              2     0      2     196
                                             23 COMRAM     2     0      2
              _i2c2_driver_setI2cISR
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_setI2cISR                                2     0      2      98
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c_slave_setAddrIntHandler                          2     0      2      98
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c2_driver_setMask                                  1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c2_driver_setBusCollisionISR                       2     0      2     174
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c2_driver_setAddr                                  1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c2_driver_initSlaveHardware                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3524
                                             29 COMRAM     3     0      3
                  _ADC_GetConversion (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     463
                                             21 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lltoft                                             9     5      4    3145
                                             29 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     404
                                             21 BANK0     15    11      4
                  _ADC_GetConversion (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     121
                                             38 COMRAM     3     0      3
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    4121
                                             47 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                  _ADC_GetConversion (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    4053
                                             32 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    4818
                                              9 BANK0     12     6      6
                  _ADC_GetConversion (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2953
                                             21 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                    _CCP5_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SRAM_CONTROL_INITIALIZE                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     500
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Write                                        1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             21 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0     294
                                              3 COMRAM    18    18      0
                   Absolute function *
                            _ADC_ISR
          _i2c_slave_BusCollisionISR *
                      _i2c_slave_ISR *
 ---------------------------------------------------------------------------------
 (5) _i2c_slave_ISR                                        0     0      0     294
              _i2c2_driver_getRXData
                 _i2c2_driver_isData
                 _i2c2_driver_isRead
           _i2c2_driver_releaseClock
             _i2c_slave_AddrCallBack
               _i2c_slave_RdCallBack
               _i2c_slave_WrCallBack
 ---------------------------------------------------------------------------------
 (6) _i2c_slave_WrCallBack                                 0     0      0      22
                   Absolute function *
    _i2c_slave_DefWrInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_slave_DefWrInterruptHandler                      0     0      0      22
                 _i2c2_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c2_driver_TXData                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_slave_RdCallBack                                 0     0      0     272
                   Absolute function *
    _i2c_slave_PWMRdInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_slave_PWMRdInterruptHandler                      0     0      0     272
              _i2c2_driver_getRXData
                         _sram_write
 ---------------------------------------------------------------------------------
 (8) _sram_write                                           3     2      1     272
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (8) _i2c2_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2c_slave_AddrCallBack                               0     0      0       0
                   Absolute function *
  _i2c_slave_PWMAddrInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_slave_PWMAddrInterruptHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2c2_driver_releaseClock                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2c2_driver_isRead                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c2_driver_isData                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _i2c_slave_BusCollisionISR                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _EUSART2_Write
   _PWM4_Initialize
   _PWM4_LoadDutyValue
   _SRAM_CONTROL_INITIALIZE
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP5_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
   _TMR1_Initialize
   _TMR1_StartTimer
   _TMR2_Initialize
   _TMR2_StartTimer
   ___ftadd
     _ADC_GetConversion (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftmul (ARG)
       _ADC_GetConversion (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftneg (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       _ADC_GetConversion (ARG)
       ___ftpack (ARG)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       _ADC_GetConversion (ARG)
       ___ftpack (ARG)
   ___ftmul
     _ADC_GetConversion (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_GetConversion (ARG)
       ___ftpack (ARG)
   ___ftneg
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     _ADC_GetConversion (ARG)
     ___ftadd (ARG)
       _ADC_GetConversion (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_GetConversion (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             _ADC_GetConversion (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftmul (ARG)
       _ADC_GetConversion (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
     ___ftneg (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       _ADC_GetConversion (ARG)
       ___ftpack (ARG)
   ___lltoft
     ___ftpack
   ___lwmod
   ___lwtoft
     _ADC_GetConversion (ARG)
     ___ftpack (ARG)
   _i2c_slave_open
     _i2c2_driver_initSlaveHardware
     _i2c2_driver_setAddr
     _i2c2_driver_setBusCollisionISR
     _i2c2_driver_setMask
     _i2c_slave_setAddrIntHandler
     _i2c_slave_setIsrHandler
       _i2c2_driver_setI2cISR
     _i2c_slave_setReadIntHandler
     _i2c_slave_setWriteIntHandler
     _mssp2_enableIRQ
   _sram_read

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
   _i2c_slave_BusCollisionISR *
   _i2c_slave_ISR *
     _i2c2_driver_getRXData
     _i2c2_driver_isData
     _i2c2_driver_isRead
     _i2c2_driver_releaseClock
     _i2c_slave_AddrCallBack
       Absolute function(Fake) *
       _i2c_slave_PWMAddrInterruptHandler *
     _i2c_slave_RdCallBack
       Absolute function(Fake) *
       _i2c_slave_PWMRdInterruptHandler *
         _i2c2_driver_getRXData
         _sram_write
     _i2c_slave_WrCallBack
       Absolute function(Fake) *
       _i2c_slave_DefWrInterruptHandler *
         _i2c2_driver_TXData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2B      37       4       34.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      49       1       77.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      80       9        0.0%
DATA                 0      0      80      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb  2 18:36:41 2018

                   _i2c_slave_setIsrHandler 0DF6                        _i2c_slave_RdCallBack 0CEA  
                              __CFG_CP0$OFF 000000                                __CFG_CP1$OFF 000000  
                              __CFG_CP2$OFF 000000                                __CFG_CP3$OFF 000000  
                              ___ftadd@exp1 0074                                ___ftadd@exp2 0073  
                               __CFG_LVP$ON 000000                                ___ftadd@sign 0072  
            __size_of_i2c2_driver_getRXData 0004                                         l701 01EA  
                                       l710 0296                                         l702 01DC  
                                       l711 0370                                         l704 0230  
                                       l713 039C                                         l705 0222  
                                       l714 0488                                         l708 0254  
                                       l709 0260                                         l591 0B96  
                                       l695 013C                                         l960 096E  
                                       l961 0958                                         l697 01A6  
                                       l698 018C                                         l963 0996  
                                       l699 0198                                         l964 098C  
                                       l957 093A                                         l958 0930  
                                       l992 050E                                         l988 04E4  
                                       l997 0574                                __CFG_CPB$OFF 000000  
                                       _PR2 000FBB                                __CFG_CPD$OFF 000000  
             __end_of_i2c2_driver_getRXData 0E8A                             _timer1ReloadVal 0093  
                           __end_of_ADC_ISR 0E92                             _TMR2_Initialize 0DC6  
                           _PWM4_Initialize 0D9E                                         tosl 000FFD  
                                       wreg 000FE8                 __size_of_i2c2_driver_TXData 0008  
                           _CCP5_Initialize 0DB2              i2c_slave_setIsrHandler@handler 0018  
                              ___ftdiv@cntr 002A              __end_of_i2c_slave_AddrCallBack 0D2A  
                              ___ftdiv@sign 002F                                        l1002 056A  
                                      l1011 05A8                                        l1003 0560  
                                      l1012 059E                                        l1021 0854  
                                      l1014 05CC                                        l1015 05E8  
                                      l1023 087C                                        l1016 0618  
                                      l1024 08BA                                        l1040 07CA  
                                      l1025 08E0                                        l1042 07E2  
                                      l1114 0A36                                        l1043 07F2  
                                      l1115 0A2A                                        l1036 0760  
                                      l1060 06D4                                        l1038 0788  
                                      l1039 07BA                                        l1047 0CBC  
                                      l1160 0B00                                        l1065 0708  
                                      l1057 066C                                        l1161 0B0A  
                                      l1066 06FC                                        l1059 06E4  
                                      l1068 0724                                        l1156 0AE8  
                                      l1157 0AE0                                        l2452 0E14  
           ??_i2c2_driver_initSlaveHardware 0016                                        u2020 053E  
                                      u2201 0770                                        u2131 083C  
                                      u2060 057C                                        _LATA 000F89  
                                      u2310 0212                                        _LATB 000F8A  
                                      u2151 0864                                        u1511 0650  
                                      _LATC 000F8B                                        u2090 05B0  
                                      u1530 068A                                        u1610 0AEC  
                                      u2181 0748                                        u1535 0682  
                                      u1570 070E                                        u2290 01CC  
                                      u1921 04A2                                        u2377 028A  
                                      u1850 0922                                        u1931 04B6  
                                      u1960 04D6                                        u1890 09A0  
                                      u1990 0500                                        i2l93 0062  
                                      i2l95 0078                                        _TMR1 000FCE  
                                      _TMR2 000FBC                                        _WPUB 000F61  
                             _EUSART2_Write 0E12                                        _main 00E8  
                              ___ftpack@arg 0016                                ___ftpack@exp 0019  
                                      fsr0h 000FEA                 __size_of_i2c2_driver_isData 0010  
                                      fsr1h 000FE2                                        fsr2h 000FDA  
                                      fsr0l 000FE9                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004A  
                             __CFG_BORV$190 000000                 __size_of_i2c2_driver_isRead 0010  
                         sram_write@address 0003                                        prodh 000FF4  
            __size_of_i2c2_driver_setI2cISR 000A                                        prodl 000FF3  
                                      start 00E4               __end_of_i2c2_driver_setI2cISR 0E3C  
                             __CFG_IESO$OFF 000000                                ___ftmul@cntr 0067  
                              ___param_bank 000000                                ___ftmul@sign 0068  
                     ?_i2c_slave_RdCallBack 0001                                ___fttol@exp1 0083  
                              ___fttol@lval 007F                               _i2c_slave_ISR 0BAE  
            __size_of_OSCILLATOR_Initialize 000E               __end_of_OSCILLATOR_Initialize 0E12  
                                     ?_main 0001                             __end_of___ftadd 063E  
                           __end_of___ftdiv 0912                             _TMR1_StartTimer 0E7E  
                           __end_of___ftneg 0CCA                             __end_of___ftmul 082C  
                                     _T1CON 000FCD                             __end_of___fttol 0736  
                                     _T2CON 000FBA                              __CFG_DEBUG$OFF 000000  
                           __end_of___lwmod 0B14                                       i2l420 0BD2  
                                     i2l421 0BCC                                       i2l423 0BD6  
                                     i2l481 0A14                                       i2l482 09C8  
                                     i2l484 09F4              ??_i2c_slave_setWriteIntHandler 0018  
                        _PWM4_LoadDutyValue 0B4C                                       _TMR1H 000FCF  
                                     _TMR1L 000FCE                                       _PORTA 000F80  
                                     _PORTC 000F82                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                              ___lltoft@exp 0026                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                                       _sAddr 0040  
                            __CFG_EBTRB$OFF 000000                                       _sRead 0042  
                                     _count 008F                         ?_PWM4_LoadDutyValue 0016  
                      _i2c_slave_WrCallBack 0CCA                          __CFG_MCLRE$EXTMCLR 000000  
                             ___ftpack@sign 001A                     __end_of_TMR1_Initialize 0D46  
                            ?_EUSART2_Write 0001                                       pclath 000FFA  
                                     tablat 000FF5                                       status 000FD8  
              __size_of_i2c2_driver_setAddr 0008                                       wtemp6 004B  
                             sram_read@data 0018                              __CFG_HFOFST$ON 000000  
                           _TMR2_StartTimer 0E7A                __size_of_i2c2_driver_setMask 0008  
                 ??_i2c_slave_setIsrHandler 001A                              __CFG_PBADEN$ON 000000  
                           __initialization 0B14                                __end_of_main 0490  
                      ??_PWM4_LoadDutyValue 0018                              ?_i2c_slave_ISR 0001  
                   __end_of_PWM4_Initialize 0DB2                     __end_of_TMR2_Initialize 0DD6  
                                 ??_ADC_ISR 0001                 ?_INTERRUPT_InterruptManager 0001  
                                    ??_main 0084                               ___fttol@sign1 007E  
                   __end_of_CCP5_Initialize 0DC6                               __activetblptr 000002  
                            _i2c_slave_open 0A80                  __end_of_EUSART2_Initialize 0D74  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _ADCON2 000FC0                       ?_i2c_slave_WrCallBack 0001  
                                    _ADRESH 000FC4                                      _ADRESL 000FC3  
                                    _CCPR4H 000F59                                      _CCPR5H 000F56  
                                    _CCPR4L 000F58                                      _CCPR5L 000F55  
                                    _ANSELA 000F38                                      _ANSELB 000F39  
                                    _ANSELC 000F3A                            __end_of___ftpack 09C0  
                                    _T1GCON 000FCC                            __end_of___lltoft 0A80  
                            __CFG_WDTEN$OFF 000000                                      _RCREG2 000F74  
                          __end_of___lwtoft 0CA6            ??_i2c2_driver_setBusCollisionISR 0018  
           ?_i2c2_driver_setBusCollisionISR 0016                 ??_i2c_slave_BusCollisionISR 0001  
                                    _RCSTA2 000F71                                      _OSCCON 000FD3  
                                    _SPBRG2 000F75                             _currentPWMspeed 008B  
                                    _TXREG2 000F73                                      _TXSTA2 000F72  
     __end_of_i2c2_driver_initSlaveHardware 0D9E      __size_of_i2c2_driver_initSlaveHardware 0014  
             _i2c2_driver_initSlaveHardware 0D8A                               main@parameter 0088  
                            __CFG_XINST$OFF 000000                      ??_i2c_slave_RdCallBack 0004  
                              _CCPTMRS1bits 000F48                     __end_of_TMR1_StartTimer 0E82  
      __size_of_i2c_slave_setAddrIntHandler 000A                    ?_SRAM_CONTROL_INITIALIZE 0001  
                                 ??___ftadd 006F                              __CFG_STVREN$ON 000000  
                                 ??___ftdiv 0027                                   ??___ftneg 002A  
                                 ??___ftmul 0060                                   ??___fttol 0079  
                                 ??___lwmod 001A                                      _sWrite 0044  
                                    clear_0 0B2C                                      clear_1 0B38  
                    __end_of_i2c_slave_open 0AD2            __end_of_i2c2_driver_releaseClock 0E8E  
                     ___ftmul@f3_as_product 0064                                __pdataCOMRAM 0049  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                    ADC_GetConversion@channel 001A  
                       _i2c_slave_writeData 0049        __size_of_i2c_slave_setReadIntHandler 000A  
                   __end_of_TMR2_StartTimer 0E7E                             ??_EUSART2_Write 0016  
             __size_of_INTERRUPT_Initialize 0004                            ?_TMR1_Initialize 0001  
                         _SYSTEM_Initialize 0C5C                                  __accesstop 0060  
                   __end_of__initialization 0B3E                                  ___ftadd@f1 0069  
                                ___ftadd@f2 006C                    __size_of_mssp2_enableIRQ 0004  
                        ?_SYSTEM_Initialize 0001                               ___rparam_used 000001  
                                ___ftdiv@f1 0021                                  ___ftdiv@f2 0024  
                                ___ftdiv@f3 002B                                  ___ftneg@f1 0027  
                                ___ftmul@f1 0030                                  ___ftmul@f2 0033  
                           ??_i2c_slave_ISR 0004                                  ___fttol@f1 0075  
                            __pcstackCOMRAM 0001                         ??_SYSTEM_Initialize 0016  
                                ___lltoft@c 001E                   _i2c_slave_BusCollisionISR 0E92  
                          ?_TMR2_Initialize 0001                            ?_PWM4_Initialize 0001  
                                ___lwtoft@c 001E                 PWM4_LoadDutyValue@dutyValue 0016  
                           ?_i2c_slave_open 0001                            ?_CCP5_Initialize 0001  
                    ??_i2c_slave_WrCallBack 0002                   __end_of_SYSTEM_Initialize 0C82  
                                __pbssBANK0 008B                             __CFG_PLLCFG$OFF 000000  
           __end_of_SRAM_CONTROL_INITIALIZE 0D8A                          __CFG_CCP2MX$PORTC1 000000  
            ?_i2c2_driver_initSlaveHardware 0001                            ?_TMR1_StartTimer 0001  
                        __CFG_CCP3MX$PORTB5 000000              _i2c_slave_AddrInterruptHandler 003A  
                                   _CCP4CON 000F57                                     _CCP5CON 000F54  
                                   _ADC_ISR 0E8E                 _i2c2_driver_busCollisionISR 0046  
                                 ?___ftpack 0016                                   ?___lltoft 001E  
                   __size_of_ADC_Initialize 0018                         _i2c2_driver_setAddr 0E58  
                                 ?___lwtoft 001E                         _i2c2_driver_setMask 0E50  
                __end_of_i2c2_driver_TXData 0E70                          __size_of_sram_read 0028  
                                   _OSCCON2 000FD2                       _i2c2_driver_getRXData 0E86  
                                   _OSCTUNE 000F9B                    _i2c2_driver_releaseClock 0E8A  
                                   _SPBRGH2 000F76                                     i2u97_40 0DF0  
                                   _SSP2ADD 000F6E                                     i2u97_48 0DF2  
                                   i2u98_40 0DE0                                     i2u98_48 0DE2  
                                   _SSP2BUF 000F6F                                     _SSP2MSK 000F6A  
                          ?_TMR2_StartTimer 0001                  __end_of_i2c2_driver_isData 0DF6  
                __end_of_i2c2_driver_isRead 0DE6                              sram_write@data 0001  
                      ?_i2c2_driver_setAddr 0001                        ?_i2c2_driver_setMask 0001  
                           __CFG_PWRTEN$OFF 000000                                     __Hparam 0000  
                                   __Lparam 0000                       _i2c2_driver_setI2cISR 0E32  
                         ??_mssp2_enableIRQ 0016                                     ___ftadd 0490  
                                   ___ftdiv 082C                                     ___ftneg 0CA6  
                                   ___ftmul 0736                                     ___fttol 063E  
                                   ___lwmod 0AD2                                     __pcinit 0B14  
                                ??___ftpack 001B                                     __ramtop 0600  
                                ??___lltoft 0022                                     __ptext0 00E8  
                                   __ptext1 0C34                                     __ptext2 0A80  
                                   __ptext3 0E76                                     __ptext4 0E1E  
                                   __ptext5 0E28                                     __ptext6 0DF6  
                                   __ptext7 0E32                                     __ptext8 0E3C  
                                   __ptext9 0E50                                  ??___lwtoft 0021  
                                 _T1CONbits 000FCD                       _OSCILLATOR_Initialize 0E04  
                                 _T2CONbits 000FBA                    ??_PIN_MANAGER_Initialize 0016  
                __size_of_SYSTEM_Initialize 0026                        end_of_initialization 0B3E  
              ?_i2c_slave_setAddrIntHandler 0016                       ??_i2c2_driver_setAddr 0016  
                     ??_i2c2_driver_setMask 0016                               __Lmediumconst 0000  
   __end_of_i2c_slave_DefWrInterruptHandler 0E68    __size_of_i2c_slave_DefWrInterruptHandler 0008  
         ??_i2c_slave_DefWrInterruptHandler 0002            ?_i2c_slave_DefWrInterruptHandler 0001  
           _i2c_slave_DefWrInterruptHandler 0E60                          _EUSART2_Initialize 0D5E  
                         __end_of_sram_read 0C5C                                     postinc0 000FEE  
               __size_of_PWM4_LoadDutyValue 0032                                  _pwmCommand 0036  
    __end_of_i2c2_driver_setBusCollisionISR 0E50     __size_of_i2c2_driver_setBusCollisionISR 000A  
            _i2c2_driver_setBusCollisionISR 0E46                ?_i2c_slave_setReadIntHandler 0016  
                       ?_EUSART2_Initialize 0001                                   _PORTAbits 000F80  
 __end_of_i2c_slave_PWMAddrInterruptHandler 0E76  __size_of_i2c_slave_PWMAddrInterruptHandler 0006  
       ??_i2c_slave_PWMAddrInterruptHandler 0001          ?_i2c_slave_PWMAddrInterruptHandler 0001  
         _i2c_slave_PWMAddrInterruptHandler 0E70                    ??_i2c_slave_AddrCallBack 0001  
                    ?_i2c2_driver_getRXData 0001                                  _sram_write 0BDC  
           i2c2_driver_setBusCollisionISR@f 0016            __size_of_SRAM_CONTROL_INITIALIZE 0016  
        __size_of_i2c_slave_BusCollisionISR 0002                        ??_EUSART2_Initialize 0016  
                  ?_i2c_slave_setIsrHandler 0018                                 ___ftdiv@exp 002E  
             ??_i2c_slave_setAddrIntHandler 0018                      ?_i2c2_driver_setI2cISR 0016  
                               ___ftmul@exp 0063               __size_of_i2c_slave_RdCallBack 0020  
                          ??_i2c_slave_open 001A                __end_of_INTERRUPT_Initialize 0E86  
                             __pidataCOMRAM 0E94                              _ADC_Initialize 0D46  
       i2c_slave_setWriteIntHandler@handler 0016               ??_i2c_slave_setReadIntHandler 0018  
                    ?_OSCILLATOR_Initialize 0001                         start_initialization 0B14  
           __size_of_PIN_MANAGER_Initialize 002A                       __end_of_EUSART2_Write 0E1E  
                  __size_of_TMR1_Initialize 001C                       __end_of_i2c_slave_ISR 0BDC  
                    __end_of_ADC_Initialize 0D5E                                    ?_ADC_ISR 0001  
                ??_i2c2_driver_releaseClock 0001                           __size_of___ftpack 00AE  
           __size_of_i2c_slave_AddrCallBack 0020                                 ?_sram_write 0001  
                         __size_of___lltoft 005C                                 __pbssCOMRAM 0036  
                         __size_of___lwtoft 0024                               __pcstackBANK0 0060  
           __end_of_i2c_slave_setIsrHandler 0E04                    __size_of_PWM4_Initialize 0014  
                  __size_of_TMR2_Initialize 0010               __size_of_i2c_slave_WrCallBack 0020  
                  __size_of_CCP5_Initialize 0014                         EUSART2_Write@txData 0016  
                           _mssp2_enableIRQ 0E76                          _i2c2_driver_TXData 0E68  
                        _i2c2_driver_i2cISR 0095                                   __pnvBANK0 0093  
                    _PIN_MANAGER_Initialize 0C0A                         ?_i2c2_driver_TXData 0001  
                           main@commandType 008A                                   __pintcode 0008  
                        _i2c2_driver_isData 0DE6                          _i2c2_driver_isRead 0DD6  
                                  ?___ftadd 0069                                    ?___ftdiv 0021  
                                  ?___ftneg 0027                                    ?___ftmul 0030  
                                  ?___fttol 0075                                    ?___lwmod 0016  
                           ?_ADC_Initialize 0001                ??_INTERRUPT_InterruptManager 0004  
                          __CFG_PRICLKEN$ON 000000                         ?_i2c2_driver_isData 0001  
                       ?_i2c2_driver_isRead 0001                                    _BAUDCON2 000F70  
                  __size_of_TMR1_StartTimer 0004                     _SRAM_CONTROL_INITIALIZE 0D74  
                      ??_i2c2_driver_TXData 0001                        _INTERRUPT_Initialize 0E82  
                      ??_i2c2_driver_isData 0001                        ??_i2c2_driver_isRead 0001  
                                  _PIE1bits 000F9D                      _i2c_slave_AddrCallBack 0D0A  
                                  _PIE3bits 000FA3                    __size_of_TMR2_StartTimer 0004  
                                  i2u100_48 0CF6                                    i2u102_48 0D16  
                                  i2u104_48 0CD6         __size_of_INTERRUPT_InterruptManager 00DC  
                                  i2u171_48 0082                                    i2u171_49 0098  
                                  i2u168_48 006C                                    _PIR1bits 000F9E  
                                  _PIR3bits 000FA4                                    _PIR4bits 000F7B  
                       __size_of_sram_write 002E                                    _RCONbits 000FD0  
                          __CFG_WDTPS$32768 000000                                    _SSP2CON1 000F6C  
                                  _SSP2CON2 000F6B                                    _SSP2STAT 000F6D  
                                 _sram_read 0C34                     ??_i2c2_driver_getRXData 0001  
                         ??_TMR1_Initialize 0016                            __size_of_ADC_ISR 0004  
                                _ADCON0bits 000FC2                _i2c_slave_RdInterruptHandler 003E  
              _i2c_slave_WrInterruptHandler 003C                                   main@error 0086  
                                  _i2c1Data 0048                     __end_of_mssp2_enableIRQ 0E7A  
               __end_of_i2c2_driver_setAddr 0E60                 __end_of_i2c2_driver_setMask 0E58  
                               _INTCON2bits 000FF1                       ?_INTERRUPT_Initialize 0001  
                         ??_TMR2_Initialize 0016                           ??_PWM4_Initialize 0016  
                   ??_i2c2_driver_setI2cISR 0018     __end_of_i2c_slave_PWMRdInterruptHandler 0A24  
  __size_of_i2c_slave_PWMRdInterruptHandler 0064           ??_i2c_slave_PWMRdInterruptHandler 0004  
          ?_i2c_slave_PWMRdInterruptHandler 0001             _i2c_slave_PWMRdInterruptHandler 09C0  
                         ??_CCP5_Initialize 0016                                    __Hrparam 0000  
                __end_of_PWM4_LoadDutyValue 0B7E                                    __Lrparam 0000  
                         _ADC_GetConversion 0B7E                          __CFG_BOREN$SBORDIS 000000  
                         __CFG_P2BMX$PORTB5 000000            __size_of_i2c_slave_setIsrHandler 000E  
                   ??_OSCILLATOR_Initialize 0016                          ?_ADC_GetConversion 0016  
                          __size_of___ftadd 01AE                                  ?_sram_read 0001  
                          __size_of___ftdiv 00E6                            __size_of___ftneg 0024  
                          __size_of___ftmul 00F6                            __size_of___fttol 00F8  
                          __size_of___lwmod 0042                                    _adcValue 0091  
                                  ___ftpack 0912                                    ___lltoft 0A24  
                 ??_SRAM_CONTROL_INITIALIZE 0016                                    ___lwtoft 0C82  
                       ??_ADC_GetConversion 0018                __end_of_i2c_slave_RdCallBack 0D0A  
                                  __ptext10 0E46                                    __ptext11 0E58  
                                  __ptext20 0490                                    __ptext12 0D8A  
                                  __ptext21 0912                                    __ptext13 0C82  
                                _T1GCONbits 000FCC                                    __ptext30 0E82  
                                  __ptext22 0E7A                                    __ptext14 0AD2  
                                  __ptext31 0D5E                                    __ptext23 0E7E  
                                  __ptext15 0A24                                    __ptext40 0CCA  
                                  __ptext32 0DB2                                    __ptext24 0C5C  
                                  __ptext16 063E                                    __ptext41 0E60  
                                  __ptext33 0D46                                    __ptext25 0DC6  
                                  __ptext17 0CA6                                    __ptext50 0DD6  
                                  __ptext42 0E68                                    __ptext34 0D74  
                                  __ptext26 0D2A                                    __ptext18 0736  
                                  __ptext51 0DE6                                    __ptext43 0CEA  
                                  __ptext35 0B4C                                    __ptext27 0D9E  
                                  __ptext19 082C                                    __ptext52 0E92  
                                  __ptext44 09C0                                    __ptext36 0E12  
                                  __ptext28 0C0A                                    __ptext53 0E8E  
                                  __ptext45 0BDC                                    __ptext37 0B7E  
                                  __ptext29 0E04                                    __ptext54 0000  
                                  __ptext46 0E86                                    __ptext47 0D0A  
                                  __ptext39 0BAE                                    __ptext48 0E70  
                                  __ptext49 0E8A                                _SSP2CON1bits 000F6C  
                              _SSP2CON2bits 000F6B                           ??_TMR1_StartTimer 0016  
               __size_of_EUSART2_Initialize 0016                               __size_of_main 03A8  
        i2c_slave_setAddrIntHandler@handler 0016                   __end_of_ADC_GetConversion 0BAE  
      __end_of_i2c_slave_setWriteIntHandler 0E28       __size_of_i2c_slave_setWriteIntHandler 000A  
              _i2c_slave_setWriteIntHandler 0E1E                                    int$flags 004A  
        i2c_slave_setReadIntHandler@handler 0016                     i2c2_driver_setAddr@addr 0016  
                         ??_TMR2_StartTimer 0016          __end_of_INTERRUPT_InterruptManager 00E4  
                _INTERRUPT_InterruptManager 0008                                _SSP2STATbits 000F6D  
                    i2c2_driver_setI2cISR@f 0016                                ??_sram_write 0002  
                                _INTCONbits 000FF2                         i2c2_driver_TXData@d 0001  
                          ?_mssp2_enableIRQ 0001                      ??_INTERRUPT_Initialize 0016  
       __end_of_i2c_slave_setAddrIntHandler 0E46                 _i2c_slave_setAddrIntHandler 0E3C  
                                  intlevel2 0000                  ?_i2c_slave_BusCollisionISR 0001  
                          ___lwmod@dividend 0016                     ?_PIN_MANAGER_Initialize 0001  
                                _RCSTA2bits 000F71                            ??_ADC_Initialize 0016  
                   i2c2_driver_setMask@mask 0016                          __end_of_sram_write 0C0A  
              __end_of_i2c_slave_WrCallBack 0CEA         __end_of_i2c_slave_setReadIntHandler 0E32  
               _i2c_slave_setReadIntHandler 0E28               ?_i2c_slave_setWriteIntHandler 0016  
                               ??_sram_read 0016                      __size_of_EUSART2_Write 000C  
                           ___lwmod@divisor 0018                             ___lwmod@counter 001A  
                          sram_read@address 0017                     __size_of_i2c_slave_open 0052  
                         __CFG_T3CMX$PORTC0 000000                      __size_of_i2c_slave_ISR 002E  
         __size_of_i2c2_driver_releaseClock 0004              __end_of_PIN_MANAGER_Initialize 0C34  
                 ?_i2c2_driver_releaseClock 0001                     ?_i2c_slave_AddrCallBack 0001  
         __end_of_i2c_slave_BusCollisionISR 0E94                           __CFG_FOSC$INTIO67 000000  
                __size_of_ADC_GetConversion 0030                             _TMR1_Initialize 0D2A  
